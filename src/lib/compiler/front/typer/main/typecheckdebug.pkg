## typer-debugging.pkg

# Compiled by:
#     src/lib/compiler/front/typer/main.sublib


api Typer_Debugging {

     debug_print:  Ref( Bool )
	          -> ( (String,
                      (prettyprint::Stream -> X -> Void),
                      X)
                     )
		  -> Void;

     prettyprint_symbol_list:  prettyprint::Stream
			     -> List( symbol::Symbol )
			     -> Void;

     symbolmapstack_symbols:  symbolmapstack::Symbolmapstack
                          -> List( symbol::Symbol );

     check_symbolmapstack:  (symbolmapstack::Symbolmapstack,
			  symbol::Symbol)
			-> String;

     with_internals:  (Void -> X)
                     -> X;

}; #  Api Typer_Debugging 




stipulate
    package s= symbol;		# symbol		is from   src/lib/compiler/front/basics/map/symbol.pkg
    package se= symbolmapstack;	# symbolmapstack	is from   src/lib/compiler/front/typer-stuff/symbolmapstack/symbolmapstack.pkg
    package pp= prettyprint;	# prettyprint		is from   src/lib/prettyprint/big/src/prettyprint.pkg
    package ppu= unparse_junk;	# unparse_junk		is from   src/lib/compiler/front/typer/print/unparse-junk.pkg
    package em= error_message;	# error_message		is from   src/lib/compiler/front/basics/errormsg/error-message.pkg
    #
    include package   pp;
herein 

    package   typer_debugging
    : (weak)  Typer_Debugging		# Typer_Debugging	is from   src/lib/compiler/front/typer/main/typer-debugging.pkg
    {
	fun debug_print (debugging: Ref( Bool ))
		       (   msg: String,
                           printfn: pp::Stream -> X -> Void,
                           arg: X
                       )
            =
	    if *debugging
		#
		with_prettyprinter
		    #
		    (err::default_plaint_sink())
		    #
		    (\\ pp =
			{   pp.box' 0 -1 {.
				pp.lit msg;
				pp.ind "  ";
				printfn pp arg;
			    };
			    pp.flush ();
			}
		    );
	    fi;

	fun prettyprint_symbol_list pp (syms: List( s::Symbol ))
            = 
	    ppu::unparse_closed_sequence
		#
                pp
		#
		{ front      =>  \\ pp =  pp.txt "[ ",
		  separator  =>  \\ pp =  pp.txt ", ",
		  back       =>  \\ pp =  pp.txt " ]",
		  #
		  breakstyle =>  ppu::CONSISTENT,
		  print_one  =>  ppu::unparse_symbol
		}

		syms;


	#  More debugging: 

	fun symbolmapstack_symbols (symbolmapstack: se::Symbolmapstack)
            =
	    se::fold   (\\ ((s, _), sl) => s . sl; end )   NIL   symbolmapstack;

	fun check_symbolmapstack (   symbolmapstack: se::Symbolmapstack,
                                 symbol:      s::Symbol
                     )
            =
	    {   se::get (symbolmapstack, symbol);
               "YES"
            ;}
            except
                se::UNBOUND
                =>
                "NO"; end ;

	fun with_internals (f: Void -> X)
            =
	    {   internals   =   *typer_control::internals;
		#
                typer_control::internals := TRUE;

		(   f()
                    then
		        typer_control::internals := internals
                )
		except
                    exn
                    =
                    {   typer_control::internals := internals;
                        raise exception exn;
                    };
	    };

    };				# package typer_debugging 
end;				# stipulate


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1996 Bell Laboratories
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
