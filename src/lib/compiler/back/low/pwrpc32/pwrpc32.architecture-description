(*
 * This is the architecture description file of PowerPC derived from Lal's code.
 * I have no idea what the instructions do so it probably won't work.
 *
 * Note: I've now added lots of instructions for 64-bit and single precision
 * floating point support.
 *
 * I'm using Book E: PowerPC Architecture Enhanced for Embedded Applications
 * as the reference
 *
 * -- Allen
 *
 *     Changes to this file will not take effect until you run
 *
 *         sh/make-sourcecode-for-backend-sparc32
 *
 *     from the root directory in the sourcetree.
 *
 *                          -- 2011-05-18 CrT  
 *)

architecture pwrpc32 =
struct

   big endian 

   lowercase assembly

   storage
     INT_REGISTER = $r[32] of 64 bits asm: (
	   fn (r,_) => if deref asm_syntax_pwrpc32.ibm_syntax  (* "!asm_syntax_pwrpc32.ibm_syntax" doesn't translate properly into Mythryl at preset. -- 2011-05-18 CrT *)
	               then int.to_string r 
		       else "r"^int.to_string r)
   | FLOAT_REGISTER = $f[32] of 64 bits asm: (
	   fn (f,_) => if deref asm_syntax_pwrpc32.ibm_syntax 
	               then int.to_string f
		       else "f"^int.to_string f)
   | FLAGS_REGISTER = $cc[8] of 4 bits asm: (fn (cr,_) => "cr"^int.to_string cr)
   | RAM_BYTE = $m[] of 8 aggregable bits asm: (fn (r,_) => "m"^int.to_string r)
   | CONTROL_DEPENDENCY = $ctrl[] of 8 bits asm: (fn (r,_) => "ctrl"^int.to_string r)
    (*
     * The above five are the standard registersets
     * as defined by   predefined_registerkinds   in
     *
     *     src/lib/compiler/back/low/tools/arch/adl-raw-syntax-predicates-g.pkg   
     * 
     * They need to be defined in every architecture;
     * the compiler has hardwired dependencies upon them.
     * (The number and length of registers in each set
     * may however vary by architecture.)
     *
     * The following register set is architecture-specific -- it exists only on PowerPC:
     *)
   | SPR = $spr[32] of 64 bits 
            asm: (fn (1,_) => "xer"
                   | (8,_) => "lr"
                   | (9,_) => "ctr"
                   | (r,_) => int.to_string r
                 )

   locations
       stackptr_r = $r[1]
   and asm_tmp_r  = $r[28]
   and fasm_tmp   = $f[0]
   and r0         = $r[0]

        (* the encoding of these are from page 372 *)
   and xer       = $spr[1] (* Integer exception register *)
   and lr        = $spr[8] (* Link register *)
   and ctr       = $spr[9] (* counter register *)

   structure RTL =
   struct
   end

   structure Instruction = 
   struct
      type gpr = int			(* general purpose register *)
      type fpr = int			(* floating point register *)
      type ccr = int			(* condition code register *)
      type crf = int			(* condition register field *)
   
      sumtype spr! = XER | LR | CTR
    
      sumtype Operand = 
          Reg_Op of $int_register		``<int_register>'' (put_int_register int_register) rtl: $r[INT_REGISTER]
        | Immed_Op of int			``<int>'' (u32.from_int int)  rtl: immed int
        | Label_Op of tcf.label_expression	``<put_label_expression label_expression>'' (u32.from_int (tce.value_of label_expression))

      type Addressing_Mode = rkj.Codetemp_Info * Operand	(* Does this ever get used for anything? -- 2011-05-19 CrT *)
   
      sumtype Effective_Address = 
          Direct of $INT_REGISTER
        | FDirect of $FLOAT_REGISTER
        | Displace of { base:   $INT_REGISTER,
                        disp:   tcf.label_expression,
                        ramregion:    rgn.Ramregion
                      } 
   
      (* Load/store operators that have the E suffix means that 64-bit
       * addressing is used.  Note: the x suffix is implicitly added if rb is a
       * register.
       *
       * -- Allen
       *) 
   
                              
      sumtype load! = LBZ    (* load byte and zero *)
                     | LBZE   
                     | LHZ     (* load half word and zero *)
                     | LHZE
                     | LHA     (* load half word algebraic *)
                     | LHAE
                     | LWZ     (* load word and zero *) 
                     | LWZE
                     | LDE     (* load double word extended 
                                * Note: there is no LD or LDX!!!
                                *)

		     | LBZU
		     | LHZU
		     | LHAU
		     | LWZU
		     | LDZU
   
      sumtype store! = STB
                      | STBE
                      | STH
                      | STHE
                      | STW
                      | STWE
                      | STDE

		      | STBU
		      | STHU
		      | STWU
		      | STDU
   
      sumtype fload! = LFS
                      | LFSE
                      | LFD
                      | LFDE

		      | LFSU
		      | LFDU
   
      sumtype fstore! = STFS
                       | STFSE
                       | STFD
                       | STFDE

		       | STFSU
		       | STFDU
    
      sumtype cmp! = CMP | CMPL
   
      sumtype fcmp! = FCMPO 0w32 (* ordered *) 
                     | FCMPU 0w0  (* unordered *)
   
                              (* xo *)
      sumtype unary! = NEG    0w104
                      | EXTSB  0w954   (* extend sign byte *)
                      | EXTSH  0w922   (* extend sign halfword *)
                      | EXTSW  0w986   (* extend sign word *)
                      | CNTLZW 0w26    (* count leading zeros word *)
                      | CNTLZD 0w58    (* count leading zeros double word *)
         
   
                                (* opcd/xo *)
      sumtype funary! = FMR    (0w63,0w72)
                       | FNEG   (0w63,0w40)
                       | FABS   (0w63,0w264)
                       | FNABS  (0w63,0w136)
                       | FSQRT  (0w63,0w22)
                       | FSQRTS (0w59,0w22)
                       | FRSP   (0w63,0w12)  (* round to single precision *)
                       | FCTIW  (0w63,0w14)  (* convert to integer word *)
                       | FCTIWZ (0w63,0w15)  (* convert to integer word *)
                       | FCTID  (0w63,0w814) (* convert to double word *)
                       | FCTIDZ (0w63,0w815) (* convert to double word *)
                       | FCFID  (0w63,0w846) (* convert from double word *)
   
                                (* opcd/xo *)
      sumtype farith!  = FADD  (0w63,0w21)
                        | FSUB  (0w63,0w20)
                        | FMUL  (0w63,0w25)
                        | FDIV  (0w63,0w18)
                        | FADDS (0w59,0w21)
                        | FSUBS (0w59,0w20)
                        | FMULS (0w59,0w25)
                        | FDIVS (0w59,0w18)
   
                                  (* opcd, xo *)
      sumtype farith3!  = FMADD   (0w63,0w29)
                         | FMADDS  (0w59,0w29)
                         | FMSUB   (0w63,0w28)
                         | FMSUBS  (0w59,0w28)
                         | FNMADD  (0w63,0w31)
                         | FNMADDS (0w59,0w31)
                         | FNMSUB  (0w63,0w30)
                         | FNMSUBS (0w59,0w30)
                         | FSEL    (0w63,0w23) (* floating point select *)
   
      sumtype bo = 
          TRUE   0wb01100			(* 011zy *)
        | FALSE  0wb00100			(* 001zy *)
        | ALWAYS 0wb10100			(* 1z1zz *)
        | COUNTER of {eq_zero:bool, cond:bool option}
             (case cond of 
                NULL => if eq_zero then 0wb10010  (* 1z01y *)
                        else            0wb10000  (* 1z00y *)
              | THE cc => case (eq_zero,cc) of
                             (false,false) => 0wb00000  (* 0000y *)
                           | (false,true)  => 0wb01000  (* 0100y *)
                           | (true,false)  => 0wb00010  (* 0001y *)
                           | (true,true)   => 0wb01010  (* 0101y *)
             )
   
    		        (* operation			ARITH	ARITHI *)
      sumtype arith! =    (* ---------			-----	------ *) 
                 (* xo *)
          ADD    0w266     (* add			add     addi   *)
        | SUBF   0w40	(* subtract from		subf	subfic *)
        | MULLW  0w235	(* multiply			mullw   mulli  *)
        | MULLD  0w233	(* multiply double word		mulld     -    *)
        | MULHW  0w75	(* multiply high word		mulhw     -    *)
        | MULHWU 0w11	(* multiply high word unsigned	mulhwu    -    *)
        | DIVW   0w491	(* divide word			divw      -    *)
        | DIVD   0w489	(* divide doubleword 		divd      -    *)
        | DIVWU  0w459	(* divide word unsigned		divwu     -    *)
        | DIVDU  0w457	(* divide doubleword unsigned	divdu     -    *)
        | AND    0w28	(* and				and	andi   *)
        | OR     0w444  (* or				or	ori    *)
        | XOR    0w316	(* xor				xor	xori   *)
        | NAND   0w476     (* nand *)
        | NOR    0w124     (* nor *)
        | EQV    0w284     (* eqv *)
        | ANDC   0w60      (* and with complement       andc      -    *)
        | ORC    0w412     (* or with complement        orc       -    *)
        | SLW    0w24	(* shift left word		slw	rlwinm *)
        | SLD    0w27	(* shift left double word	sld	rldinm *)
        | SRW    0w536	(* shift right word		srw     rlwinm *)
        | SRD    0w539	(* shift right double word	srd     rldinm *)
        | SRAW   0w792	(* shift right algebraic word	sraw	srawi  *)
        | SRAD   0w794	(* shift right algebraic dword	srad	sradi  *)
   
      sumtype arithi! =    (* ---------		-----	------ *) 
                 (* opcd *)
          ADDI   0w14      (* add			add     addi   *)
        | ADDIS  0w15      (* add-shifted		 -	addis  *)
        | SUBFIC 0w8	(* subtract from		subf	subfic *)
        | MULLI  0w7	(* multiply			mullw   mulli  *)
        | ANDI_Rc "andi." 0w28	(* and			and	andi   *)
        | ANDIS_Rc "andis." 0w29(* and-shifted		-	andis  *)
        | ORI    0w24   (* or				or	ori    *)
        | ORIS   0w25   (* or-shifted			-	ori    *)
        | XORI   0w26	(* xor				xor	xori   *)
        | XORIS  0w27	(* xor-shifted			-	xoris  *)
        (*
        | SLWI  (* !!! *) (* shift left word		slw	rlwinm *)
        | SLDI  (* !!! *) (* shift left double word	sld	rldinm *)
        | SRWI  (* !!! *) (* shift right word		srw     rlwinm *)
        | SRDI  (* !!! *) (* shift right double word	srd     rldinm *)
        *)
        | SRAWI      	(* shift right algebric word	sraw    srawi *)
        | SRADI  		(* shift right algebraic dword	srad	sradi  *)
   
        (* !!! means that these are pseudo ops! *)
   
      sumtype rotate! = 
                (* opcd *)
          RLWNM (* rotate left word AND mask rlwnm	rlwinm *)
        | RLDCL 
        | RLDCR 
   
      sumtype rotatei! = 
          RLWINM (* rotate left word AND mask rlwnm rlwinm *)
        | RLWIMI
        | RLDICL   
        | RLDICR
        | RLDIC
        | RLDIMI
   
      sumtype ccarith! =  (* page 47-49 *)
                (* xo *)
          CRAND  0w257			(* cond. reg. AND *)
        | CROR   0w449			(* cond. reg. OR *)
        | CRXOR  0w193			(* cond. reg. XOR *)
        | CRNAND 0w225 			(* cond. reg. NAND *)
        | CRNOR  0w33			(* cond. reg. NOR *)
        | CREQV  0w289			(* cond. reg. EQV *)
        | CRANDC 0w129			(* cond. reg. AND with complement *)
        | CRORC  0w417			(* cond. reg. OR with complement *)
   
        
      (* bits in condition code *)
      sumtype bit! = 
          LT "lt" | GT "gt" | EQ "eq" | SO	"so"	(* cr0 *)
        | FL "lt" | FG "gt" | FE "eq" | FU	"un"	(* cr1 *)
         (* Lal: as far as I can tell there don't seem to be mnemonics
          * for these, however using lt, gt, eq, so should fool
          * the assembler into looking at the right bits in the
          * cc field. Of course the bf field had better be cr1.
          *)
        | FX "lt" | FEX "gt" | VX "eq" | OX "so"
   
      (* bits in integer exception register *)
      sumtype xerbit = SO64 (* summary overflow 64 *)
                      | OV64 (* overflow 64 *)
                      | CA64 (* carry 64 *)
                      | SO32 (* summary overflow 32 bits *)
                      | OV32 (* overflow 32 bits *)
                      | CA32 (* carry 32 bits *)
    
      type cr_bit = $FLAGS_REGISTER * bit
   end (* Instruction *)

   (*
    * The following describes the encoding of the instructions.
    *)
   instruction formats 32 bits 

      (* primitives *)
      x_form{opcd:6,rt:5,ra:5,rb:5,xo:10,rc:bool 1} 
    | xl_form{opcd:6,bt:5,ba:5,bb:5,xo:10,lk:bool 1}
    | m_form{opcd:6,rs:5,ra:5,rb:5,mb:5,me:5,rc:bool 1}
    | a_form{opcd:6,frt:5,fra:5,frb:5,frc:5,xo:5,rc:bool 1}

       (* integer loads *)
    | loadx{opcd:6=31,rt:INT_REGISTER 5,ra:INT_REGISTER 5,rb:INT_REGISTER 5,xop:10,rc:1=0}
    | loadd{opcd:6,rt:INT_REGISTER 5,ra:INT_REGISTER 5,d:Operand signed 16} 
    | loadde{opcd:6,rt:INT_REGISTER 5,ra:INT_REGISTER 5,de:Operand signed 12,xop:4} 

    | load{ld,rt,ra,d} =
       (case (d,ld) of
          (mcf.Reg_Op rb,  mcf.LBZ)  => loadx { rt, ra, rb, xop = 0w87  } (* lbzx  *)
        | (mcf.Reg_Op rb,  mcf.LBZE) => loadx { rt, ra, rb, xop = 0w95  } (* lbzxe *)
        | (mcf.Reg_Op rb,  mcf.LHZ)  => loadx { rt, ra, rb, xop = 0w279 } (* lhzx  *)
        | (mcf.Reg_Op rb,  mcf.LHZE) => loadx { rt, ra, rb, xop = 0w287 } (* lhzxe *)
        | (mcf.Reg_Op rb,  mcf.LHA)  => loadx { rt, ra, rb, xop = 0w343 } (* lhax  *)
        | (mcf.Reg_Op rb,  mcf.LHAE) => loadx { rt, ra, rb, xop = 0w351 } (* lhaxe *)
        | (mcf.Reg_Op rb,  mcf.LWZ)  => loadx { rt, ra, rb, xop = 0w23  } (* lwzx  *)
        | (mcf.Reg_Op rb,  mcf.LWZE) => loadx { rt, ra, rb, xop = 0w31  } (* lwzxe *)
        | (mcf.Reg_Op rb,  mcf.LDE)  => loadx { rt, ra, rb, xop = 0w799 } (* ldxe  *)

        | (d,mcf.LBZ)           => loadd{opcd=0w34,rt,ra,d}
        | (de,mcf.LBZE)         => loadde{opcd=0w58,rt,ra,de,xop=0w0}
        | (d,mcf.LHZ)           => loadd{opcd=0w40,rt,ra,d}
        | (de,mcf.LHZE)         => loadde{opcd=0w58,rt,ra,de,xop=0w2}
        | (d,mcf.LHA)           => loadd{opcd=0w42,rt,ra,d}
        | (de,mcf.LHAE)         => loadde{opcd=0w58,rt,ra,de,xop=0w4}
        | (d,mcf.LWZ)           => loadd{opcd=0w32,rt,ra,d}
        | (de,mcf.LWZE)         => loadde{opcd=0w58,rt,ra,de,xop=0w6}
        | (de,mcf.LDE)          => loadde{opcd=0w62,rt,ra,de,xop=0w0}

	| (mcf.Reg_Op rb,mcf.LHAU) => loadx{rt,ra,rb,xop=0w375} (* lhaux *)
	| (mcf.Reg_Op rb,mcf.LHZU) => loadx{rt,ra,rb,xop=0w311} (* lhzux *)
	| (mcf.Reg_Op rb,mcf.LWZU) => loadx{rt,ra,rb,xop=0w55}  (* lwzux *)
	| (d,mcf.LHZU)          => loadd{opcd=0w41,rt,ra,d}
	| (d,mcf.LWZU)          => loadd{opcd=0w33,rt,ra,d}
        | _			=> error "load"
       )

       (* floating point loads *)
    | floadx{opcd:6=31,ft:FLOAT_REGISTER 5,ra:INT_REGISTER 5,rb:INT_REGISTER 5,xop:10,rc:1=0}
    | floadd{opcd:6,ft:FLOAT_REGISTER 5,ra:INT_REGISTER 5,d:Operand signed 16}
    | floadde{opcd:6,ft:FLOAT_REGISTER 5,ra:INT_REGISTER 5,de:Operand signed 12,xop:4}

    | fload{ld,ft,ra,d} =
       (case (d,ld) of
         (mcf.Reg_Op rb,mcf.LFS)  => floadx{ft,ra,rb,xop=0w535}
       | (mcf.Reg_Op rb,mcf.LFSE) => floadx{ft,ra,rb,xop=0w543}
       | (mcf.Reg_Op rb,mcf.LFD)  => floadx{ft,ra,rb,xop=0w599}
       | (mcf.Reg_Op rb,mcf.LFDE) => floadx{ft,ra,rb,xop=0w607}
       | (mcf.Reg_Op rb,mcf.LFDU) => floadx{ft,ra,rb,xop=0w631}
       | (d,mcf.LFS)		=> floadd{ft,ra,d,opcd=0w48}
       | (de,mcf.LFSE)		=> floadde{ft,ra,de,opcd=0w62,xop=0w4}
       | (d,mcf.LFD)		=> floadd{ft,ra,d,opcd=0w50}
       | (de,mcf.LFDE)		=> floadde{ft,ra,de,opcd=0w62,xop=0w6}
       | (d,mcf.LFDU)		=> floadd{ft,ra,d,opcd=0w51}
       | _			=> error "fload"	
       )

       (* integer stores *)
    | storex{opcd:6=31,rs:INT_REGISTER 5,ra:INT_REGISTER 5,rb:INT_REGISTER 5,xop:10,rc:1=0} 
    | stored{opcd:6,rs:INT_REGISTER 5,ra:INT_REGISTER 5,d:Operand signed 16}
    | storede{opcd:6,rs:INT_REGISTER 5,ra:INT_REGISTER 5,de:Operand signed 12,xop:4} 

    | store{st,rs,ra,d} =
       (case (d,st) of
          (mcf.Reg_Op rb,mcf.STB)  => storex{rs,ra,rb,xop=0w215}
        | (mcf.Reg_Op rb,mcf.STBE) => storex{rs,ra,rb,xop=0w223}
        | (mcf.Reg_Op rb,mcf.STH)  => storex{rs,ra,rb,xop=0w407}
        | (mcf.Reg_Op rb,mcf.STHE) => storex{rs,ra,rb,xop=0w415}
        | (mcf.Reg_Op rb,mcf.STW)  => storex{rs,ra,rb,xop=0w151}
        | (mcf.Reg_Op rb,mcf.STWE) => storex{rs,ra,rb,xop=0w159}
        | (mcf.Reg_Op rb,mcf.STDE) => storex{rs,ra,rb,xop=0w927}
        | (d,mcf.STB)   => stored{rs,ra,d,opcd=0w38}
        | (de,mcf.STBE) => storede{rs,ra,de,opcd=0w58,xop=0w8}
        | (d,mcf.STH)   => stored{rs,ra,d,opcd=0w44}
        | (de,mcf.STHE) => storede{rs,ra,de,opcd=0w58,xop=0w10}
        | (d,mcf.STW)   => stored{rs,ra,d,opcd=0w36}
        | (de,mcf.STWE) => storede{rs,ra,de,opcd=0w58,xop=0w14}
        | (de,mcf.STDE) => storede{rs,ra,de,opcd=0w62,xop=0w8}
        | _		=> error "store"
       )

       (* floating point stores *)
    | fstorex{opcd:6=31,fs:FLOAT_REGISTER 5,ra:INT_REGISTER 5,rb:INT_REGISTER 5,xop:10,rc:1=0} 
    | fstored{opcd:6,fs:FLOAT_REGISTER 5,ra:INT_REGISTER 5,d:Operand signed 16}
    | fstorede{opcd:6,fs:FLOAT_REGISTER 5,ra:INT_REGISTER 5,de:Operand signed 12,xop:4}

    | fstore{st,fs,ra,d} =
       (case (d,st) of
         (mcf.Reg_Op rb,mcf.STFS)  => fstorex{fs,ra,rb,xop=0w663}
       | (mcf.Reg_Op rb,mcf.STFSE) => fstorex{fs,ra,rb,xop=0w671}
       | (mcf.Reg_Op rb,mcf.STFD)  => fstorex{fs,ra,rb,xop=0w727}
       | (mcf.Reg_Op rb,mcf.STFDE) => fstorex{fs,ra,rb,xop=0w759}
       | (d,mcf.STFS)           => fstored{fs,ra,d,opcd=0w52}
       | (de,mcf.STFSE)         => fstorede{fs,ra,de,opcd=0w62,xop=0w12}
       | (d,mcf.STFD)           => fstored{fs,ra,d,opcd=0w54}
       | (de,mcf.STFDE)         => fstorede{fs,ra,de,opcd=0w62,xop=0w14}
       | _			=> error "fstore"
       )

       (* integer arithmetic *)
     | unary'{opcd:6=31,ra:INT_REGISTER 5,rt:INT_REGISTER 5,_:5=0, oe: Bool 1, oper: unary 9, rc: Bool 1}
     | unary{ra,rt,oper,oe,rc} =
        (case oper of
           mcf.NEG => unary'{ra=rt,rt=ra,oper,oe,rc} (* swapped! *)
         | _     => unary'{ra,rt,oper,oe,rc}
        )
     | arith' {opcd: 6=31, rt: INT_REGISTER 5, ra: INT_REGISTER 5, rb: INT_REGISTER 5, oe: Bool 1, oper: arith 9, rc: Bool 1}
     | arithi' {oper:arithi 6, rt:INT_REGISTER 5, ra:INT_REGISTER 5, im: Operand signed 16}
     | srawi{opcd:6=31,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:Operand signed 5,xop:10=824,rc:1=0}
     | sradi'{opcd:6=31,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:5,xop:9=0w413,sh2:1,rc:1=0} 
     | sradi{rs,ra,sh:Operand signed 6} =
         sradi'{rs=rs,ra=ra,sh=(sh at [0..4]),sh2=sh at [5]}

     | arith{oper,rt,ra,rb,oe,rc} =
        (case oper of
          (mcf.ADD | mcf.SUBF | mcf.MULLW | mcf.MULLD | mcf.MULHW | mcf.MULHWU |
           mcf.DIVW | mcf.DIVD | mcf.DIVWU | mcf.DIVDU) => 
            arith'{oper,rt,ra,rb,oe,rc}
            (* For some unknown reasons, the encoding of rt and ra 
             * are swapped! 
             *)
        | _ => arith'{oper,rt=ra,ra=rt,rb,oe,rc}
        )

     | arithi{oper,rt,ra,im} =
        (case oper of
           (mcf.ADDI | mcf.ADDIS | mcf.SUBFIC | mcf.MULLI) => arithi'{oper,rt,ra,im}
         | mcf.SRAWI => srawi{rs=ra,ra=rt,sh=im}
         | mcf.SRADI => sradi{rs=ra,ra=rt,sh=im}
            (* For some unknown reasons, the encoding of rt and ra 
             * are swapped! 
             *)
         | _       => arithi'{oper,rt=ra,ra=rt,im}
        )

       (* integer compare *)
     | Cmpl  { opcd:6=31,  bf:FLAGS_REGISTER 3,  _:1=0,  l:bool 1,  ra:INT_REGISTER 5,  rb:INT_REGISTER 5,  xo:10=32,  _:1=0 }
     | Cmpli { opcd:6=10,  bf:FLAGS_REGISTER 3,  _:1=0,  l:bool 1,  ra:INT_REGISTER 5,  ui:Operand signed 16 }
     | Cmp   { opcd:6=31,  bf:FLAGS_REGISTER 3,  _:1=0,  l:bool 1,  ra:INT_REGISTER 5,  rb:INT_REGISTER 5,  xo:10=0,  _:1=0 }
     | Cmpi  { opcd:6=11,  bf:FLAGS_REGISTER 3,  _:1=0,  l:bool 1,  ra:INT_REGISTER 5,  si:Operand signed 16 }

     | compare { cmp', bf, l, ra, rb }
          = 
          (case (cmp', rb) of
             (mcf.CMP,mcf.Reg_Op rb)  => Cmp{bf,l,ra,rb}
          |  (mcf.CMPL,mcf.Reg_Op rb) => Cmpl{bf,l,ra,rb}
          |  (mcf.CMP,si)          => Cmpi{bf,l,ra,si}
          |  (mcf.CMPL,ui)         => Cmpli{bf,l,ra,ui}
          )

       (* floating point compare *) 
     | fcmp{opcd:6=63,bf:FLAGS_REGISTER 3,_:2=0,fa:FLOAT_REGISTER 5,fb:FLOAT_REGISTER 5,cmp:fcmp 10,_:1=0}

       (* floating point unary *) 
     | funary{oper:funary,ft:FLOAT_REGISTER,fb:FLOAT_REGISTER,rc} =
       let my  (opcd,xo) = oper
       in 
        case oper
        of (0wx3f, 0wx16)  => (* FSQRT *)
             a_form{opcd=opcd,frt=ft,fra=0w0,frb=fb,frc=0w0,xo=xo,rc=rc}
           | (0wx3b, 0wx16)  => (* FSQRTS *) 
             a_form{opcd=opcd,frt=ft,fra=0w0,frb=fb,frc=0w0,xo=xo,rc=rc}
           | _ => 
             x_form{opcd=opcd,rt=ft,ra=0w0,rb=fb,xo=xo,rc=rc} 
       end

       (* floating point binary *) 
     | farith{oper,ft:FLOAT_REGISTER,fa:FLOAT_REGISTER,fb:FLOAT_REGISTER,rc} =
       let my  (opcd,xo) = put_farith oper
       in  case oper of
            (mcf.FMUL | mcf.FMULS) =>
                  a_form{opcd=opcd,frt=ft,fra=fa,frb=0w0,frc=fb,xo=xo,rc=rc} 
           | _ => a_form{opcd=opcd,frt=ft,fra=fa,frb=fb,frc=0w0,xo=xo,rc=rc} 
       end

       (* floating point ternary *) 
     | farith3{oper:farith3,ft:FLOAT_REGISTER,fa:FLOAT_REGISTER,fc:FLOAT_REGISTER,fb:FLOAT_REGISTER,rc} =
       let my  (opcd,xo) = oper
       in  a_form{opcd=opcd,frt=ft,fra=fa,frb=fb,frc=fc,xo=xo,rc=rc} 
       end

     | cr_bit{cc} = 
       let my  (cr,bit) = cc
       in (put_flags_register cr << 0w2) +
          u32.from_int (
           case bit of
             mcf.LT => 0 | mcf.GT => 1  | mcf.EQ => 2 | mcf.SO => 3
           | mcf.FL => 0 | mcf.FG => 1  | mcf.FE => 2 | mcf.FU => 3
           | mcf.FX => 0 | mcf.FEX => 1 | mcf.VX => 2 | mcf.OX => 3
          )
       end

     | ccarith{oper:ccarith,bt,ba,bb} =
        xl_form{opcd=0w19,bt=cr_bit{cc=bt},ba=cr_bit{cc=ba},bb=cr_bit{cc=bb},
                xo=oper,lk=false}

       (* trap on word *)
     | twr{opcd:6=31,to:int 5,ra:INT_REGISTER 5,rb:INT_REGISTER 5,xop:10=4,_:1=0}
     | twi{opcd:6=3,to:int 5,ra:INT_REGISTER 5,si:Operand signed 16}
     | tw{to,ra,si} =
        (case si of mcf.Reg_Op rb => twr{to,ra,rb} | _ => twi{to,ra,si})

       (* trap on double word *)
     | tdr{opcd:6=31,to:int 5,ra:INT_REGISTER 5,rb:INT_REGISTER 5,xop:10=68,_:1=0}
     | tdi{opcd:6=2,to:int 5,ra:INT_REGISTER 5,si:Operand signed 16}
     | td{to,ra,si} =
        (case si of mcf.Reg_Op rb => tdr{to,ra,rb} | _ => tdi{to,ra,si})

       (* move condition field p49 *)
     | mcrf{opcd:6=19,bf:FLAGS_REGISTER 3,_:2=0,bfa:FLAGS_REGISTER 3,_:18=0}

       (* move from/to special purpose register p131/132 
        * the encoding of spr = spr[0..4] || spr[5..9]
        *)
     | mtspr'{opcd:6=31,rs:INT_REGISTER 5,spr:10,xop:10=467,_:1=0}
     | mtspr{rs,spr:SPR} = 
         mtspr'{rs,spr=((spr at [0..4]) << 0w5) + (spr at [5..9])}
     | mfspr'{opcd:6=31,rt:INT_REGISTER 5,spr:10,xop:10=339,_:1=0}
     | mfspr{rt,spr:SPR} = 
         mfspr'{rt,spr=((spr at [0..4]) << 0w5) + (spr at [5..9])}

       (* Branch p41 *)
     | b{opcd:6=18,li:signed 24,aa:bool 1,lk:bool 1}
     | be{opcd:6=22,li:signed 24,aa:bool 1,lk:bool 1}

       (* Branch conditional p42 *)
     | bc{opcd:6=16,bo:bo 5,bi:5,bd:signed 14,aa:bool 1,lk:bool 1}
     | bce{opcd:6=16,bo:bo 5,bi:5,bd:signed 14,aa:bool 1,lk:bool 1}

       (* Branch conditional to link register *)
     | bclr{opcd:6=19,bo:bo 5,bi:5,_:5=0,xop:10=16,lk:bool 1}
     | bclre{opcd:6=19,bo:bo 5,bi:5,_:5=0,xop:10=17,lk:bool 1}

       (* Branch conditional to count register *)
     | bcctr{opcd:6=19,bo:bo 5,bi:5,_:5=0,xop:10=528,lk:bool 1}
     | bcctre{opcd:6=19,bo:bo 5,bi:5,_:5=0,xop:10=529,lk:bool 1}

       (* Rotate *)
     | rlwnm{oper:6=23,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:INT_REGISTER 5,mb:int 5,me:int 5,rc:1=0}
     | rlwinm{oper:6=21,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:5,mb:int 5,me:int 5,rc:1=0}
     | rldcl{oper:6=30,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:INT_REGISTER 5,mb:int 5,_:5=8,rc:1=0}
     | rldicl{oper:6=30,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:5,mb:int 5,_:4=0,sh2:1,rc:1=0}
     | rldcr{oper:6=30,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:INT_REGISTER 5,mb:int 5,_:5=9,rc:1=0}
     | rldicr{oper:6=30,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:5,mb:int 5,_:4=1,sh2:1,rc:1=0}
     | rldic{oper:6=30,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:5,mb:int 5,_:4=2,sh2:1,rc:1=0}
     | rlwimi{oper:6=20,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:5,mb:int 5,me:int 5,rc:1=0}
     | rldimi{oper:6=30,rs:INT_REGISTER 5,ra:INT_REGISTER 5,sh:5,mb:int 5,_:4=3,sh2:1,rc:1=0}

     | rotate{oper,ra,rs,sh,mb,me} =
        (case (oper,me) of
          (mcf.RLWNM,THE me) => rlwnm{ra,rs,sh,mb,me}
        | (mcf.RLDCL,_) => rldcl{ra,rs,sh,mb}
        | (mcf.RLDCR,_) => rldcr{ra,rs,sh,mb}
	| _           => error "rotate"
        )
     | rotatei{oper,ra,rs,sh:Operand,mb,me} =
        (case (oper,me) of
          (mcf.RLWINM,THE me) => rlwinm{ra,rs,sh,mb,me}
        | (mcf.RLWIMI,THE me) => rlwimi{ra,rs,sh=sh,mb,me}
        | (mcf.RLDICL,_)       => rldicl{ra,rs,sh=sh at [0..4],sh2=sh at [5],mb}
        | (mcf.RLDICR,_)       => rldicr{ra,rs,sh=sh at [0..4],sh2=sh at [5],mb}
        | (mcf.RLDIC,_)        => rldic{ra,rs,sh=sh at [0..4],sh2=sh at [5],mb}
        | (mcf.RLDIMI,_)       => rldimi{ra,rs,sh=sh at [0..4],sh2=sh at [5],mb}
	| _                  => error "rotatei"
        )

	(* Taken from a googled link:
	    http://publibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/aixassem/alangref/lwarx.htm
	 *)
     | lwarx{oper:6=0w31, rt:INT_REGISTER 5, ra:INT_REGISTER 5, rb:INT_REGISTER 5, _:10=0w20, _:1=0} 
     | stwcx{oper:6=0w31, rs:INT_REGISTER 5, ra:INT_REGISTER 5, rb:INT_REGISTER 5, _:10=0w150, _:1=1} 

   (*
    * Some helper functions for generating machine code.
    * These are copied from Lal's code.
    *)
   structure MC = 
   struct
      fun relative(mcf.LABEL_OP label_expression) = u32.from_int (tce.value_of label_expression - deref loc) >>> 0w2
        | relative _ = error "relative"
   end

   (*
    * Reservation tables and pipeline definitions for scheduling
    *)

   (* Function units *)
   resource issue and mem and alu and falu and fmul and fdiv and branch

   (* Different implementations of cpus *)
   cpu default 2 [2 issue, 2 mem, 1 alu]  (* 2 issue machine *)

   (* Definitions of various reservation tables *) 
   pipeline NOP _    = [issue] 
    and     ARITH _  = [issue^^alu]
    and     LOAD _   = [issue^^mem]
    and     STORE _  = [issue^^mem,mem,mem] 
    and     FARITH _ = [issue^^falu]
    and     FMUL _   = [issue^^fmul,fmul]
    and     FDIV _   = [issue^^fdiv,fdiv*50]
    and     BRANCH _ = [issue^^branch]

   (*
    * Some helper functions for generating assembly code.
    *)
   structure Assembly = 
   struct
      fun emitx(s,mcf.Reg_Op _) = 
           if string.get_byte_as_char(s,size s - 1) = #"e" then
              (emit(string.substring(s,0,size s - 1)); emit "xe")
           else (emit(s); emit "x")
        | emitx(s,_) = emit s

      fun e_OERc{oe=false,rc=false} = ()
        | e_OERc{oe=false,rc=true}  = emit "."
        | e_OERc{oe=true,rc=false}  = emit "o"
        | e_OERc{oe=true,rc=true}   = emit "o."

      fun e_rc false = ""
        | e_rc true  = "."

      fun cr_bit(cr,bit) = 
         4 * (rkj.hardware_register_id_of cr) + 
         (case bit of
            mcf.LT => 0 | mcf.GT => 1 | mcf.EQ => 2 | mcf.SO => 3
          | mcf.FL => 0 | mcf.FG => 1 | mcf.FE => 2 | mcf.FU => 3
          | mcf.FX => 0 | mcf.FEX => 1 | mcf.VX => 2 | mcf.OX => 3
         )
      fun e_CRbit x = emit(int.to_string(cr_bit x))

      fun e_LK true = emit "l"
        | e_LK false = ()

      fun e_I (mcf.Reg_Op _) = ()
        | e_I _ = emit "i"

      fun e_BI(bo, bf, bit) = 
          case (bo, Rkj.hardware_register_id_of bf) of 
            (mcf.ALWAYS, _) => ()
          | (mcf.COUNTER{cond=NULL, ...}, _) => ()
          | (_,0) => emit(asm_bit bit)
          | (_,n) => emit("4*cr" ^ int.to_string n ^ "+" ^ asm_bit bit)
      fun put_bo bo = 
        emit(case bo
        of mcf.TRUE => "t"
         | mcf.FALSE => "f"
         | mcf.ALWAYS => ""
         | mcf.COUNTER{eq_zero, cond=NULL} => if eq_zero then "dz" else "dnz"
         | mcf.COUNTER{eq_zero, cond=THE cc} =>
             (if eq_zero then "dz" else "dnz") ^
                (if cc then "t" else "f")
        (*esac*))

      fun e_ME (THE me) = (emit ", "; put_int me)
        | e_ME (NULL)   = ()

      fun address(ra,mcf.Reg_Op rb) = (put_register ra; emit ", "; put_register rb)
        | address(ra,d)            = (put_operand d;   emit "("; put_register ra; emit ")")

   end (* Assembly *)

   base_op
       LL of {ld:load, rt: $INT_REGISTER, ra: $INT_REGISTER, d:Operand, ramregion: rgn.Ramregion}	(* This was "L", changed because that conflicts with Mythryl convention that "L" is a type variable. -- 2011-05-19 CrT *)
	``<emitx(asm_load ld,d)>\t<rt>, <address(ra,d)><put_ramregion ramregion>''
        load{ld,rt,ra,d}

     | LF of {ld:fload, ft: $FLOAT_REGISTER, ra: $INT_REGISTER, d:Operand, ramregion: rgn.Ramregion}
	``<emitx(asm_fload ld,d)>\t<ft>, <address(ra,d)><put_ramregion ramregion>'' 
        fload{ld,ft,ra,d}

     | ST of {st:store, rs: $INT_REGISTER, ra: $INT_REGISTER, d:Operand, ramregion: rgn.Ramregion}
	``<emitx(asm_store st,d)>\t<rs>, <address(ra,d)><put_ramregion ramregion>''
        store{st,rs,ra,d}

     | STF of {st:fstore, fs: $FLOAT_REGISTER, ra: $INT_REGISTER, d:Operand, ramregion: rgn.Ramregion}
	``<emitx(asm_fstore st,d)>\t<fs>, <address(ra,d)><put_ramregion ramregion>''
        fstore{st,fs,ra,d}

     | UNARY of {oper:unary, rt: $INT_REGISTER, ra: $INT_REGISTER, rc:bool, oe:bool}
	``<oper><e_OERc{rc,oe}>\t<rt>, <ra>''
        unary{oper,rt,ra,oe,rc}

     | ARITH of {oper:arith, rt: $INT_REGISTER, ra: $INT_REGISTER, rb: $INT_REGISTER, rc:bool, oe:bool}
        ``<oper><e_OERc{rc,oe}>\t<rt>, <ra>, <rb>''
	arith{oper,rt,ra,rb,oe,rc}

     | ARITHI of {oper:arithi, rt: $INT_REGISTER, ra: $INT_REGISTER, im:Operand}
	``<oper>\t<rt>, <ra>, <im>''
	arithi{oper,rt,ra,im}

     | ROTATE of {oper:rotate, ra: $INT_REGISTER, rs: $INT_REGISTER, sh: $INT_REGISTER, mb:int, me:int option}
	``<oper>\t<ra>, <rs>, <sh>, <mb><e_ME me>''
	rotate{oper,ra,rs,sh,mb,me}

     | ROTATEI of {oper:rotatei, ra: $INT_REGISTER, rs: $INT_REGISTER, sh:Operand, mb:int, me:int option}
	``<oper>\t<ra>, <rs>, <sh>, <mb><e_ME me>''
	rotatei{oper,ra,rs,sh,mb,me}

     | COMPARE of {cmp:cmp, l:bool, bf: $FLAGS_REGISTER, ra: $INT_REGISTER, rb:Operand}
	``<cmp><e_I rb>\t<bf>, <emit(if l then "1" else "0")>, <ra>, <rb>''
	compare { cmp'=cmp, bf, l, ra, rb }

     | FCOMPARE of {cmp:fcmp, bf: $FLAGS_REGISTER, fa: $FLOAT_REGISTER, fb: $FLOAT_REGISTER}
	``<cmp>\t<bf>, <fa>, <fb>''
	fcmp { cmp, bf, fa, fb }
 
     | FUNARY of {oper:funary, ft: $FLOAT_REGISTER, fb: $FLOAT_REGISTER, rc: bool }
	``<oper><e_rc rc>\t<ft>, <fb>''
	funary { oper, ft, fb, rc }

     | FARITH of {oper:farith, ft: $FLOAT_REGISTER, fa: $FLOAT_REGISTER, fb: $FLOAT_REGISTER, rc:bool}
	``<oper><e_rc rc>\t<ft>, <fa>, <fb>''
	farith{oper,ft,fa,fb,rc}

     | FARITH3 of {oper:farith3, ft: $FLOAT_REGISTER, fa: $FLOAT_REGISTER, fb: $FLOAT_REGISTER, fc: $FLOAT_REGISTER, rc:bool}
	``<oper><e_rc rc>\t<ft>, <fa>, <fb>, <fc>''
	farith3{oper,ft,fa,fb,fc,rc}

     | CCARITH of {oper:ccarith, bt:cr_bit, ba:cr_bit, bb:cr_bit}
	``<oper>\t<e_CRbit bt>, <e_CRbit ba>, <e_CRbit bb>''
	ccarith{oper,bt,ba,bb}

     | MCRF of {bf: $FLAGS_REGISTER, bfa: $FLAGS_REGISTER} (* move condition register field p49 *)
	``mcrf\t<bf>, <bfa>''
	mcrf{bf,bfa}

       (* move to special register p131 *) 
     | MTSPR of {rs: $INT_REGISTER, spr: $SPR}
	``mt<spr>\t<rs>''
	mtspr{rs,spr}

       (* move from special register p132 *) 
     | MFSPR of {rt: $INT_REGISTER, spr: $SPR}
	``mf<spr>\t<rt>''
	mfspr{rt,spr}

       (* Load word and reserve indexed *)
     | LWARX of {rt: $INT_REGISTER, ra: $INT_REGISTER, rb: $INT_REGISTER}
         ``lwarx\t<rt>, <ra>, <rb>''
         lwarx{rt, ra, rb}

       (* Store word conditional indexed *)
     | STWCX of {rs: $INT_REGISTER, ra: $INT_REGISTER, rb: $INT_REGISTER}
     	``stwcx.\t<rs>, <ra>, <rb>''
	stwcx{rs, ra, rb}

     (* Trapping word *)
     | TW of {to:int, ra: $INT_REGISTER, si:Operand}
	``tw<e_I si>\t<to>, <ra>, <si>''
	tw{to,ra,si}

     (* Trapping double word *)
     | TD of {to:int, ra: $INT_REGISTER, si:Operand}
	``td<e_I si>\t<to>, <ra>, <si>''
	td{to,ra,si}
 
     (* Control Instructions - AA is always assumed to be 0 *)
     | BC of {bo:bo, bf: $FLAGS_REGISTER, bit:bit, address:Operand, LK:bool, fall:Operand}
	``b<bo><e_LK LK>\t<e_BI(bo,bf,bit)>, <address>''
	bc{bo,bi=cr_bit{cc=(bf,bit)},bd=relative address,aa=false,lk=LK}

     | BCLR of {bo:bo, bf: $FLAGS_REGISTER, bit:bit, LK:bool, labels:lbl.Codelabel list}
	``b<bo>lr<e_LK LK>\t<e_BI(bo,bf,bit)>''
        bclr{bo,bi=cr_bit{cc=(bf,bit)},lk=LK}

     | BB of {address:Operand, LK:bool}			(* This was "B", changed because that conflicts with Mythryl convention that "B" is a type variable. -- 2011-05-19 CrT *)
	``b<e_LK LK>\t<address>''
	b{li=relative address,aa=false,lk=LK}

     (* CALL = BCLR {bo=ALWAYS, bf=0, bit=0, LK=true, labels=[] *)

     | CALL of { def:       rgk.Codetemplists,
                 uses:      rgk.Codetemplists, 
                 cuts_to:   lbl.Codelabel List,
                 ramregion: rgn.Ramregion
               }
	``blrl<put_ramregion ramregion><put_defs(def)><put_uses(uses)><put_cuts_to cuts_to>''
        bclr{bo=mcf.ALWAYS,bi=0w0,lk=true}
    
     | SOURCE of {}
        asm: ``source''
        mc:  ()

     | SINK of {}
        asm: ``sink''
        mc:  ()

     | PHI of {}
        asm: ``phi''
        mc:  ()

     structure SSA =
     struct

        fun operand(ty, mcf.Reg_Op r) = tcf.REG(32, r)
          | operand(ty, mcf.Immed_Op i) = tcf.LI i
          (*| operand(ty, mcf.Label_Op le) = tcf.LABEL le*)

     end

 end
