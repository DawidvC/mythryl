# I don't believe this library is (or ever will be) used for anything. -- 2011-05-23 CrT

control.lib:

        ../control/lowhalf-error-message.pkg
        ../control/lowhalf-control.pkg
        ../control/lowhalf-timing.pkg

gc.lib:
/*
 * This library implements GC safety. 
 */

	control.lib
	lib.lib
	graphs.lib
	lowhalf.lib
	ir.lib
	rtl.lib

	/* GC safety stuff */
	../heapcleaner-safety/gc-gen.api
	../heapcleaner-safety/gc-g.pkg
	../heapcleaner-safety/gc-liveness.api
	../heapcleaner-safety/gc-liveness.pkg
	../heapcleaner-safety/gc-typemap.api
	../heapcleaner-safety/gc-typemap.pkg
	../heapcleaner-safety/gc-dummy-type.sml
	../heapcleaner-safety/gc-type-system.api
	../heapcleaner-safety/gc-type-system.pkg
	../heapcleaner-safety/gc-invariants.sml

graphs.lib:
/*
 * This is a generic graph library. 
 */

	control.lib
	lib.lib

	../graph/acyclic-graph.pkg
	../graph/bellman-fords-single-source-shortest-paths-g.pkg
	../graph/bigraph.api
	../graph/closed-semi-ring.api
        ../graph/orig-digraph.pkg
	../graph/orig-node-priqueue.pkg
	../graph/orig-udgraph.pkg
	../graph/dijkstras-single-source-shortest-paths-g.pkg
	../graph/floyd-warshalls-all-pairs-shortest-path-g.pkg
	../graph/johnsons-all-pairs-shortest-paths-g.pkg
	../graph/graph-bfs.api
	../graph/graph-bfs.pkg
	../graph/graph-bcc.api
	../graph/graph-bcc.pkg
	../graph/graph-combination.api
	../graph/graph-combination.pkg
	../graph/graph-cycles.api
	../graph/graph-cycles.pkg
	../graph/graph-dfs.api
	../graph/graph-dfs.pkg
	../graph/graph-is-cyclic.api
	../graph/graph-is-cyclic.pkg
	../graph/graph-minor.pkg
	../graph/graph-strongly-connected-components.api
	../graph/graph-scc.pkg
	../graph/graph-topological-sort.api
	../graph/graph-topological-sort.pkg
	../graph/oop-digraph.api
	../graph/oop-digraph.pkg
	../graph/make-empty-graph.api
	../graph/group.api
	../graph/mapped-digraph-view.pkg
	../graph/kruskal.pkg
	../graph/matching.api
	../graph/matching.pkg
	../graph/maximum-flow.api
	../graph/maximum-flow-g.pkg
	../graph/min-cut.api
	../graph/stoer-wagners-minimal-undirected-cut-g.pkg
	../graph/no-exit.pkg
	../graph/node-partition.pkg
	../graph/node-priqueue.api
	../graph/printgraph.pkg
	../graph/readonly.pkg
	../graph/renamegraph.pkg
	../graph/revgraph.pkg
	../graph/seme.pkg
	../graph/shortest-paths.api
	../graph/singleton.pkg
	../graph/graph-snapshot-g.pkg
	../graph/spanning-tree.api
	../graph/start-stop.pkg
	../graph/subgraph-p.pkg
	../graph/subgraph.pkg
	../graph/trace-graph.pkg
	../graph/trans-closure.pkg
	../graph/ugraph.pkg
	../graph/uniongraph.pkg
	../graph/wrappers.pkg
	../graph/update-graph-info.pkg

intel32.lib:

	lowhalf.lib
	control.lib
	lib.lib
        graphs.lib
	treecode.lib

        /* c calls */
        ../intel32/ccalls/ccalls-intel32-per-unix-system-v-abi-g.pkg

        ../intel32/mcg/gas-pseudo-ops-intel32-g.pkg

	/* omit frame pointer */
	../intel32/omit-framepointer/intel32omit-framepointer.pkg

	/* Intel32 (x86) specific backend */
	../intel32/code/registerkinds-intel32.codemade.pkg
	../intel32/code/treecode-extension-sext-compiler-intel32-g.pkg
	../intel32/code/machcode-intel32.codemade.api
	../intel32/code/machcode-intel32-g.codemade.pkg
	../intel32/code/treecode-extension-sext-intel32.pkg
	../intel32/code/compile-register-moves-intel32.api
	../intel32/code/compile-register-moves-intel32-g.pkg
	../intel32/code/machcode-universals-intel32-g.pkg
	../intel32/code/machcode-address-of-ramreg-intel32.api
	../intel32/code/instruction-frequency-properties-intel32-g.pkg
	../intel32/emit/translate-machcode-to-asmcode-intel32-g.codemade.pkg
	../intel32/intel32-mc.pkg
	../intel32/regor/instruction-rewriter-intel32.api
	../intel32/regor/intel32-rewrite.pkg
	/* ../intel32/regor/intel32-reg-allot.sml-unused */
	../intel32/regor/intel32Spill.sml
	/* This is no long needed */
	/* ../intel32/regor/intel32-pseudo-r.pkg */
	../intel32/jmp/intel32-jumps.pkg 
	../intel32/treecode/intel32.pkg

	/* Floating Point Code Generation/Optimization */
	../intel32/treecode/orig-intel32-fp.pkg

	/* register allocator */
	../intel32/regor/regor-intel32-g.pkg


intel32-gc.lib:

	lowhalf.lib
	gc.lib
	intel32.lib
	
	/* Intel32 (x86) specific backend */
intel32-peephole.lib:

	control.lib
	lowhalf.lib
	peephole.lib
	intel32.lib

	/* intel32 */
	../intel32/code/peephole-intel32-g.pkg
	/* ../intel32/code/leaf-fn-improver-intel32-g.pkg */

intel32-rtl.lib:

	control.lib
	lowhalf.lib
	rtl.lib
	region.lib
	intel32.lib
	
	/* intel32 specific backend */
	../intel32/treecode/intel32RTL.sml 
	../intel32/treecode/intel32RTLProps.sml 

intel32-sched.lib:

	control.lib
	lib.lib
	lowhalf.lib
	intel32.lib
	sched.lib
	region.lib
	
	/* Intel32 (x86) scheduler */ 
	../intel32/scheduling/intel32Arch.sig
	../intel32/scheduling/intel32ReservationTable.sig
	../intel32/scheduling/intel32PairingRT.sml
	../intel32/scheduling/intel32PipelineRT.sml
	../intel32/scheduling/intel32PentiumII.sml
	../intel32/scheduling/intel32PentiumPro.sml
	/* ../intel32/scheduling/intel32SchedulingProps.sml */

	../intel32/scheduling/intel32SchedProps.sml

intel32-ssa.lib:

	control.lib
	lowhalf.lib
	rtl.lib
	ssa.lib
	region.lib
	intel32.lib
	intel32-rtl.lib
	
	/* Intel32 (x86) specific backend */
	../intel32/static-single-assignment/intel32SSAProps.sml
ir.m:ake7

	lowhalf.lib
	control.lib
	lib.lib
	graphs.lib
	visual.lib
	ir-archive.lib
	treecode.lib

	/* These provide a graph view for clusters.  Required if you 
	 * want to perform any non-trivial analysis on the program.
	 * Also required if you want to use the visualization stuff on clusters.
	 */
	../cluster/cluster-graph.api
	../cluster/cluster-graph.pkg
	../cluster/cluster-viewer.api
	../cluster/cluster-viewer.pkg

	/* lowhalf IR for optimizations. These are necessary only if you want
	 * to use various optional lowhalf optimizations.
	 */
	../ir/dataflow.api
	../ir/dataflow-g.pkg.unused
	../ir/lowhalf-branch-chaining-g.pkg.unused
	../ir/local-machcode-controlflow-graph-transformations.api.unused
	../ir/local-machcode-controlflow-graph-transformations-g.pkg.unused
	../ir/lowhalf-cpr.sml
	../ir/lowhalf-format-instruction-g.pkg
	../ir/idefs2.api
	../ir/idefs2.pkg
	../ir/lowhalf-idefs.api
	../ir/tarjans-idef-iuse-set-g.pkg.unused
	../ir/lowhalf-ir.api
	../ir/lowhalf-whole-program-analysis-intermediate-representation-g.pkg.unused
	../ir/lowhalf-ir-improver.api
	../ir/lowhalf-liveness-analysis-g.pkg.unused
	../ir/lowhalf-insert-preheaders-g.pkg.unused
	../ir/lowhalf-reshape-branches-g.pkg.unused
	../ir/static-branch-prediction-g.pkg.unused
	
	/* Glue modules.  These are required only if you want to 
	 * play with optimizations.
	 */
	../glue/lowhalf-glue.api
	../glue/lowhalf-glue.pkg
ir-archive.lib:
	control.lib
	lib.lib
	graphs.lib

	../ir-archive/apt.sig
	../ir-archive/apt.sml
	../ir-archive/cdg.api
	../ir-archive/cdg.pkg
	../ir-archive/compute-freq.api
	../ir-archive/compute-freq.pkg
	../ir-archive/compute-freq2.api
	../ir-archive/compute-freq2.pkg
	../ir-archive/comp-djgraph.sml
	../ir-archive/derived-graph.api
	../ir-archive/derived-graph.pkg
	../ir-archive/dj-dataflow.api
	../ir-archive/dj-dataflow.pkg
	../ir-archive/djgraph.api
	../ir-archive/djgraph.pkg
	../ir-archive/dominance-frontier.api
	../ir-archive/dominance-frontier.pkg
	../ir-archive/dominator.api
	../ir-archive/dominator-tree-g.pkg
	../ir-archive/reducibility.api
	../ir-archive/reducibility.pkg
	../ir-archive/loop-package.sig
	../ir-archive/loop-package.sml
	../ir-archive/ssa.api
	../ir-archive/ssa.pkg

lib.lib:
/*
 * This is the lowhalf library
 */
	control.lib

	../library/note.api
	../library/note.pkg
	../library/bitset.api
	../library/bitset.pkg
	../library/cache.pkg
	../library/catlist.pkg
        ../library/orig-expanding-rw-vector.pkg
	../library/orig-sparse-rw-vector.pkg
/*
	../library/dynamic-bitset.pkg
	../library/fixed-point.api
	../library/fixed-point.pkg
 */
	../library/freq.api
	../library/freq.pkg
/*
	../library/hashtable.api
	../library/hashtable.pkg
	../library/hash-map.api
	../library/hash-map.pkg
	../library/hash-bag.api
	../library/hash-bag.pkg
	../library/hash-multimap.api
	../library/hash-multimap.pkg
	../library/hash-set.api
	../library/hash-set.pkg
	../library/int-set.pkg
 */
 /*
	../library/intmap.api
	../library/intmap.pkg
  */
	../library/heap.pkg
	../library/line-break.pkg
	../library/priority-queue.api
	../library/priority-queue.pkg
/*
	../library/probability.pkg
	../library/randlist.pkg
	../library/regset.api
	../library/regset.pkg
 */
	../library/sortedlist.pkg
	../library/string-out-stream.api
	../library/string-out-stream.pkg
/*
	../library/lazy.pkg
	../library/transaction-glue.pkg
	../library/transaction-log.api
	../library/transaction-log.pkg
	../library/transaction.api
	../library/transaction.pkg
	../library/undoable-array.pkg
	../library/undoable-ref.pkg
 */
 /*
	../library/two-word-unt.pkg
  */

lowhalf.lib:

	control.lib
 	graphs.lib
	visual.lib
	lib.lib

	/* Core definitions. These are required */
	../code/registerkinds.api
	../code/registerkinds-g.pkg
	../code/registerkinds-junk.api
	../code/registerkinds-junk.pkg
	../code/rewrite-machine-instructions.api
	../code/machcode-universals.api
	../code/codebuffer.api
	../code/codebuffer-g.pkg
	../code/machcode-form.api
	../code/compile-register-moves.api
	../code/compile-register-moves-g.pkg
	../code/late-constant.api
	../code/codelabel.pkg
	../code/codelabel.api
	../code/ramregion.api
	../code/instruction-frequency-properties.api
	../code/frequncy-properties-g.pkg
	../code/lowhalf-notes.api
	../code/lowhalf-notes.pkg
	../code/lowhalf-improver.api
	
	/* New ../aliasing/memory disambiguation support */
	../aliasing/lowhalf-ramregion.api
	../aliasing/lowhalf-ramregion.pkg
	../aliasing/points-to.api
	../aliasing/points-to.pkg
	
	/* Core definitions for the Treecode language. These are required. */
	../treecode/treecode-form.api
	../treecode/treecode-form-g.pkg
	../treecode/treecode-evaluate.sig
	../treecode/treecode-evaluate.sml
	../treecode/treecode-extension.api
	../treecode/treecode-pith.api
	../treecode/treecode-pith.pkg
	../treecode/translate-treecode-to-machcode.api
	../treecode/treecode-transforms.api
	../treecode/treecode-transforms-g.pkg
	../treecode/treecode-hash.api
	../treecode/treecode-hash-g.pkg
	../treecode/treecode-bitsize.api
	../treecode/treecode-bitsize-g.pkg
	../treecode/treecode-codebuffer.api
	../treecode/treecode-codebuffer-g.pkg
	../treecode/treecode-mult.api
	../treecode/treecode-mult.pkg
	../treecode/machine-int.api
	../treecode/machine-int.pkg
	
	/* Basic cluster stuff. These are required. */
	../mcg/build-flowgraph.pkg
	../mcg/machcode-controlflow-graph-improver.api
	../mcg/client-pseudo-ops.api
	../mcg/machcode-controlflow-graph.api
	../mcg/machcode-controlflow-graph-g.pkg
	../mcg/machcode-controlflow-graph-view.api
	../mcg/machcode-controlflow-graph-view.pkg
	../mcg/count-copies-in-machcode-controlflow-graph-g.pkg
	../mcg/compile-register-moves-phase-g.pkg
	../mcg/gnu-assembler-pseudo-ops-g.pkg
	../mcg/print-machcode-controlflow-graph-g.pkg
	../mcg/pseudo-op.api
	../mcg/pseudo-ops.pkg
	../mcg/base-pseudo-ops.api
	../mcg/pseudo-ops-basis-type.pkg
	../mcg/pseudo-ops-big.pkg
	../mcg/pseudo-op-endian.api
	../mcg/pseudo-ops-little.pkg

	
	/* Core register allocator utilities */
	../regor/pick-available-hardware-register.api
	../regor/getreg.pkg
	../regor/getreg2.pkg
	../regor/liveness.api
	../regor/liveness-g.pkg
	
        /* Spill heuristics */
        ../regor/register-spilling-per-chaitin-heuristic.pkg
        ../regor/register-spilling-per-chow-hennessy-heuristic.pkg

	/* New Regor */
        ../regor/codetemp-interference-graph.api
        ../regor/ra-graph.pkg
        ../regor/iterated-register-coalescing.api
        ../regor/iterated-register-coalescing.pkg
        ../regor/regor-spill-types-g.pkg
        ../regor/register-spilling.api
        ../regor/register-spilling-g.pkg
        ../regor/register-spilling-per-xxx-heuristic.api
        ../regor/regor-view-of-machcode-controlflow-graph.api
        ../regor/ra-flowgraph-part.api
        ../regor/solve-register-allocation-problems.api
        ../regor/solve-register-allocation-problems-by-iterated-coalescing-g.pkg
	../regor/solve-register-allocation-problems-by-recursive-partition-g.pkg
	../regor/ra-dead-code-elimination.pkg
	../regor/ra-priqueue.api
	../regor/regor-ram-merging-g.pkg
	../regor/regor-risc-g.pkg

        # Cluster based Regor's:
	#
        ../regor/cluster-regor-g.pkg

	# Assembly machine code stuff:
	#
	../emit/machcode-codebuffer.api
	../emit/emit-machcode-controlflow-graph-as-asmcode.api 
	../emit/asm-stream.pkg
	../emit/asm-util.pkg
	../emit/emit-machcode-controlflow-graph-as-asmcode-g.pkg
	../emit/code-segment-buffer.api
	../emit/execode-emitter.api
	
	# Basic cleaner types stuff:
        #
	../heapcleaner-safety/codetemps-with-heapcleaner-info.api
	../heapcleaner-safety/codetemps-with-heapcleaner-info-g.pkg
	../heapcleaner-safety/gc-type.api
	
	# Span dependency stuff:
	#
	../jmp/basic-block-scheduler2.pkg
	../jmp/squash-jumps-and-write-code-to-code-segment-buffer.api
	../jmp/squash-jumps-and-write-code-to-code-segment-buffer-intel32-g.pkg
	../jmp/squash-jumps-and-write-code-to-code-segment-buffer-sparc32-g.pkg
	../jmp/delay-slot-props.api
	../jmp/no-delay-slots-g.pkg
	../jmp/jump-size-ranges.api

	# block placement:
	#
	../block-placement/make-final-basic-block-order-list.api
	../block-placement/default-block-placement-g.pkg

        # c calls:
	#
        ../ccalls/ctypes.pkg
        ../ccalls/ccalls.api

 	/* omit frame pointer optimization */
 	../omit-framepointer/free-up-framepointer-in-machcode.api

treecode.lib:
/*
 * This library contains some simple Treecode utilities 
 */
	lowhalf.lib
	control.lib
	lib.lib

	../treecode/treecode-hashing-equality-and-display.api
	../treecode/treecode-utils.pkg
	../treecode/treecode-fold.api
	../treecode/treecode-fold-g.pkg
	../treecode/treecode-rewrite.api
	../treecode/treecode-rewrite-g.pkg
	../treecode/treecode-simplifier.api
	../treecode/treecode-simplifier-g.pkg
	../treecode/instruction-sequence-generator.api
	../treecode/instruction-sequence-generator-g.pkg

opt.lib:
/*
 * This library implemenents the lowhalf SSA optimizer.
 */

	lowhalf.lib
	control.lib
	lib.lib
	graphs.lib
	visual.lib
	ir-archive.lib
	ir.lib
	rtl.lib
	ssa.lib
	sched.lib
	gc.lib
	
	../glue/lowhalf-improver.pkg

peephole.lib:
/* 
 * This library contains only the peephole improver stuff.  
 */
	lowhalf.lib
	graphs.lib

	/* Peephole improvements */
	../code/peephole.api
	../mcg/machcode-peephole-phase-g.pkg

pwrpc32.lib:
/* 
 * PowerPC specific modules for lowhalf code generation framework.
 */

	lowhalf.lib
	control.lib
	lib.lib

        /* c calls */
        ../pwrpc32/ccalls/ccalls-pwrpc32-mac-osx-g.pkg

	/* PowerPC specific backend */
	../pwrpc32/code/registerkinds-pwrpc32.codemade.pkg
	../pwrpc32/code/machcode-pwrpc32.codemade.api
	../pwrpc32/code/machcode-pwrpc32-g.codemade.pkg
	../pwrpc32/code/compile-register-moves-pwrpc32.api
	../pwrpc32/code/compile-register-moves-pwrpc32-g.pkg
	../pwrpc32/code/machcode-universals-pwrpc32-g.pkg
	../pwrpc32/code/instruction-frequency-properties-pwrpc32-g.pkg
	../pwrpc32/emit/translate-machcode-to-asmcode-pwrpc32-g.codemade.pkg
	../pwrpc32/emit/translate-machcode-to-execode-pwrpc32-g.codemade.pkg
	../pwrpc32/jmp/delay-slots-pwrpc32-g.pkg
	../pwrpc32/jmp/jump-size-ranges-pwrpc32-g.pkg
	../pwrpc32/mcg/gas-pseudo-ops-pwrpc32-g.pkg
	../pwrpc32/treecode/pwrpc32-pseudo-instruction.api
	../pwrpc32/treecode/translate-treecode-to-machcode-pwrpc32-g.pkg 
	../pwrpc32/regor/instructions-rewrite-pwrpc32-g.pkg
	/* ../pwrpc32/regor/pwrpc32-reg-allot.pkg */

pwrpc32-gc.lib:

	lowhalf.lib
	gc.lib
	pwrpc32.lib
	
	/* PowerPC specific backend */

pwrpc32-sched.lib:
/*
 * This library contains the superscalar scheduling stuff.
 */
	control.lib
	lib.lib
	lowhalf.lib
	pwrpc32.lib
	sched.lib
	region.lib
	
	/* PowerPC scheduler */ 
	../pwrpc32/scheduling/pwrpc32SchedProps.sml

register-spilling.lib:

	lowhalf.lib
	control.lib
	lib.lib

	/*../regor/ra-spill-gcm.sig
	../regor/ra-spill-gcm.sml
	../regor/lcm.sig
	../regor/lcm.sml
	../regor/frame-info.sig
	../regor/cluster-frame-info.sml*/
	/* ../regor/interproc-mem-ra.sml */

	../regor/register-spilling-per-improved-chaitin-heuristic-g.pkg
	../regor/register-spilling-per-improved-chow-hennessy-heuristic-g.pkg

	../regor/register-spilling-with-renaming.pkg

region.lib:
/*
 * This library contains the basic interface to the regions stuff 
 */

	lowhalf.lib
	control.lib
	lib.lib

	../code/region-info.pkg
	../code/region-props.api

	../aliasing/pointsToInfo.sig
	../aliasing/pointsToInfo.sml
rtl.lib:
/*
 *  This library contains modules that implements the RTL and related stuff
 */

	control.lib
	lib.lib
	lowhalf.lib
	treecode.lib
	
	/* RTL */
	../treecode/treecode-rtl.api
	../treecode/treecode-rtl-g.pkg
	../treecode/rtl-props.api
	../treecode/rtl-build.api
	../treecode/rtl-build-g.pkg

	/* Operand tables */
	../treecode/operand-table.api
	../treecode/operand-table-g.pkg

sched.lib:
/*
 * This library contains the superscalar scheduling stuff.
 */
	control.lib
	lib.lib
	graphs.lib
	visual.lib
	ir-archive.lib
	lowhalf.lib
	rtl.lib
	ir.lib

	/* Rank algorithms */
	../scheduling/palem-simons.api
	../scheduling/palem-simons.pkg
	../scheduling/LeungPalemPnueli.sig
	../scheduling/leung-palem-pnueli.pkg

	/* Data dependence dag representation */
	../scheduling/scheduler-ddg.api
	../scheduling/scheduler-ddg.pkg

	/* Api of a rank function */
	../scheduling/scheduling-ranks.api

	/* Architectural Properties */
	../scheduling/scheduling-props.api

	/* Basic block scheduling */
	../scheduling/local-cp.pkg
	../scheduling/build-local-ddg.api
	../scheduling/build-local-ddg.pkg
	../scheduling/bb-scheduler.api
	../scheduling/bb-scheduler.pkg
	../scheduling/bb-ddg-viewer.api
	../scheduling/bb-ddg-viewer.pkg
	../scheduling/cluster-bb-scheduler.pkg

	/* Superscalar scheduling.  These are required if you want to
	 * play with instruction scheduling for superscalars.
	 * It requires the lowhalf IR stuff. !!!
	 */
	../scheduling/list-scheduler.api
	../scheduling/list-scheduler.pkg
	../scheduling/build-ddg.api
	../scheduling/build-ddg.pkg
	../scheduling/scheduling-aliasing.api
	../scheduling/region-builder.api
	../scheduling/region-builder.pkg

	/* Various global scheduling algorithms */
	../scheduling/global-cp.pkg
	../scheduling/global-ddg-viewer.api
	../scheduling/global-ddg-viewer.pkg
	../scheduling/global-scheduling-algorithm.api
	../scheduling/dag-scheduling.pkg
	../scheduling/global-scheduler.pkg
sparc32.lib:
/* 
 * SPARC32 specific modules for lowhalf code generation framework.
 */
	lowhalf.lib
	control.lib
	lib.lib

	# Sparc32 specific backend:
	#
	../sparc32/code/registerkinds-sparc32.codemade.pkg
	../sparc32/code/machcode-sparc32.codemade.api
	../sparc32/code/machcode-sparc32-g.codemade.pkg
	../sparc32/code/treecode-extension-sext-sparc32.pkg
	../sparc32/code/sparc32-instructionset-extension-compiler.pkg
	../sparc32/code/compile-register-moves-sparc32.api
	../sparc32/code/compile-register-moves-sparc32-g.pkg
	../sparc32/code/machcode-universals-sparc32-g.pkg
	../sparc32/code/instruction-frequency-properties-sparc32-g.pkg
	../sparc32/emit/sparc32-asm.pkg
	../sparc32/emit/translate-machcode-to-execode-sparc32-g.codemade.pkg
	../sparc32/jmp/jump-size-ranges-sparc32-g.pkg
	../sparc32/mcg/gas-pseudo-ops-sparc32-g.pkg
	../sparc32/treecode/pseudo-instructions-sparc32.api
	../sparc32/treecode/translate-treecode-to-machcode-sparc32-g.pkg 
	../sparc32/regor/instructions-rewrite-sparc32-g.pkg
	/* ../sparc32/regor/sparc32-regor-g.pkg */
	../sparc32/jmp/delay-slots-sparc32-g.pkg
	../sparc32/ccalls/ccalls-sparc32-g.pkg


sparc32-gc.lib:

	lowhalf.lib
	gc.lib
	sparc32.lib
	
	/* Sparc32 specific backend */
sparc32-peephole.lib:

	lowhalf.lib
	peephole.lib
	sparc32.lib

	/* sparc32 */
	../sparc32/code/sparc32-peephole.pkg

sparc32-rtl.lib:

	control.lib
	lowhalf.lib
	rtl.lib
	region.lib
	sparc32.lib
	
	/* sparc32 specific backend */
	../sparc32/treecode/sparc32RTL.sml 
	../sparc32/treecode/sparc32RTLProps.sml 

sparc32-sched.lib:
/*
 * This library contains the superscalar scheduling stuff.
 */

	control.lib
	lib.lib
	lowhalf.lib
	sparc32.lib
	sched.lib
	region.lib
	
	/* Sparc32 scheduler */ 
	../sparc32/scheduling/sparc32SchedProps.sml
sparc32-ssa.lib:

	control.lib
	lowhalf.lib
	rtl.lib
	ssa.lib
	region.lib
	sparc32.lib
	sparc32-rtl.lib
	
	/* sparc32 specific backend */
	../sparc32/static-single-assignment/sparc32SSAProps.sml

ssa.lib:
/*
 *  This library implements the SSA improvers.
 */
	control.lib
	lib.lib
	graphs.lib
	visual.lib
	ir-archive.lib
	lowhalf.lib
	ir.lib
	gc.lib
	treecode.lib
	rtl.lib
	region.lib
	
	/* The SSA representation */
	../static-single-assignment/SSA-flowgraph.sig
	../static-single-assignment/lowhalf-ssa.sig
	../static-single-assignment/lowhalf-ssa.sml
	../static-single-assignment/SSA-optimization.sig

	/* Machine specific properties */
	../static-single-assignment/SSA-props.sig

        /* machcode_controlflow_graph <-> SSA */
	../static-single-assignment/lowhalf-ssa-construction.sig
	../static-single-assignment/lowhalf-ssa-construction.sml
	../static-single-assignment/lowhalf-ssa-deconstruction.sig
	../static-single-assignment/lowhalf-ssa-deconstruction.sml

	../static-single-assignment/SSA-const-folding.sig
	../static-single-assignment/SSA-const-folding.sml

	../static-single-assignment/SSA-gvn-basis.sig
	../static-single-assignment/SSA-gvn-basis.sml

        /* Instruction selection */
	../static-single-assignment/SSA-instrgen.sig
	../static-single-assignment/SSA-instrgen.sml

	/* Optimization phases */
	../static-single-assignment/SSA-dead-code-elim.sml
	../static-single-assignment/SSA-cond-const-folding.sml
	../static-single-assignment/SSA-global-code-motion.sml
	../static-single-assignment/SSA-global-value-numbering.sml
	../static-single-assignment/SSA-operator-strength-reduction.sml

	../static-single-assignment/SSA-gc-invariants.sml


visual.lib:

/*
 * This library implements visualization of graphs
 */
	control.lib
	lib.lib
	graphs.lib

	../display/all-displays.pkg
	../display/da-vinci.pkg
	../display/dot.pkg
	../display/graph-display.api
	../display/graph-layout.pkg
	../display/graph-viewer.api
	../display/graph-viewer-g.pkg
	../display/vcg.pkg

vliw.lib:
/*
 * This library contains the VLIW based optimizations.
 */

	control.lib
	lib.lib
	graphs.lib
	visual.lib
	ir-archive.lib
	lowhalf.lib
	ir.lib
	
	../emit/emitter-new.api /* dummy */
	
	/* ../VLIW/EPIC foundational stuff.
	 */
	../code/funits.sig
	../code/datapaths.sig
	../code/pred-instructions.sig
	../code/vliw-instructions.sig
	../code/pred-vliw-instructions.sig
	../code/predicationProps.sig
	../code/vliwProps.sig
	
	/* Hyperblock and predicate analysis. 
	 * These are necessary if you want to play with optimizations
	 * for predicated for VLIW architectures.
	 */
	../hyperblock/decision-trees.sig
	../hyperblock/decision-trees.sml
	../hyperblock/hyperblock.sig
	../hyperblock/hyperblock.sml
	../hyperblock/hyperblock-ddg.sig
	../hyperblock/hyperblock-ddg.sml
	../hyperblock/if-conversion.sig
	../hyperblock/if-conversion.sml
	../hyperblock/predicated-ddg.sig
	../hyperblock/predicated-ddg.sml
	
	/* Hyperblock Scheduling for VLIW 
	 * It requires the hyperblock, lowhalf IR and VLIW modules. !!!
	 */
	../hyperblock-scheduling/critical-path.sml
	../hyperblock-scheduling/hyperblock-scheduling.sig
	../hyperblock-scheduling/hyperblock-scheduling.sml
	../hyperblock-scheduling/rank-algorithm.sig
	../hyperblock-scheduling/vliwSchedulingProps.sig
	../hyperblock-scheduling/vliwSchedulingAutomaton.sig
	
	/* Modulo Scheduling for VLIW
	 * It requires the hyperblock, lowhalf IR and VLIW modules. !!!
	 */
	../modulo-scheduling/iterated-modulo-scheduling.sml
	../modulo-scheduling/modulo-scheduling-algo.sig
	../modulo-scheduling/modulo-scheduling.sig
	../modulo-scheduling/modulo-scheduling.sml
	../modulo-scheduling/mrt.sig
	../modulo-scheduling/mrt.sml
	../modulo-scheduling/pre-modulo-scheduling.sig
	../modulo-scheduling/pre-modulo-scheduling.sml
	
	/* C6 specific backend !!! */
	../C6/code/C6Cells.sig
	../C6/code/C6Cells.sml
	../C6/code/C6Datapaths.sig
	../C6/code/C6Datapaths.sml
	/*C6/code/C6DatapathsProps.sml*/
	../C6/code/C6Funits.sig
	../C6/code/C6Funits.sml
	../C6/code/C6Instr.sig
	../C6/code/C6Instr.sml
	../C6/code/C6InstrIlk.sig
	../C6/code/C6InstrIlk.sml
	../C6/code/C6Intrinsics.sig
	../C6/code/C6Intrinsics.sml
	../C6/code/C6PredicationProps.sml
	../C6/code/C6Props.sml
	../C6/code/C6PseudoOps.sig
	../C6/code/C6PseudoOps.sml
	../C6/code/C6Shuffle.sig
	../C6/code/C6Shuffle.sml
	../C6/code/C6VLIWProps.sml
	../C6/emit/C6Asm.sml
	/*C6/scheduling/C6RTDEFS.sml
	C6/scheduling/C6RTDEFS2.sml
	C6/scheduling/C6RTTables.sml
	C6/scheduling/C6RTTables2.sml*/
	../C6/scheduling/C6SchedulingProps.sml
	/* ../C6/static-single-assignment/C6SSAProps.sml */

/* lowhalf.lib
 *
 * COPYRIGHT (c) 1999 Bell Labs, Lucent Technologies.
 * Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
 * released per terms of SMLNJ-COPYRIGHT.
 * This library contains only the core lowhalf stuff.  There are
 * architecture-specific files for the various supported machines.
 */
