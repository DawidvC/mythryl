## machcode-controlflow-graph-view.pkg -- graphical viewing utilities for mcg 



generic package  machcode_controlflow_graph_view (
    #
   package asm_emitter:  Machcode_Codebuffer 
   package machcode_controlflow_graph:  Machcode_Controlflow_Graph
		   where I = asm_emitter::I
		     and P = asm_emitter::codestream::P
) : Machcode_Controlflow_Graph_Viewer
{
   package l   = graph_layout
   package machcode_controlflow_graph = machcode_controlflow_graph
   package g = graph
   package w = Freq
   package s = asm_emitter::S
   
   fun nl () = file::write(*asm_stream::asmOutStream, "\n")

   fun kindName machcode_controlflow_graph::START          = "START"
     | kindName machcode_controlflow_graph::STOP           = "STOP"
     | kindName machcode_controlflow_graph::NORMAL         = "Block"


   fun emitHeader (s::STREAM { comment, annotation, ... } ) 
                   (machcode_controlflow_graph::BLOCK { id, kind, freq, annotations, ... } ) = 
       (comment (kindName kind + "[" + int::to_string id +
                    "] (" + w::to_string (*freq) + ")");
        nl();
        apply annotation (*annotations)
       ) 

   fun emitFooter (s::STREAM { comment, ... } ) (machcode_controlflow_graph::BLOCK { annotations, ... } )
       = 
       case (machcode_controlflow_graph::LIVEOUT.get (*annotations))

            THE s
		=> 
		let regs = string::tokens char::is_space (registerkinds_junk::Registerset::to_string s)
		    K = 7
		    fun f (_,[], s, l)    = s . l
		      | f (0, vs, s, l)    = f (K, vs, "   ", s . l)
		      | f (n,[v], s, l)   = v + s . l
		      | f (n, v . vs, s, l) = f (n - 1, vs, s + " " + v, l)
		    text = reverse (f(K, regs, "",[]))
		in  apply (\\ c => (comment c; nl())) text
		end;

            NULL => ();
        esac
        except
            OVERFLOW = print("Bad footer\n");

  fun emitStuff outline annotations (block as machcode_controlflow_graph::BLOCK { instructions, labels, ... } )
      =
       let my S as s::STREAM { pseudoOp, put_private_label, emit, ... } = 
               asm_emitter::make_stream annotations
       in  emitHeader S block;
           apply put_private_label (*labels); 
           if outline then () else apply emit (reverse (*instructions));
           emitFooter S block
       end

    emit = emitStuff FALSE 
    emitOutline = emitStuff TRUE []

   fun get_string f x = 
   let buffer = StringOutStream::mkStreamBuf()
       S      = StringOutStream::openStringOut buffer
       asm_stream::with_stream S f x 
   in  StringOutStream::get_string buffer end

   fun show_block an block = 
   let text = get_string (emit an) block
   in  fold_backward (\\ (x, "") => x | (x, y) => x + " " + y) ""
            (string::tokens (\\ ' ' => TRUE | _ => FALSE) text)
   end
   
   fun headerText block = get_string 
        (\\ b => emitHeader (asm_emitter::make_stream []) b) block
   fun footerText block = get_string 
        (\\ b => emitFooter (asm_emitter::make_stream []) b) block

   fun getStyle a = (case l::STYLE.get (*a) of THE l => l | NULL => [])

   green = l::COLOR "green"
   red   = l::COLOR "red"
   yellow = l::COLOR "yellow"

   show_edge = machcode_controlflow_graph::show_edge

   fun edgeStyle (i, j, e as machcode_controlflow_graph::EDGE { k, a, ... } ) = 
   let a = l::LABEL (show_edge e) . getStyle a
   in  case k of 
         (machcode_controlflow_graph::ENTRY | machcode_controlflow_graph::EXIT) => green . a
       | (machcode_controlflow_graph::FALLSTHRU | machcode_controlflow_graph::BRANCH FALSE) => yellow . a
       | _ => red . a
   end 

   view_outline = LowhalfControl::getFlag "view_outline"
 
   fun annotations (g::GRAPH { graph_info=machcode_controlflow_graph::INFO { annotations=a, ... }, ... } ) = a

   fun viewStyle mcg =
   let an     = *(annotations mcg)
       fun node (n, b as machcode_controlflow_graph::BLOCK { annotations, ... } ) = 
           if *view_outline then
              l::LABEL (get_string emitOutline b) . getStyle annotations
           else
              l::LABEL (show_block an b) . getStyle annotations
   in  { graph = \\ _ => [],
         edge  = edgeStyle,
         node  = node
       } 
   end

   fun viewLayout mcg = l::makeLayout (viewStyle mcg) mcg

   fun subgraphLayout { mcg, subgraph = g::GRAPH subgraph }
   =
   let an     = *(annotations mcg)
       fun node (n, b as machcode_controlflow_graph::BLOCK { annotations, ... } ) = 
          if subgraph.has_node n then
             l::LABEL (show_block an b) . getStyle annotations
          else
             l::COLOR "lightableue" . l::LABEL (headerText b) . getStyle annotations
       fun edge (i, j, e) = 
            if subgraph.has_edge (i, j) then edgeStyle (i, j, e)
            else [l::EDGEPATTERN "dotted"]
   in  l::makeLayout { graph = \\ _ => [],
                     edge  = edge,
                     node  = node } mcg
   end
}





## Copyright (c) 2001 Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
