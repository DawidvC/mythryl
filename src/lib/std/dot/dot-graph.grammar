## dot-graph.grammar
## COPYRIGHT (c) 1994 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.

# Parser specification for the "dot" style syntax
# defined by GraphViz.  For docs on it see:
#     http://www.graphviz.org/Documentation.php
# (The version specified here may well be a decade
# or so behind the above specifications.)

exception ERROR;

Vertex
  = NODE (String, Null_Or( String )) 
  | SUBGRAPH (g::Traitful_Graph -> g::Traitful_Graph)
  ;

# The five things we can set on Traitful_Graphs:
#
fun set_graph_trait        graph =  g::set_trait(g::GRAPH_PART     graph);
fun set_node_trait         node  =  g::set_trait(g::NODE_PART      node );
fun set_edge_trait         edge  =  g::set_trait(g::EDGE_PART      edge );
fun set_default_node_trait graph =  g::set_trait(g::PROTONODE_PART graph);
fun set_default_edge_trait graph =  g::set_trait(g::PROTOEDGE_PART graph);

fun find_subgraph (g, name)
    =
    case (g::find_subgraph (g, name))
	#
        THE sg => sg;
        NULL   => raise exception ERROR;
    esac;

stipulate
    count = REF 0;
herein
    fun anonymous ()
	=
	("_anonymous_" + (int::to_string *count))
        then
	    count := *count + 1;
end;

stipulate

    fun make_port_fn (NULL,     NULL) =>   \\ _ =  ();
        make_port_fn (THE tp,   NULL) =>   \\ e =   set_edge_trait e ("tailport",tp);
        make_port_fn (NULL,   THE hp) =>   \\ e =   set_edge_trait e ("headport",hp);
        make_port_fn (THE tp, THE hp) => { \\ e = { set_edge_trait e ("headport",hp);
                                                    set_edge_trait e ("tailport",tp);
                                                  };
                                         };
    end;

herein

    fun make_edges (vs, traits) graph
	=
        {
	    fun do_edge portfn (tail,head)
		=
		{   edge = g::make_edge { graph, head, tail, info=>NULL };
		    #
		    portfn edge;
		    #
		    apply (set_edge_trait edge) traits;
		};

	    fun mk_e (tail ! (rest as head ! l))
		    =>
		    case (tail, head)
			#
		        (NODE(t,tport), NODE(h,hport))
			    =>
			    {   do_edge (make_port_fn(tport,hport)) (g::get_or_make_node(graph,t,NULL), g::get_or_make_node(graph,h,NULL));
			        mk_e rest;
			    };

		        (NODE(name,port), SUBGRAPH mkg)
			    =>
			    {   edgefn = do_edge (make_port_fn(port,NULL));
			        t      = g::get_or_make_node(graph,name,NULL);
			        subg   = mkg graph;					# "subg" might be "subgraph"

			        g::nodes_apply (\\ n = edgefn(t,n)) subg;

		                mk_e((SUBGRAPH(\\ _ = subg)) ! l);
			    };

		        (SUBGRAPH mkg, NODE(name,port))
			    =>
			    {   edgefn =  do_edge (make_port_fn(NULL, port));
			        h      =  g::get_or_make_node(graph,name,NULL);

			        g::nodes_apply (\\ n = edgefn(n,h)) (mkg graph);

			        mk_e rest;
			    };

		        (SUBGRAPH mkg, SUBGRAPH mkg')
			    =>
			    {   edgefn = do_edge (make_port_fn(NULL, NULL));

			        tailg  = mkg  graph;
			        headg  = mkg' graph;

			        g::nodes_apply (\\ h = g::nodes_apply (\\ t = edgefn(t,h)) tailg) headg;

				mk_e((SUBGRAPH(\\ _ = headg)) ! l);
			    };
		    esac;

		mk_e _ => ();
	    end;


	    mk_e vs;

	    graph;
	};
end;

%%
%header (generic package dotgraph_lr_vals_g(
	   #
           package token:  Token;
           package g : Traitful_Graphtree;
	   #
           make_default_graph_info:  Void -> g::Graph_Info;
           make_default_node_info :  Void -> g::Node_Info;
           make_default_edge_info :  Void -> g::Edge_Info;
         )
        )
%pos Int
%name Graph
%verbose
# %pure
%noshift EOF
%eop EOF
%term
    GRAPH | DIGRAPH | SUBGRAPH | STRICT
  | NODE | EDGE | EDGEOP | SYMBOL of String
  | COLON | SEMICOLON | COMMA | LBRACE | LBRACKET | LPAREN 
  | RBRACE | RBRACKET | RPAREN | EQUAL | DOT | AT | EOF
%nonterm
    file of Null_Or( g::Traitful_Graph )
  | graph_type of String
  | attr_ilk of (List ((String, String)) -> g::Traitful_Graph -> g::Traitful_Graph)
  | inside_attr_list of List( (String, String))
  | optcomma
  | attr_list of List( (String, String))
  | rec_attr_list of List( (String, String))
  | opt_attr_list of List( (String, String))
  | attr_set of (String, String)
  | stmt_list of  (g::Traitful_Graph -> g::Traitful_Graph)
  | stmt_list1 of (g::Traitful_Graph -> g::Traitful_Graph)
  | stmt of       (g::Traitful_Graph -> g::Traitful_Graph)
  | stmt1 of      (g::Traitful_Graph -> g::Traitful_Graph)
  | attr_stmt of  (g::Traitful_Graph -> g::Traitful_Graph)
  | node_id of (String, Null_Or( String ))
  | node_name of String
  | node_port of Null_Or( String )
  | port_location of String
  | port_angle of String
  | node_stmt of  (g::Traitful_Graph -> g::Traitful_Graph)
  | edge_stmt of  (g::Traitful_Graph -> g::Traitful_Graph)
  | edge_rhs of List( Vertex )
  | subg_stmt of  (g::Traitful_Graph -> g::Traitful_Graph)
  | subg_hdr of String
%left SUBGRAPH  # to avoid subgraph hdr shift/reduce conflict
%left LBRACE

%%

file            :    graph_type SYMBOL LBRACE stmt_list RBRACE 
                      ( { g = g::make_graph{ name=>symbol, make_default_graph_info, make_default_edge_info, make_default_node_info, info=>NULL};

                         g::set_trait (g::GRAPH_PART g) ("graph_type",graph_type);
                         THE (stmt_list g) ;
                       })
                |    /* empty */ (NULL)

graph_type      :    GRAPH          ("g")
                |    STRICT GRAPH   ("sg")
                |    DIGRAPH        ("dg")
                |    STRICT DIGRAPH ("sdg")

attr_ilk        :    GRAPH (\\ traits = \\ g = { apply (set_graph_trait        g) traits;  g; })
                |    NODE  (\\ traits = \\ g = { apply (set_default_node_trait g) traits;  g; })
                |    EDGE  (\\ traits = \\ g = { apply (set_default_edge_trait g) traits;  g; })

inside_attr_list:    attr_set optcomma inside_attr_list 
		     (attr_set ! inside_attr_list)
                |    /* empty */ ([])

optcomma        :    /* empty */ ()
                |    COMMA ()

attr_list       :    LBRACKET inside_attr_list RBRACKET (inside_attr_list)

rec_attr_list   :    rec_attr_list attr_list (rec_attr_list @ attr_list)
                |    /* empty */ ([])

opt_attr_list   :    rec_attr_list (rec_attr_list)

attr_set        :    SYMBOL EQUAL SYMBOL  ((symbol1, symbol2))

stmt_list       :    stmt_list1 (stmt_list1)
                |    /* empty */ (\\ g = g)

stmt_list1      :    stmt (stmt)
                |    stmt_list1 stmt (stmt o stmt_list1)

stmt            :    stmt1 (stmt1)
                |    stmt1 SEMICOLON (stmt1)

stmt1           :    node_stmt (node_stmt)
                |    edge_stmt (edge_stmt)
                |    attr_stmt (attr_stmt)
                |    subg_stmt (\\ g = { subg_stmt g; g; })

attr_stmt       :    attr_ilk attr_list (attr_ilk attr_list)
                |    attr_set (\\ g = { set_graph_trait g (#1 attr_set,#2 attr_set); g; })

node_id         :    node_name node_port (node_name, node_port)

node_name       :    SYMBOL (symbol)

node_port       :    /* empty */ (NULL)
                |    port_location (THE port_location)
                |    port_angle                        /* undocumented */
                      (THE port_angle)
                |    port_angle port_location            /* undocumented */
                      (THE (port_angle + port_location))
                |    port_location port_angle            /* undocumented */
                      (THE (port_location + port_angle))

port_location   :    COLON SYMBOL (":" + symbol)
                |    COLON LPAREN SYMBOL COMMA SYMBOL RPAREN 
                      (cat [":(",symbol1,",",symbol2,")"])
port_angle      :    AT SYMBOL ("@" + symbol)

node_stmt       :    node_id opt_attr_list 
                      (\\ g = { apply (set_node_trait (g::get_or_make_node(g, #1 node_id,NULL))) opt_attr_list; g; })

edge_stmt       :    node_id   edge_rhs opt_attr_list      (make_edges((NODE node_id)       ! edge_rhs, opt_attr_list))
                |    subg_stmt edge_rhs opt_attr_list      (make_edges((SUBGRAPH subg_stmt) ! edge_rhs, opt_attr_list))

edge_rhs        :    EDGEOP node_id            ([NODE node_id])
	        |    EDGEOP node_id edge_rhs   ((NODE node_id) ! edge_rhs)
                |    EDGEOP subg_stmt          ([SUBGRAPH subg_stmt])
		|    EDGEOP subg_stmt edge_rhs ((SUBGRAPH subg_stmt) ! edge_rhs)

subg_stmt       :    subg_hdr LBRACE stmt_list RBRACE %prec LBRACE 
                      (\\ g = (stmt_list (g::make_subgraph(g, subg_hdr,NULL))))
                |    LBRACE stmt_list RBRACE
                      (\\ g = (stmt_list (g::make_subgraph(g,anonymous(),NULL))))
                |    subg_hdr %prec SUBGRAPH 
                      (\\ g = find_subgraph(g, subg_hdr))

subg_hdr        :    SUBGRAPH SYMBOL (symbol)

