## platform-properties.api

# Compiled by:
#     src/lib/std/src/standard-core.sublib



# Get information about the underlying hardware and os.

api Platform_Properties {

    exception UNKNOWN;
	#
	# This exception is raised when the runtime cannot provide the
	# requested information.


     package os: api {
			 Kind
			  = POSIX	#  one of the many flavours of UNIX (incl Mach and NeXTStep) 
			  | WIN32	#  Wind32 API (incl. Windows95 and WindowsNT) 
			  | MACOS	#  Macintosh OS (> 7.5) 
			  | OS2		#  IBM's OS/2 
			  | BEOS	#  BeOS from Be
			  ; 
		    };	

     get_os_kind:     Void -> os::Kind;
     get_os_name:     Void -> String;
     get_os_version:  Void -> String;

     get_host_architecture:    Void -> String;
	#
	# Returns the HOST_ARCH value from the run-time build.

     get_target_architecture:  Void -> String;
	#
	# Returns the TARGET_ARCH value from the run-time build; this is
	# usually the same as the host architecture, except in the case that
	# some form of emulation is being run, for example ML-to-C or an
	# interpreter.


     has_software_polling:  Void -> Bool;
	#
	# Returns TRUE, if the run-time system was compiled to
	# support software polling.


     has_multiprocessing:  Void -> Bool;
	#
	# returns TRUE, if the run-time system was compiled to support the
	# multiprocessing hooks.  This does not mean that the underlying
	# hardware is a multiprocessor.
};


## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
