## rw-vector-of-chars.pkg

# Compiled by:
#     src/lib/std/src/standard-core.sublib

stipulate
    package ig  =  int_guts;						# int_guts		is from   src/lib/std/src/int-guts.pkg
    package it  =  inline_t;						# inline_t		is from   src/lib/core/init/built-in.pkg
    package rt  =  runtime;						# runtime		is from   src/lib/core/init/built-in.pkg.
    package rwv =  it::rw_vector_of_chars;
#   package str =  string_guts;						# string_guts		is from   src/lib/std/src/string-guts.pkg
    package g2d =  exceptions_guts;					# exceptions_guts	is from   src/lib/std/src/exceptions-guts.pkg
herein

    package rw_vector_of_chars
    #       ==================
    #
    : (weak)  Typelocked_Rw_Vector					# Typelocked_Rw_Vector	is from   src/lib/std/src/typelocked-rw-vector.api
    {
	# Fast add/subtract avoiding
	# the overflow test:
	#
	infix my --- +++;
	#
	fun x --- y = it::tu::copyt_tagged_int (it::tu::copyf_tagged_int x - it::tu::copyf_tagged_int y);
	fun x +++ y = it::tu::copyt_tagged_int (it::tu::copyf_tagged_int x + it::tu::copyf_tagged_int y);


	# Unchecked access operations 
	#
	unsafe_set =  rwv::set;
	unsafe_get =  rwv::get;
	#
	ro_unsafe_set = it::vector_of_chars::set_char_as_byte;
	ro_unsafe_get = it::vector_of_chars::get_byte_as_char;
	#
	ro_length     = it::vector_of_chars::length;

	Element = Char;
	Vector = String;
	Rw_Vector = rwv::Rw_Vector;

	maximum_vector_length =  core::maximum_vector_length;

	fun make_rw_vector (0, c)
		=>
		rwv::make_zero_length_vector ();

	    make_rw_vector (len, c)
		=>
		vec
		where
		    if (it::default_int::ltu (maximum_vector_length, len))	raise exception g2d::SIZE;	fi;
		    #
		    vec =  rwv::make_nonempty_rw_vector_of_chars  len;

		    for (i = 0;  i < len;  ++i) {
		        #
			unsafe_set (vec, i, c);
		    };
		end;
	end;

	fun from_fn (0, _) =>   rwv::make_zero_length_vector ();
	    #
	    from_fn (len, f)
		=>
		vec
		where
		    if (it::default_int::ltu (maximum_vector_length, len))   raise exception g2d::SIZE;	fi;
		    #
		    vec =  rwv::make_nonempty_rw_vector_of_chars  len;

		    for (i = 0;  i < len;  ++i) {
			#
			unsafe_set (vec, i, f i);
		    };
		end;
	end;

	fun from_list []
		=>
		rwv::make_zero_length_vector ();

	    from_list l
		=>
		vec
		where 
		    fun length ([],    n) =>  n;
			length (_ ! r, n) =>  length (r, n+1);
		    end;

		    len = length (l, 0);

		    if (len > maximum_vector_length)   raise exception g2d::SIZE;   fi;

		    vec =  rwv::make_nonempty_rw_vector_of_chars  len;


		    init (l, 0)
		    where
			fun init ([],    _) =>  ();
			    init (c ! r, i) =>  { unsafe_set (vec, i, c);   init (r, i+1); };
			end;
		    end;
		end;
	end;

	# Note:  The (_[])   enables   'vec[index]'           notation;
	#        The (_[]:=) enables   'vec[index] := value'  notation;

	length    =   it::rw_vector_of_chars::length :   Rw_Vector -> Int;

	get       =   it::rw_vector_of_chars::get_with_boundscheck :   (Rw_Vector, Int) -> Element;
	(_[])     =   it::rw_vector_of_chars::get_with_boundscheck :   (Rw_Vector, Int) -> Element;

	set       =   it::rw_vector_of_chars::set_with_boundscheck :   (Rw_Vector, Int, Element) -> Void;
	(_[]:=)   =   it::rw_vector_of_chars::set_with_boundscheck :   (Rw_Vector, Int, Element) -> Void;

	fun to_vector a
	    =
	    case (length a)
		#          
		0   => "";

		len =>
		    {   s =   rt::asm::make_string  len;
			#
			fun fill i
			    =
			    if (i < len)
				#
				ro_unsafe_set (s, i, unsafe_get (a, i));
				fill (i +++ 1);
			    fi;

			fill 0;

			s;
		    };
	    esac;

	fun copy { from, into, at }
	    =
	    {	if (at < 0   or   de > length into)   raise exception INDEX_OUT_OF_BOUNDS;   fi;
		#
		copy_dn (sl --- 1, de --- 1);
	    }
	    where
	        sl = length  from;
		de = at + sl;

		fun copy_dn (s, d)
		    =
		    if (s >= 0)
			#
			unsafe_set (into, d, unsafe_get (from, s));
			copy_dn (s --- 1, d --- 1);
		    fi;
	    end;

	fun copy_vector { from, into, at }
	    =
	    {	if (at < 0 or de > length into)   raise exception INDEX_OUT_OF_BOUNDS;	fi;
		#
		copy_dn (sl --- 1, de --- 1);
	    }
	    where
	        sl =  ro_length  from;
		de =  at + sl;

		fun copy_dn (s, d)
		    =
		    if (s >= 0)
			#
			unsafe_set (into, d, ro_unsafe_get (from, s));
			#
			copy_dn (s --- 1, d --- 1);
		    fi;
	    end;


	fun keyed_apply f v
	    =
	    apply 0
	    where
		len = length v;

		fun apply i
		    =
		    if (i < len)
			#
			f (i, unsafe_get (v, i));
			apply (i +++ 1);
		    fi;
	    end;

	fun apply f v
	    =
	    apply 0
	    where
		len = length v;

		fun apply i
		    =
		    if (i < len)
			#
			f (unsafe_get (v, i));
			apply (i +++ 1);
		    fi;
	    end;

	fun keyed_map_in_place f v
	    =
	    mdf 0
	    where
		len = length v;

		fun mdf i
		    =
		    if (i < len)
			#
			unsafe_set (v, i, f (i, unsafe_get (v, i)));
			mdf (i +++ 1);
		    fi;
	    end;

	fun map_in_place f v
	    =
	    mdf 0
	    where
		len = length v;

		fun mdf i
		    =
		    if (i < len)
			#
			unsafe_set (v, i, f (unsafe_get (v, i)));
			mdf (i +++ 1);
		    fi;
	    end;

	fun keyed_fold_forward f init v
	    =
	    fold (0, init)
	    where
		len = length v;

		fun fold (i, a)
		    =
		    if (i >= len)   a;
		    else            fold (i +++ 1, f (i, unsafe_get (v, i), a));
		    fi;
	    end;

	fun fold_forward f init v
	    =
	    fold (0, init)
	    where
		len = length v;

		fun fold (i, a)
		    =
		    if (i >= len)   a;
		    else            fold (i +++ 1, f (unsafe_get (v, i), a));
		    fi;
	    end;

	fun keyed_fold_backward f init v
	    =
	    fold (length v --- 1, init)
	    where
		fun fold (i, a)
		    =
		    if (i < 0)   a;
		    else         fold (i --- 1, f (i, unsafe_get (v, i), a));
		    fi;
	    end;

	fun fold_backward f init v
	    =
	    fold (length v --- 1, init)
	    where
		fun fold (i, a)
		    =
		    if (i < 0)   a;
		    else         fold (i --- 1, f (unsafe_get (v, i), a));
		    fi;
	    end;

	fun keyed_find p v
	    =
	    fnd 0
	    where
		len = length v;

		fun fnd i
		    =
		    if (i >= len)
			#
			NULL;
		    else
			x = unsafe_get (v, i);
			#
			if (p (i, x))   THE (i, x);
			else            fnd (i +++ 1);
			fi;
		    fi;
	    end;

	fun find p v
	    =
	    fnd 0
	    where
		len = length v;

		fun fnd i
		    =
		    if (i >= len)
			#
			NULL;
		    else
			x = unsafe_get (v, i);
			#
			if (p x)   THE x;
			else       fnd (i +++ 1);
			fi;
		    fi;
	    end;

	fun exists p v
	    =
	    ex 0
	    where
		len = length v;

		fun ex i
		    =
		    i < len
		    and
		    (   p (unsafe_get (v, i))
			or
			ex (i +++ 1)
		    );
	    end;

	fun all p v
	    =
	    al 0
	    where
		len = length v;

		fun al i
		    =
		    i >= len
		    or
		    (   p (unsafe_get (v, i))
			and
			al (i +++ 1)
		    );
	    end;

	fun compare_sequences c (a1, a2)
	    =
	    coll 0
	    where
		l1 = length a1;
		l2 = length a2;

		l12 = it::ti::min (l1, l2);

		fun coll i
		    =
		    if (i >= l12)
			#
			ig::compare (l1, l2);
		    else
			case (c (unsafe_get (a1, i), unsafe_get (a2, i)))
			    #
			    EQUAL   =>  coll (i +++ 1);
			    unequal =>  unequal;
			esac;
		    fi;
	    end;
    };							# package rw_vector_of_chars
end;



##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1994 AT&T Bell Labs.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
