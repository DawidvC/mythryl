## client-to-selection.pkg
#
# Requests from app/widget code to the atom-ximp.

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib



stipulate
    include package   threadkit;								# threadkit		is from   src/lib/src/lib/thread-kit/src/core-thread-kit/threadkit.pkg
    #
    package xt  =  xtypes;									# xtypes		is from   src/lib/x-kit/xclient/src/wire/xtypes.pkg
    package ts  =  xserver_timestamp;								# xserver_timestamp	is from   src/lib/x-kit/xclient/src/wire/xserver-timestamp.pkg
herein


    # This port is implemented in:
    #
    #     src/lib/x-kit/xclient/src/window/selection-ximp.pkg
    #
    package client_to_selection {
	#

	# The request for a selection
	# that gets sent to the owner:
	#
	Selection_Plea =      { target:      xt::Atom,
				timestamp:   Null_Or( ts::Xserver_Timestamp ),
				reply:       Null_Or( xt::Property_Value ) -> Void
			      };

	Selection_Handle =    { selection:   xt::Atom,						# Client record representing a selection held:
				timestamp:   ts::Xserver_Timestamp,
				release':    Mailop( Void ),					# This mailop will fire when the selection is lost (SelectionClear x-event).
				release:     Void -> Void
			      };

	Client_To_Selection   =    { acquire_selection
				    :
				    (xt::Window_Id, xt::Atom, ts::Xserver_Timestamp, Selection_Plea -> Void)
				    ->
				    Null_Or( Selection_Handle ),

				request_selection
				    :
				    { window:     xt::Window_Id,		# Requesting window.
				      selection:  xt::Atom,			# Requested selection.
				      target:     xt::Atom,			# Requested target type.
				      property:   xt::Atom,
				      timestamp:  ts::Xserver_Timestamp		# Server-timestamp of the gesture causing the request.
				    }
				    ->
				    Mailop( Null_Or( xt::Property_Value ) )

				    # Request the value of the selection.
				    #
				    # This returns a mailop that will become
				    # enabled when the reply is received.
			      };
    };												# package client_to_selection
end;




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
