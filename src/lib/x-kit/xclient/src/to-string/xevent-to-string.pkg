## xevent-to-string.pkg

# Compiled by:
#     src/lib/x-kit/xclient/xclient-internals.sublib


stipulate
    package xet = xevent_types;		# xevent_types		is from   src/lib/x-kit/xclient/src/wire/xevent-types.pkg
herein

    api Xevent_To_String {
	xevent_name:      xet::x::Event -> String;
    };


    package   xevent_to_string
    : (weak)  Xevent_To_String
    {
	fun xevent_name (xet::x::KEY_PRESS               _) =>  "KeyPress";
	    xevent_name (xet::x::KEY_RELEASE             _) =>  "KeyRelease";
	    xevent_name (xet::x::BUTTON_PRESS            _) =>  "ButtonPress";
	    xevent_name (xet::x::BUTTON_RELEASE          _) =>  "ButtonRelease";
	    xevent_name (xet::x::MOTION_NOTIFY           _) =>  "MotionNotify";
	    xevent_name (xet::x::ENTER_NOTIFY            _) =>  "EnterNotify";
	    xevent_name (xet::x::LEAVE_NOTIFY            _) =>  "LeaveNotify";
	    xevent_name (xet::x::FOCUS_IN                _) =>  "FocusIn";
	    xevent_name (xet::x::FOCUS_OUT               _) =>  "FocusOut";
	    xevent_name (xet::x::KEYMAP_NOTIFY           _) =>  "KeymapNotify";
	    xevent_name (xet::x::EXPOSE                  _) =>  "Expose";
	    xevent_name (xet::x::GRAPHICS_EXPOSE         _) =>  "GraphicsExpose";
	    xevent_name (xet::x::NO_EXPOSE               _) =>  "NoExpose";
	    xevent_name (xet::x::VISIBILITY_NOTIFY       _) =>  "VisibilityNotify";
	    xevent_name (xet::x::CREATE_NOTIFY           _) =>  "CreateNotify";
	    xevent_name (xet::x::DESTROY_NOTIFY          _) =>  "DestroyNotify";
	    xevent_name (xet::x::UNMAP_NOTIFY            _) =>  "UnmapNotify";
	    xevent_name (xet::x::MAP_NOTIFY              _) =>  "MapNotify";
	    xevent_name (xet::x::MAP_REQUEST             _) =>  "MapRequest";
	    xevent_name (xet::x::REPARENT_NOTIFY         _) =>  "ReparentNotify";
	    xevent_name (xet::x::CONFIGURE_NOTIFY        _) =>  "ConfigureNotify";
	    xevent_name (xet::x::CONFIGURE_REQUEST       _) =>  "ConfigureRequest";
	    xevent_name (xet::x::GRAVITY_NOTIFY          _) =>  "GravityNotify";
	    xevent_name (xet::x::RESIZE_REQUEST          _) =>  "ResizeRequest";
	    xevent_name (xet::x::CIRCULATE_NOTIFY        _) =>  "CirculateNotify";
	    xevent_name (xet::x::CIRCULATE_REQUEST       _) =>  "CirculateRequest";
	    xevent_name (xet::x::PROPERTY_NOTIFY         _) =>  "PropertyNotify";
	    xevent_name (xet::x::SELECTION_CLEAR         _) =>  "SelectionClear";
	    xevent_name (xet::x::SELECTION_REQUEST       _) =>  "SelectionRequest";
	    xevent_name (xet::x::SELECTION_NOTIFY        _) =>  "SelectionNotify";
	    xevent_name (xet::x::COLORMAP_NOTIFY         _) =>  "ColormapNotify";
	    xevent_name (xet::x::CLIENT_MESSAGE          _) =>  "ClientMessage";
	    xevent_name (xet::x::MODIFIER_MAPPING_NOTIFY  ) =>  "ModifierMappingNotify";
	    xevent_name (xet::x::KEYBOARD_MAPPING_NOTIFY _) =>  "KeyboardMappingNotify";
	    xevent_name (xet::x::POINTER_MAPPING_NOTIFY   ) =>  "PointerMappingNotify";
	end;

    };
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## COPYRIGHT (c) 1990, 1991 by John H. Reppy.  See SMLNJ-COPYRIGHT file for details.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
