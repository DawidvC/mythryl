This is the Mythryl widget library, which started out
as a port of John H Reppy's eXene widget library.

THE FOLLOWING DESCRIPION IS WAY OUT OF DATE XXX SUCKO FIXME

The key design ideas here are:

 o  We would like to support (at least) both X and OpenGL, so
    as much widget code as possible should be agnostic of the
    particular underlying windowsystem in use.


 o  A widget lives in a Space.  Think of a Space as implementing
    the physics for a window or pane, implementing rules which
    determine where widgets are placed, how they move, how they
    interact.  Widgets can request whatever they like;  the Space
    is responsible for limiting them to what is allowed.

    For example a widget might wish to teleport instantly from
    one side of the window to the other;  the Space may limit
    it to moving along a smooth curve at a reasonable speed.

    A sophisticated Space might implement pinball physics, say,
    deciding when the ball hits something, and how quickly it
    loses energy due to friction.

    A simple Space might implement canvas-style physics, where
    widgets simply sit wherever they are placed, overlapping
    arbitrarily and never moving unless dragged by a user.

    A typical Space is likely to tile widgets without overlapping,
    aligning and spacing them according to a system constraints,
    solved perhaps by something as simple as a one-pass linear
    algorithm, perhaps by something as sophisticated as simulated
    annealing.




 o  We factor widgets into two parts:

        Widget = (State, Look);

    Taking for example a slider widget, the division of responsibility is:

     *  State:  Maintains the core state of the widget.
		#
                For a slider this would include the min and max
                limiting values, the current value, and perhaps
                a velocity or trajectory if slider is automated.

     *  Look:   Handles all widget-side stuff relating to display
                layout and geometry, for example
                  .  Current height and width
                  .  Preferred height and width				# I think min and max height+width are a bad idea; 
                In general the information retained by a Shape will	# introduces too many layout algorithm nonlinearities and problems. 
		depend on the requirements set by a particular Space,	# If the window shrinks toward a single pixel, widgets should just
		so Shapes will in general be specific to some  Space.	# give up doing more than filling in their area with a solid color. 
		#
		For a slider this might include whether the slider
		is an X slider or a Y slider, which determines whether
		it prefers to be tall or wide.

		Handles actually putting pixels on the screen to
		visually represent the widget.  A Skin is specific
		to a particular windowsystem (X or OpenGL);  it is the
		only part of a widget which knows or cares which
		windowsystem is in use.

 o  The State and Look components of a widget are separate imps.
    This allows each of them to run concurrently and "continuously"
    (if need be) to implement animation of their aspects of the widget.
    For example:

     *  State imp for a slider might move the slider in a preprogrammed
        manner to implement a series of cross-fades.

     *  Look imp for a slider might implement it expanding and contracting
        to draw attention to an emergency situation and suggest manipulating
        it, or might animate a widget iconizing or de-iconizing or moving
        to a trashcan or opening up to reveal more internal detail.

        Look imp might implement varying elements of a display such as
        a blinking alarm light or marching-ants animation on a selection
        contour or information-is-flowing colorwaves on a connecting-wire
        widget.

 o  We specify a GUI explicitly -- displaylist style -- rather than
    implicitly via a series of function calls building it up.
    Using an explicit datastructure has the advantage of allowing GUI
    construction to be factored into separate modules which inspect
    and rewrite the displaylist, of allowing debuggers to traverse,
    display and edit the displaylist etc etc.  Explicit datastructures
    facilitate computation;  implicit datastructures prevent it.

    Specifically, we publish a Guipane datastructure which defines
    a GUI in terms of a tree of mutually recursive types corresponding
    to the tree of nested containers and widgets constituting the
    application window.

    In particular a Guipane specifies a Space for the GUI plus a tree
    of (State, Shape) pairs giving the required widgets hierarchy.


 o  Imps export their internal states as opaque values in the Guipane.
    This way if an imp thread dies, we still have its state, and if we
    close down all the imps in a GUI impgraph, we can later restart the
    GUI by constructing a new impgraph which re-uses the imp states from
    the original Guipane.


 o  Skins are not specifically mentioned in the Guipane;  rather, they
    are grouped together into Themes, each Theme specific to a windowsystem.

    Each Theme provides one Skin for every supported Shape, so a Guipane
    plus a Theme specifies a complete GUI:  The Guipane specifies the
    (State, Shape) pairs to use, and each Shape has one matching Skin
    in any given Theme.

    The intent is that
    anything specific to a given windowsystem is in the Theme;  
    everything in the Guipane is windowsystem-agnostic.

 o  We tie everything together with an Appwindow package which manages
    the GUI for one entire application window (toplevel X window):

     *  It accepts a GUI specification in the form of a Guipane and a Theme
        and implements that GUI by constructing an appropriate graph
        of widget imps.
        
     *  It accepts events from the windowsystem layer and forwards them
        to the appropriate widget imps.

     *  It tears down and rebuilds the impgraph on request.

    In essence, the job of the Appwindow is to handle GUI startup and
    shutdown and to maintain a global view of the GUI.  Widget imps
    are aware only of their own state and messages from their neighbors
    in the impgraph;  anything requiring a global view of the impgraph
    is the province of the Appwindow.

