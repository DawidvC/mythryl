## os-process.pkg
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.



# The generic process control interface.
# Modified to work for Win32 (no reliance on posix)


package   winix_process__premicrothread
:         Winix_Process__Premicrothread
{
    package s = scheduler
    package pm = process_deathwatch
    package cc = fate

    package p = winix__premicrothread::process
    package wp = Win32Process

    type status = p::status

    success = p::success
    failure = p::failure

    # * NOTE: we probably need to disable timer signals here * XXX BUGGO FIXME

    fun bin_sh'' cmd = let
	  s::stopTimer ()
	  pid = wp::createProcess (cmd)
	  s::restartTimer ()
	  in 
	    pid
	  end
	    
    fun systemEvt cmd = let
	  pid = bin_sh'' cmd
	  event = (s::atomicBegin(); pm::addPid pid then s::atomicEnd())
	  in
	    Event::wrap (event,
	      \\ wp::SUCCESS => p::success
	       | _ => p::failure)
	  end

    system = Event::sync o systemEvt

    fun atExit _
        =
        raise exception DIE "winix__premicrothread::process::atExit unimplemented"

    fun exit status
        =
        (s::atomicBegin(); cc::throw  *s::shutdownHook  (TRUE, status))

    fun terminate status
        =
        (s::atomicBegin(); cc::throw  *s::shutdownHook  (FALSE, status))

    getEnv = p::getEnv

};


## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
