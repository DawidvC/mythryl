## win32-process-deathwatch.pkg
## COPYRIGHT (c) 1995 AT&T Bell Laboratories.
## COPYRIGHT (c) 1989-1991 John H. Reppy



# Win32 process management (from its Unix counterpart)



package process_deathwatch:
  api

    my add_pid:  Win32Process::pid -> Win32Process::exit_status Event::event

    my harvest_exit_statuses_of_dead_subprocesses:  Void -> Void

    my any_waiting:  Void -> Bool

  end
{

    package sched = scheduler
    package wp    = Win32Process
    package r     = process_result

    enum pid = PID of {
	wait:  r::result( wp::exit_status ),
	pid:  wp::pid
      }

    waiting = REF ([] : List( pid ))

    fun add_pid pid = let
	  rv = Result::result()
	  in
	    waiting := PID { wait = rv, pid = pid } . *waiting;
	    r::get_mailop rv
	  end

    fun harvest_exit_statuses_of_dead_subprocesses () = let
/** NOTE: it would be more efficient to poll for any zombie process,
 ** until there are no more.
 **/
	  fun pollPid pid = wp::waitForSingleObject pid

	  fun pollItem (item as PID { wait, pid } ) = (
		case (pollPid pid)
		 of THE (status) => (
		      sched::run_thunk (\\ () => r::put (wait, status));
		      FALSE)
		  | NULL => TRUE
		)		# end case
		  except ex => (
		    sched::run_thunk (\\ () => r::put_exception (wait, ex));
		    FALSE)
	  in
	    waiting := list::filter pollItem  *waiting
	  end

    fun any_waiting () = (case *waiting of [] => FALSE | _ => TRUE)

};



## COPYRIGHT (c) 1998 Bell Labs, Lucent Technologies.
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
