fun make file = if cm::make file then () else raise exception DIE("Can't load "$file);
fun again () = run "make.pkg";

make "../../ffi-packager/ffi-packager.cm";

/*---------------------------------------------------------------------------
 *
 *  Generate the gadgets stuff
 *
 *---------------------------------------------------------------------------*/
local
    version = "0.1"
    use ffi_packager
    package raw = Ast
    package u   = AstUtil

    #  Mangle these names 
    toMangle = "^(List|Socket|Text)$"

    fun mangle x = if re::matches toMangle x then x$"'" else x

    DIR = "Generated"

    to_lower = string::map char::to_lower

    includeFile = io::read_file "include.pkg"

    fun readUserSig a_class
        = 
        decl::fold
            [
		Fold::D (
		    \\ (raw::PACKAGE_DECL (c, _, THE { api_expression=raw::DECLsig ds, ... }, _), d)
		       =>
			if c == a_class then ds else d

		      | (_, d)
			=>
			d
		)
	   ]
           []
           includeFile
 
    fun readUserStr a_class
        = 
        decl::fold[Fold::D (\\ (raw::PACKAGE_DECL (c, _, _, raw::DECLSEXP ds), d) =>
                              if c == a_class then ds else d
                          | (_, d) => d)] [] includeFile
     

    #  Make directory to put generated stuff inside 
    winix__premicrothread::file::make_directory DIR except _ => ()

    #  read all gtk type definitions 
    prog = io::read_file "../Gtk.sig"
   
    #  Find all the classes 
    classes =
        decl::fold[
          Fold::D (\\ (t as raw::DATATYPE_DECL _, C) =>   
                    (case re::grep "type X (.*)_tag = X (\\S+)_t (\\S+)_tag" 
                        (decl::show t) of
                      THE[self, tag, parent] => (self, tag, parent) . C
                    | _ => C
                    )     
                 | (_, C) => C
          )] [] prog

    #  Find all the object constructors and their types 
    constructors =
        fold_backward  
          (\\ (file, C) => 
           let name = re::extractGroup "^f-(.*)\\.pkg" 1 file
               prog = io::read_file ("../FFI/"$file)
           in  decl::fold[
                 Fold::D (\\ (raw::VALUE_API_DECL(["f"], raw::FUNTY (arg, ret)), C) =>
                    if re::matches "^base Gtk" (Ty::show ret) then
                       (name, arg, ret) . C
                    else C
                 | (_, C) => C)] C prog
           end
          ) [] (listFilesInDir "../FFI" "^f-gtk_.*_new_?")

    fun nameOf (raw::APPTY (raw::IDENT([], t), _)) = re::replace "^Gtk" "" t
       | nameOf t = raise exception DIE("nameOf: "$Ty::show t)

    #  Make them unique 
    fun add (M, x, y) = 
          m::set (M, x, y . (case m::find (M, x) of NULL => [] | THE z))
    constructors =
        fold_backward (\\ (x as (_, _, obj), M) =>
                 add (M, nameOf obj, x)) m::empty constructors
    constructors = m::keyvals_list constructors

    #  Generate the files G-XXX.pkg for each class XXX 
    fun makeSig (name, init, obj) = 
        raw::VALUE_API_DECL([name],
          case init of
            raw::TUPLETY [] => raw::APPTY (raw::IDENT([], "maker'"),[obj])
          | _ => raw::APPTY (raw::IDENT([], "maker"),[obj, init])
          )
    fun isPoly x = 
        Ty::fold[Fold::T (\\ (raw::TYVARTY _, x) => TRUE | (_, x) => x)] FALSE x
    fun makeCon (name, constr, init, obj) =
    let f = raw::ID_IN_EXPRESSION (raw::IDENT([constr], "f"))
    in  case init of 
          raw::TUPLETY [] => u::MY (name, u::APPLY("Gadget'", f))
        | _ => if isPoly init then 
                    u::FUN (name, raw::IDPAT "x", raw::APPLY_EXPRESSION (u::APPLY("Gadget", f), u::ID "x"))
               else u::MY (name, u::APPLY("Gadget", f))
    end

    fun renameTy decl =
        decl::map[Map::T
          (\\ raw::IDTY (raw::IDENT([S], "tag")) =>
                raw::IDTY (raw::IDENT([re::replace "^[SU]T__" "" S], "tag"))
            | t => t
          )] decl

    fun reimportTy decl = 
        decl::map[Map::T
          (\\ raw::APPTY (raw::IDENT([], t as ("message" | 
                                      "maker" | 
                                      "maker'" | 
                                      "signalHandler" | 
                                      "eventHandler" | 
                                      "typedEventHandler")), ts) => 
                raw::APPTY (raw::IDENT(["GtkGadgetsBasis"], t), ts)
            | raw::APPTY (raw::IDENT([], t as ("ptr" | "ptr'" | 
                                       "iptr" | "iptr'" | "su" 
                                      )), ts) => 
                raw::APPTY (raw::IDENT(["C"], t), ts)  
            | raw::IDTY (raw::IDENT([], t as ("base"))) =>
                raw::IDTY (raw::IDENT(["Gtk"], t))
            | raw::IDTY (raw::IDENT([], t as ("ro" | "rw"))) =>
                raw::IDTY (raw::IDENT(["C"], t))
            | ty as raw::APPTY (raw::IDENT([], t), ts) =>
                if re::matches "^Gtk" t then raw::APPTY (raw::IDENT(["Gtk"], t), ts)
                else if re::matches "_obj$" t then raw::APPTY (raw::IDENT(["C"], t), ts)
                else ty
            | t => t
          )
        ] decl

    #  Generate ok/cancel buttons stuff 
    fun okCancelButtons a_class
        =
	if re::matches "^(FileSelection|ColorSelectionDialog|FontSelectionDialog)$"
	     a_class then
	let ty = "Gtk"$a_class
	    sign = 
	    A.@@@["package on :",
		"sig",
		"   my ok:      signalHandler( "$ty$"(X) )",
		"   my cancel:  signalHandler( "$ty$"(X) )",
		"end"
	       ]
	    str = 
	    A.@@@["package on {",
		"   infix <~",
		"   fun ok f fs  =",
		"     GtkButton::cast ("$ty$".get'ok_button fs)",
		"        <~ on::clicked (\\ _ => f fs)",
		"   fun cancel f fs =",
		"    GtkButton::cast ("$ty$".get'cancel_button fs)",
		"        <~ on::clicked (\\ _ => f fs)",
		"}"
	       ]
	in  ([sign],[str])
	end
	else ([],[])

    #  Generate all the Generated / *.pkg stuff 
    fun genConstructor (a_class, constructors)
        = 
	let fun makeCon (constr, init, obj)
                =  
		let name = re::extractGroup "^.*_(new.*)" 1 constr
		    name = case re::grep "^new_with_(.+)" name of
				  THE [x] => x
			       |  _ => 
			       case re::grep "^new_(from_.+)" name of
				  THE [x] => x
			       |  _ => name
		in  (makeSig (name, init, obj), makeCon (name, constr, init, obj))
		end
	    cons = map makeCon constructors
	    my (sign'', str'') = okCancelButtons a_class
	    sign' = readUserSig (a_class)
	    sign = raw::DECLsig (map #1 cons @ sign' @ sign'')
	    str' = readUserStr (a_class)
	    strname = mangle a_class
	    str  = raw::PACKAGE_DECL (strname,[],
			  THE { abstract=FALSE, api_expression=sign },
			  raw::DECLSEXP (map #2 cons @ str' @ str''))
	    prog = raw::LOCAL_DECL([A.@@@["use C Gtk GtkGadgetsBasis"]],[str])
	    prog = renameTy prog
	    filename = DIR + "/" + a_class + ".pkg"
	in
            io::writeFile([io::OUTFILE filename], prog);
	    ("package " + strname, filename)
	end

    exports = map genConstructor constructors

    #  Make Gadgets-Signals.pkg
    fun signal s
        =
        let s = re::replace "^.*(clist|ctree|item|shell)_" "" s
        in  s
        end

    my ()
        =  
	let prog = io::read_file "Gadget-Signals.api"
	    defs =
		decl::fold [Fold::D
		  (\\ (raw::VALUE_API_DECL([s], _), defs) =>
		      let name = signal s
		      in  "fun " + s + " f = on \"" + name + "\" f" . defs
		      end
		    | (_, defs) => defs)] [] prog
	    str =
		raw::PACKAGE_DECL("on",[],
		  THE { abstract=FALSE,
		       api_expression=raw::IDsig (raw::IDENT([], "GTK_GADGET_SIGNAL_HANDLERS")) },
		  raw::DECLSEXP[A.@@@("use GtkGadgetsBasis" . defs)])
	in  io::writeFile([io::OUTFILE "Gadget-Signals.pkg"], str)
	end


    #  Make Gadgets-XXX.sig from Gadget-XXX.pkg
    fun genSig (srcFile, dstFile, sigName, origFile, transTy) = 
    let prog = io::read_file srcFile
        fun gen (method, str, f) =
            let orig = io::read_file (origFile str)
                ty = 
                 decl::fold 
                 [Fold::D (\\ (raw::VALUE_API_DECL([g], ty), t) => if f == g then ty else t
                          | (_, ty) => ty)] u::UNITty orig 
            in  raw::VALUE_API_DECL([method], transTy (str, ty))
            end
        defs =
            decl::fold [Fold::D
               (\\ (raw::VAL_DECL[raw::NAMED_VALUE (raw::IDPAT m, raw::ID_IN_EXPRESSION (raw::IDENT([f], g)))],
                    defs) => gen (m, f, g) . defs
                 | (_, defs) => defs)] [] prog
        defs = reverse defs
        sign = raw::API_DECL (sigName, raw::DECLsig defs)
        sign = renameTy sign
        sign = reimportTy sign
    in  io::writeFile([io::OUTFILE dstFile], sign)
    end

    #  Make Gadgets-Set.sig from Gadget-Set.pkg 
    my () =  
    let fun message ty = raw::APPTY (raw::IDENT([], "message"),[ty])
        fun transTy (fn, ty) = 
            case ty of
              raw::FUNTY (obj, raw::TUPLETY []) => message obj
            | raw::FUNTY (init, raw::FUNTY (obj, raw::TUPLETY [])) => 
                    raw::FUNTY (init, message obj)
            | _ => raise exception DIE("making Gadget-Set.pkg: " + fn)
        fun origFile str = "../FFI/f-" + str + ".pkg"
    in  genSig("Gadget-Set.pkg", "Gadget-Set.sig", "GTK_GADGET_SET",
               origFile, transTy)
    end

    #  Make Gadgets-Maker.sig from Gadget-Maker.pkg
    my () =  
    let fun transTy(_, t) = t
        fun origFile str = "Generated/" + str + ".pkg"
    in  genSig("Gadget-Makers.pkg", "Gadget-Makers.sig", "GTK_GADGET_MAKERS",
               origFile, transTy)
    end

    #  Make Gadget-Events{. sig, sml } 
    my () =
    let 
        #  Find all events from the enum definitions 
        allEvents =
            decl::fold[Fold::D(
              \\ (raw::VAL_DECL vbs, events) =>
                 let fun look (raw::NAMED_VALUE (raw::IDPAT event,
                         raw::TYPED_EXPRESSION(_, raw::IDTY (raw::IDENT([], "GdkEventType")))),
                              events) = 
                         if event != "GDK_NOTHING" then 
                          to_lower (re::replace "^GDK_" "" event) . events else events
                       | look(_, events) = events
                 in  fold_backward look events vbs
                 end
               | (_, events) => events
            )] [] (io::read_file "../Gdk-enums.pkg")

        #  map event name to event type 
        fun gdkEvent e = ml::strName("gdk_event_" + e)
        fun get_event (e as "no_expose") = (e, gdkEvent e)
          | get_event (e as "focus_change") = (e, "GdkEventFocus")
          | get_event e = 
            let e = re::replace "_[^_]+ + " "" e
                e = re::replace "^[0-9]" "" e
                t = gdkEvent e
                fun hasEvent() = 
                let file = "../FFI/s-" + t + ".pkg"
                in  (file::close_input (file::open_for_read file); TRUE) except _ => FALSE
                end
            in  if re::matches "drag|drop" e then ("dnd", "GdkEventDND")
                else if hasEvent() then (e, t)
                else ("any", "GdkEventAny")
            end except _ => raise exception DIE("get_event " + e)

        # For each event, generate a handler registration function with 
        # the proper type and name

        fun coder event =
        let eventName = event + "_event" #  Gtk needs the suffix 
            event'      = re::replace "2" "two_" event
            event'      = re::replace "3" "three_" event'
            my (get, gdkEventType) = get_event event
            sign = "my " + event' + " :  GtkGadgetsBasis::typedEventHandler( gtk::GtkWidget(X), " + gdkEventType + "::t)"
            evtObj = "&(GdkEvent::get'" + get + " event)"
            str  = A.@@@["fun " + event' + " f = when \"" + eventName + "\"",
                           "    (\\ (obj, event) => f (obj, " + evtObj + "))"]
        in  (sign, str)
        end 

        code = map coder allEvents

        sign = raw::API_DECL("GTK_GADGET_EVENT_HANDLERS",
                                   raw::DECLsig[A.@@@(map #1 code)])
        str  = raw::PACKAGE_DECL("when",[],
                     THE { abstract=FALSE,
                          api_expression=raw::IDsig (raw::IDENT([],
                                         "GTK_GADGET_EVENT_HANDLERS")) },
                     raw::DECLSEXP[raw::LOCAL_DECL([A.@@@["use C GtkGadgetsBasis"]],
                                            map #2 code)])
    in  io::writeFile([io::OUTFILE "Gadget-Events.api"], sign);
        io::writeFile([io::OUTFILE "Gadget-Events.pkg"], str)
    end
       

    #  Make Gadgets.cm 
    my () =
        let header = "api GTK_GADGETS" .
                         "package GtkGadgets" .
                         "package when" .
                         "package on" .
                         "package set" .
                         "package @@@" .
                         "package @" .
                         "package +" .
                         map #1 exports
            imports = "$/basis.cm" .
                          "$c/c.cm" .
                          "$/smlnj-lib.cm" .
                          "../Gtk.cm" .
                          "../../common/smlnj-ffilib-basis.cm" .
                          "Gadgets-Basis.api" .
                          "Gadgets-Basis.pkg (lambdasplit: infinity)" .
                          "Gadgets.api" .
                          "Gadgets.pkg" .
                          "Gadget-Signals.api" .
                          "Gadget-Signals.pkg" .
                          "Gadget-Events.api" .
                          "Gadget-Events.pkg" .
                          "Gadget-Set.api" .
                          "Gadget-Set.pkg" .
                          "Gadget-Makers.api" .
                          "Gadget-Makers.pkg" .
                          "Gadget-ItemFactory.pkg" .
                          "Gadget-Add.pkg" .
                          map #2 exports
            fun tab t = "\t" + t
            cm = ["Library"] @ (map tab header) @ 
                     ["is"] @ (map tab imports)
       in io::writeFile([io::OUTFILE "Gadgets.lib"], A.@@@ cm)
       end


in 
      
end
