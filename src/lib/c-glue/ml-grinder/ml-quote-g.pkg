local
   program = "lib7_quote_g"
   author  = "Allen Leung"
   email   = "leunga@{ cs.nyu.edu, dorsai.org }"
   version = "1.0"
in
package lib7_quote_g:  Lib7_Quote_Gen {


   package r   =  lib7_reflect_gen_g (ml_grinder)
   package g   =  r::G
   package raw =  g::Ast
   
   use G g::AstUtil

   prefix = "q_"

   enum kind = PAT | EXP

   fun gen { path=consPrefix, infile, outfile, wrapper, kind=k }
       = 
       let inputProg = io::read_file infile

	   kind = case k of PAT => "pat" | EXP => "exp"

	   TUPLEer  = "TUPLE"$kind
	   CONSer   = "CONS"$kind
	   my (RECORDer, code) = 
		   case k of
		     EXP => ("raw::RECORDexp", "")
		   | PAT => ("Private::RECORD",
			     "   fun record lps = raw::RECORD_PATTERN (lps, FALSE)")   # "record" was "RECORD" CrT 2007-05-30
	   header' = A.@@@[
	       "package g = ml_grinder",
	       "package a = g::Ast",
	       "package u = ml_grinder::AstUtil",
	       "package private {",
	       "   nil = raw::LIST"$kind$"([], NULL)",
	       "   lit = raw::LIT"$kind,
	       "   consx = raw::CONS"$kind,
	       "   fun cons (h, raw::LIST"$kind$"(t, r)) = raw::LIST"$kind$"(h . t, r)",
	       "     | cons (h, t) = raw::LIST"$kind$"([h], THE t)",
	       code,
	       "}",
	       "fun q_string s = private::lit (raw::STRING_LIT s)",
	       "fun q_int i = private::lit (raw::INT_LIT i)",
	       "fun q_int1 i = private::lit (raw::INT1lit i)",
	       "fun q_integer i = private::lit (raw::INTEGERlit i)",
	       "fun q_word w = private::lit (raw::UNT_LIT w)",
	       "fun q_word32 w = private::lit (raw::UNT1_LIT w)",
	       "fun q_char c = private::lit (raw::CHARlit c)",
	       "fun q_bool b = private::lit (raw::BOOL_LIT b)",
	       "fun q_list f [] = private::nil",
	       "  | q_list f (h . t) = private::cons (f h, q_list f t)",
	       "fun q_option f_'a (NULL) = private::consx (raw::IDENT ([], \"NULL\"), NULL)",
	       "  | q_option f_'a (THE arg) = private::consx (raw::IDENT ([], \"THE\"), THE (f_'a arg))",
	       "fun q_ref f_'a (REF arg) = private::consx (raw::IDENT ([], \"REF\"), THE (f_'a arg))" 
	     ] 

	   my { defineConst, declareConsts } = Constants::constants()

	   fun App (f, x) = raw::APPLY_EXPRESSION (raw::ID_IN_EXPRESSION (raw::IDENT(["A"], f)), x)
	   fun path ps = raw::LIST_IN_EXPRESSION (map STRINGexp ps, NULL)

	   fun coerce (p, t) = raw::ID_IN_EXPRESSION (raw::IDENT (p, prefix$t))
	   fun idty (raw::IDENT([], x)) = coerce([], x)
	     | idty (raw::IDENT(["integer"], "int")) = coerce([], "integer")
	     | idty (raw::IDENT(["one_word_int"], "int")) = coerce([], "one_word_int")
	     | idty (raw::IDENT(["one_word_unt"], "unt")) = coerce([], "one_word_unt")
	     | idty (raw::IDENT (p, x)) = coerce([], x)

	   fun tuplety tys =  
	   let fun loop (i, [],      pats, exps) = (reverse pats, reverse exps)
		 | loop (i, ty . tys, pats, exps) =
		   let x_i = "x_"$int::to_string i
		   in  loop (i+1, tys, raw::IDPAT x_i . pats, raw::APPLY_EXPRESSION (ty, ID x_i) . exps) 
		   end 
	       my (pats, exps) =  loop (0, tys, [], [])
	   in  raw::LAMBDA_EXPRESSION[raw::CLAUSE([raw::TUPLEPAT pats], NULL,
				    App (TUPLEer, raw::LIST_IN_EXPRESSION (exps, NULL)))]
	   end 

	   fun recordty ltys = 
	   let fun loop ([],           lpats, lexps) = (lpats, lexps)
		 | loop((x, ty) . ltys, lpats, lexps) =
		   loop (ltys, (x, raw::IDPAT x) . lpats, (x, raw::APPLY_EXPRESSION (ty, ID x)) . lexps)
	       my (lpats, lexps) = loop (ltys, [], [])
	       exps = map (\\ (x, e) => raw::TUPLE_IN_EXPRESSION [STRINGexp x, e]) lexps
	   in  raw::LAMBDA_EXPRESSION[raw::CLAUSE([raw::RECORD_PATTERN (lpats, FALSE)], NULL,
				     APPLY (RECORDer, raw::LIST_IN_EXPRESSION (exps, NULL)))]
	   end

	   fun appty (raw::IDENT (p, f), tys) = raw::APPLY_EXPRESSION (coerce (p, f), raw::TUPLE_IN_EXPRESSION tys)

	   fun funty (x, y) = raise exception DIE "funty"

	   consPrefix' = defineConst (raw::LIST_IN_EXPRESSION (map STRINGexp consPrefix, NULL))

	   fun makeCons (f, x) = 
		 App (CONSer,
		    raw::TUPLE_IN_EXPRESSION [
		     defineConst (App("IDENT", raw::TUPLE_IN_EXPRESSION [consPrefix', STRINGexp f])),
		       case x of
			 NULL => ID "NULL"
		       | THE x => APPLY("THE", x)])

	   fun makeArg p = [p]
	   fun makeConsPat (id, x) = raw::CONSPAT (raw::IDENT (consPrefix, id), x)

	   prog = 
	       r::reflect 
	       { prefix, makeCons, makeConsPat, makeArg }
	       { idty, tuplety, recordty,
		appty, funty } 
	       inputProg

	   prog = declareConsts prog

	   prog = wrapper (raw::SEQ_DECL[header', prog])

       in  io::writeFile([io::OUTFILE outfile,
			 io::INFILE infile,
			 io::PROGRAM program,
			 io::AUTHOR author,
			 io::EMAIL email,
			 io::VERSION version 
			], prog)
       end
}; #  lib7_quote_g 
end; #  local 


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################
