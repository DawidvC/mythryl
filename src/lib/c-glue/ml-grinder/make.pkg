fun again() = run "make.pkg";
fun make cm = cm::make cm or raise exception DIE("failed to compile "$cm);

#  Compile the ml_grinder library 
make "ml-grinder.cm";

#  Compile the lib7_quote_g library 
make "ml-quote-gen.cm";

/*
 * Find out where the SML binary is
 */
local
   smlpath = SMLofNJ::getCmdName()
in
   smlroot = 
     case reg_exp_lib::grep "^(.*)/bin/sml$" smlpath of
       THE[root] => root
     | NULL => raise exception DIE "where is sml?"
end;

/* Generate these files:
 *    ml-grinder-config.pkg
 *    ml-quote-exp.pkg
 *    ml-quote-pat.pkg
 */
local 
   package q = lib7_quote_g
   package g = q::G

   use g::Ast ml_grinder

   gen = q::gen
   path=["A"]
   astDef=smlroot$"/src/MLRISC/Tools/FakeSMLAst/adl-raw-syntax-form.api"
   header = @@@["fun q_location _ = raise exception DIE \"q_location\""]
   fun wrapper (strname, signame) body =
       PACKAGE_DECL (strname,[], NULL,	# THE (IDsig (IDENT([], signame))),
                     DECLSEXP[header, body])
in 
   io::writeFile([io::OUTFILE "ml-grinder-config.pkg"],
                         decl::parse(
                           string::cat
                            ["package ml_grinder_config =\n",
                             "struct\n",
                             "  astFile=\""$astDef$"\"\n",
                             "end\n"
                            ]))
   gen { path,
               infile=astDef,
               outfile="ml-quote-exp.pkg",
               wrapper=wrapper("ml_quote_exp", "ML_QUOTE_EXP"),
               kind=q::EXP
              };

   gen { path,
               infile=astDef,
               outfile="ml-quote-pat.pkg",
               wrapper=wrapper("ml_quote_pat", "ML_QUOTE_PAT"),
               kind=q::PAT
              };
end;

#  Compile the Code Monkey Tool 
/* make "ml-code-monkey.cm"; 

gen = ml_code_monkey::gen
grep = reg_exp_lib::grep */
