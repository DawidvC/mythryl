## hash-cons-map.pkg

# Compiled by:
#     src/lib/hash-consing/hash-cons.lib

# This is an implementation of the Hash_Cons_Map api
# built on top of the
#
#     unt_red_black_map
#
# package.  Eventually, it will be replaced
# by an implmementation that uses Patricia trees.		# XXX BUGGO FIXME


stipulate
    package hc  = hash_cons;					# hash_cons		is from   src/lib/hash-consing/hash-cons.pkg
    package map = unt_red_black_map;				# unt_red_black_map	is from   src/lib/src/unt-red-black-map.pkg
herein

    package hash_cons_map
    :       Hash_Cons_Map				# Hash_Cons_Map		is from   src/lib/hash-consing/hash-cons-map.api
    {
	Chunk(X) = hc::Chunk(X);

	Map (X, Y) = map::Map ((Chunk(X), Y)); 

	fun lift2  f ((_, a), (_, b)) = f (a, b);
	fun lift2i f (_, (k, a), (_, b)) = f (k, a, b);

	empty = map::empty;
	is_empty = map::is_empty;


	fun singleton (chunk, v)
	    =
	    map::singleton (hc::tag chunk, (chunk, v));


	fun set (m, chunk, v)
	    =
	    map::set (m, hc::tag chunk, (chunk, v));


	fun set' (p as (chunk, v), m)
	    =
	    map::set (m, hc::tag chunk, p);


	fun set_with merge (m, chunk, v)
	    =
	    {   tag = hc::tag chunk;

		case (map::find (m, tag))
		    #
		    NULL       =>  map::set (m, tag, (chunk, v));
		    THE(_, v') =>  map::set (m, tag, (chunk, merge (v', v)));
		esac;
	      };

	fun set_withi merge (m, chunk, v)
	    =
	    {   tag = hc::tag chunk;

		case (map::find (m, tag))
		    #
		    NULL => map::set (m, tag, (chunk, v));
		    THE(_, v') => map::set (m, tag, (chunk, merge (chunk, v', v)));
		esac;
	      };


	fun find (map:   Map(X, Y), chunk)
	    =
	    null_or::map #2 (map::find (map, hc::tag chunk));


	fun contains_key (map, chunk)
	    =
	    map::contains_key (map, hc::tag chunk);


	fun remove (map, chunk)
	    =
	    {   (map::remove (map, hc::tag chunk))
		    ->
		    (map, (_, v));

		(map, v);
	    };



	fun first_val_else_null (map:   Map(X, Y))
	    =
	    null_or::map #2 (map::first_val_else_null map);


	first_keyval_else_null
	    =
	    map::first_val_else_null;



	fun last_val_else_null (map:   Map(X, Y))
	    =
	    null_or::map #2 (map::last_val_else_null map);


	last_keyval_else_null
	    =
	    map::last_val_else_null;



	vals_count =  map::vals_count;

	fun vals_list map
	    =
	    map::fold_backward
		(\\ ((_, v), vs) = v ! vs)
		[]
		map;

	keyvals_list = map::vals_list;


	fun list_keys map
	    =
	    map::fold_backward
		(\\ ((k, _), ks) = k ! ks)
		[]
		map;


	fun compare_sequences compare
	    =
	    map::compare_sequences (lift2 compare);


	fun union_with  merge
	    =
	    map::union_with
		(\\ ((k, a), (_, b)) =  (k, merge (a, b)));


	fun keyed_union_with  merge
	    =
	    map::keyed_union_with
		(lift2i  (\\ (k, a, b) = (k, merge (k, a, b))));

	fun intersect_with  join
	    =
	    map::intersect_with
		(\\ ((k, a), (_, b)) = (k, join (a, b)));

	fun keyed_intersect_with join
	    =
	    map::keyed_intersect_with
		(lift2i (\\ (k, a, b) = (k, join (k, a, b))));

	fun apply f
	    =
	    map::apply (\\ (_, v) = f v);

	keyed_apply = map::apply;

	fun map f
	    =
	    map::map (\\ (k, v) = (k, f v));

	fun keyed_map f
	    =
	    map::map (\\ (k, v) = (k, f (k, v)));

	fun fold_forward f
	    =
	    map::fold_forward (\\ ((_, x), acc) = f (x, acc));

	fun keyed_fold_forward f
	    =
	    map::fold_forward (\\ ((k, x), acc) = f (k, x, acc));

	fun fold_backward f
	    =
	    map::fold_backward
		(\\ ((_, x), acc) = f (x, acc));

	fun keyed_fold_backward f
	    =
	    map::fold_backward
		(\\ ((k, x), acc) = f (k, x, acc));

	fun filter prior
	    =
	    map::filter
		(\\ (_, x) = prior x);

	keyed_filter = map::filter;

	fun map' f
	    =
	    map::map'
		(\\ (k, v) = case (f v)
				 THE v => THE (k, v);
				 NULL  => NULL;
			     esac
		);

	fun keyed_map' f
	    =
	    map::map'
		(\\ (k, v) = case (f (k, v))
				 THE v => THE (k, v);
				 NULL  => NULL;
			     esac
		);
    };
end;


## COPYRIGHT (c) 2001 Bell Labs, Lucent Technologies
## Subsequent changes by Jeff Prothero Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
