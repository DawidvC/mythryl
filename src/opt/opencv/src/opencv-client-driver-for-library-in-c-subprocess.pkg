# opencv-client-driver-for-library-in-c-subprocess.pkg
#
# This file handles the Mythryl side
# of the Mythryl <-> C interface
# layer for the Mythryl Opencv-in-subprocess
# Opencv binding.
#
# Here we implement only low-level pipe-specific functionality.
# In src/opt/opencv/src/opencv-client-for-library-in-c-subprocess.pkg we are passed as an argument
# to the generic handling the higher-level stuff:
#
#     opencv_client_g from   src/opt/opencv/src/opencv-client-g.pkg
#
# The other end of the pipe is implemented in C in:
#
#     src/opt/opencv/c/in-sub/mythryl-opencv-library-in-c-subprocess.c
#
# See the comments in that file for a description
# of the pipe protocol used.
#
# Our alternative Opencv-in-main-process implementation is in
#
#     src/opt/opencv/src/opencv-client-driver-for-library-in-main-process.pkg

# Compiled by:
#     src/lib/std/standard.lib




stipulate
    package f8b =  eight_byte_float;							# eight_byte_float	is from   src/lib/std/eight-byte-float.pkg
    package fil =  file__premicrothread;						# file__premicrothread	is from   src/lib/std/src/posix/file--premicrothread.pkg
    package spn =  spawn__premicrothread;						# spawn__premicrothread	is from   src/lib/std/src/posix/spawn--premicrothread.pkg
herein

    package opencv_client_driver_for_library_in_c_subprocess:  Opencv_Client_Driver   {	# Opencv_Client_Driver	is from   src/opt/opencv/src/opencv-client-driver.api
	#

	package int_map
	    =
	    int_red_black_map;

	Session = { process:             spn::Process( fil::Output_Stream, fil::Input_Stream, fil::Input_Stream ),

		    # The input and output pipes connecting us
		    # to the GTK server subprocess:
		    #
		    from_stream:         fil::Input_Stream,
		    to_stream:           fil::Output_Stream,

		    # An additional stream on which to log debug stuff:
		    #
		    logstream:           fil::Output_Stream,

		    callback_map:	  { void:              Ref (int_map::Map( Void              -> Void )),
					    bool:              Ref (int_map::Map( Bool              -> Void )),
					    float:             Ref (int_map::Map( Float             -> Void ))
					  }
					  # callback_map is created by our client  src/opt/opencv/src/opencv-client-g.pkg
					  # and passed to us via our make_session call.  We read it but never write it.
		  };

	# Given ("FOO", "FOO187"), return 187:
	#
	fun get_int_suffix (prefix, string)
	    =
	    {   suffix =  string::extract (string, string::length_in_bytes  prefix, NULL);
		#
		case (int::from_string  suffix)
		    #
		    THE i =>  i;
		    NULL  =>  raise exception DIE ("get_int_suffix:  Bad " + prefix + " value: " + string);
		esac;
	    };

	# Given ("FOO", "FOO..."), return "...":
	#
	fun get_suffix (prefix, string)
	    =
	    string::extract (string, string::length_in_bytes  prefix, NULL);


	# A line like
	#     "CALLBACK17"
	# means to execute callback 17
	# in our callback_map.
	#
	# A line like
	#     "BOOL_CALLBACK17 TRUE"
	# means to execute callback 17
	# in our bool_callback_map with an argument of TRUE.
	#
	# A line like
	#     "FLOAT_CALLBACK17 2.3"
	# means to execute callback 17
	# in our float_callback_map with an argument of 2.3.
	#
	# A line like
	#     "BUTTON_CALLBACK17 1 23.3 52.9"
	# means to tell callback 17 that mouse button 1 was clicked at x,y of (23.3, 52.9)
	# ...
	# and so forth. :)
	#
	fun maybe_run_callback  (session: Session, callback_line: String): Void
	    =
	    {
		if (string::is_prefix  "CALLBACK"  callback_line)
		    #
		    callback_id =   get_int_suffix ("CALLBACK", callback_line); 

		    case (int_map::get (*session.callback_map.void, callback_id))
		        #
			THE callback => callback ();
			NULL         => (); 
		    esac;
		fi;

		if (string::is_prefix  "BOOL_CALLBACK"  callback_line)
		    #
		    callback_id =  get_int_suffix ("BOOL_CALLBACK", callback_line); 
		    bool        =  string::is_suffix "TRUE" callback_line; 

		    case (int_map::get (*session.callback_map.bool, callback_id))
			#
			THE callback => callback bool;
			NULL         => (); 
		    esac;
		fi;

		if (string::is_prefix  "FLOAT_CALLBACK"  callback_line)
		    #
		    callback_id =  get_int_suffix ("FLOAT_CALLBACK", callback_line); 

		    # callback_line should look like
		    #
		    #     "FLOAT_CALLBACK17 2.3"
		    #
		    # where '17' is the callback to invoke
		    # and '2.3' is the value to pass it:
		    #
		    value
			=
			case (string::tokens  char::is_space  callback_line)
			    #
			    _ ! arg ! NIL => the (f8b::from_string arg);
			    _             => raise exception DIE "bad FLOAT_CALLBACK arg";
			esac;

		    case (int_map::get (*session.callback_map.float, callback_id))
			#
			THE callback => callback value;
			NULL         => (); 
		    esac;
		fi;

	    };

	#
	fun string_to_string   string
	    =
	    sprintf "\"%d\"%s\"" (string::length_in_bytes string) string;


	#
	fun bool_to_string bool
	    =
	    case bool
		#
		TRUE  => "TRUE";
		FALSE => "FALSE";
	    esac;

	# Read a line from mythryl-opencv-library-in-c-subprocess,
	# then execute any callback
	# it requests.
	# Return Void:
	#
#	fun handle_line_from_server  (session:   Session)
#	    =
#	    case (fil::read_line  session.from_stream)
#		#
#		THE line
#		    =>
#		    {   line = string::chomp  line;
#   fil::write (session.logstream, "    read: " + line + "\n");  fil::flush session.logstream;
#			maybe_run_callback (session, line);
#		    };
#		#
#		NULL =>   raise exception DIE "EOF from mythryl-opencv-library-in-c-subprocess subprocess.";
#	    esac;

	# Read lines from mythryl-opencv-library-in-c-subprocess until
	# we get a line (say "FOO187"),
	# starting with given prefix ("FOO").
	# After finding it, execute any callbacks
	# encountered along the way, then return
	# the target line ("FOO187"):
	#
 	fun handle_line_from_server'
 	      ( session:         Session,
 		result_prefix:   String
 	      )
 	    =
 	    read_lines []
 	    where
 		# Voice of Experience:  We need to read everything
 		# up to our target line before running any callbacks,
 		# because otherwise the callbacks may make recursive
 		# calls to our server process which will eat our remaining
 		# input out from under us before we can get to it.
 		#
 		fun read_lines  lines_read
 		    =
 		    case (fil::read_line  session.from_stream)
 			#
 			THE line
 			    =>
 			    {
 				line = string::chomp  line;
 
 				if (string::is_prefix  result_prefix  line)
 				     #	
 				     # NOW it is safe to run our callbacks:
 				     #
 				     apply
					 {. maybe_run_callback (session, #line); }
 					 (reverse lines_read);

 				     line;
 				else
 
 				     read_lines  (line ! lines_read);
 				fi;
 			    };
 			#
 			NULL => {
 				    raise exception DIE "EOF from mythryl-opencv-library-in-c-subprocess subprocess.";	
 			};
 		    esac;
 	    end;

	# Send given command to mythryl-opencv-library-in-c-subprocess subprocess,
	# return Void:
	#
	fun do_void_command
	    (
	      session: Session,
	      command
	    )
	    =
	    {   fil::write (session.to_stream, (sprintf "%d" (string::length_in_bytes command + 1)) + "\n");	# Write length of next line.
		fil::write (session.to_stream, command+"\n");
		fil::flush session.to_stream;
#   fil::write (session.logstream, "    sent: do_void_command: " + command + "\n");     fil::flush session.logstream;
	    };

	# Send given command to mythryl-opencv-library-in-c-subprocess subprocess,
	# read result marked by 'result_prefix' ,
	# return integer result:
	#
 	fun do_int_command
 	    ( session,
 	      result_prefix,
 	      command
 	    )
 	    =
 	    {
 		fil::write (session.to_stream, (sprintf "%d" (string::length_in_bytes command + 1)) + "\n");	# Write length of next line.

 		fil::write (session.to_stream, command+"\n");		fil::flush session.to_stream;

 		result =  handle_line_from_server' (session, result_prefix);

 		get_int_suffix (result_prefix, result);  
 	    };


	# Send given command to mythryl-opencv-library-in-c-subprocess subprocess,
	# read result marked by 'result_prefix' ,
	# return string result:
	#
 	fun do_string_command
 	    ( session,
 	      result_prefix,
 	      command
 	    )
 	    =
 	    {   fil::write (session.to_stream, (sprintf "%d" (string::length_in_bytes command + 1)) + "\n");	# Write length of next line.
 
 		fil::write (session.to_stream, command+"\n");		fil::flush session.to_stream;
 
#     fil::write (session.logstream, "    SENT: " + command + "\n");     fil::flush session.logstream;
 
 		result =  handle_line_from_server' (session, result_prefix);
 
 		get_suffix (result_prefix, result);  
 	    };
 

	#
	fun make_session  callback_map
	    =
	    {
		process =  spn::spawn_process { executable => "/usr/bin/mythryl-opencv-library-in-c-subprocess", arguments => [], options => [] };

		(spn::text_streams_of  process)
		    ->
		    { stdin_to_child    =>  to_stream,
		      stdout_from_child =>  from_stream
		    };

		logstream =  fil::open_for_write "opencv-client-for-library-in-main-process.pkg.log~";

		session
		  =
		  { process,
		    from_stream,
		    to_stream,
		    logstream,
		    #	
		    callback_map
		  };

		do_void_command (session, "init");

		session;
	    };


# 	#
# 	fun get_widget_allocation (session, widget)
# 	    =
# 	    {   result
# 		    = 
# 		    do_string_command
# 		      (
# 			session,
# 			"get_widget_allocation",
# 			string::join " " [ "get_widget_allocation",  widget_to_string  widget ]
# 		      );
# 
# 		case (string::tokens char::is_space result)
# 
# 		     x ! y ! wide ! high ! NIL
# 			=>
# 			( /* x    => */  the (int::from_string  x),
# 			  /* y    => */  the (int::from_string  y),
# 			  /* wide => */  the (int::from_string  wide),
# 			  /* high => */  the (int::from_string  high)
# 			);
# 
# 		     _  => raise exception DIE ("get_widget_allocation: invalid result from child: " + result);
# 		esac;
# 	    };
# 
# 
# 	#
# 	fun make_dialog session
# 	    =
# 	    {   result
# 		    = 
# 		    do_string_command
# 		      (
# 			session,
# 			"make_dialog",
# 			"make_dialog"
# 		      );
# 
# 		case (string::tokens char::is_space result)
# 
# 		     dialog ! vbox ! action_area ! NIL
# 			=>
# 			( string_to_widget  dialog,
# 			  string_to_widget  vbox,
# 			  string_to_widget  action_area
# 			);
# 
# 		     _  => raise exception DIE ("make_dialog: invalid result from child: " + result);
# 		esac;
# 	    };
# 
# 	#
# 	fun unref_object (session, widget)
# 	    =
# 	    do_void_command (session, "unref_object " + widget_to_string widget);
# 
# 	#
# 	fun quit_eventloop  session
# 	    =
# 	    do_void_command (session, "quit_eventloop");
# 
# 	#
# 	fun run_eventloop_indefinitely  session
# 	    =
# 	    {   do_void_command (session, "run_eventloop_indefinitely");
# 
# 		loop ()
# 		where
# 		    fun loop ()
# 			=
# 			{   handle_line_from_server  session;
# 			    loop ();
# 			};
# 		end; 
# 	    };
# 
# 	#
# 	fun run_eventloop_once  (session: Session, block_until_event: Bool)
# 	    =
# 	    if (0 == do_int_command (session, "make_window", "make_window" + " " + bool_to_string block_until_event))
# 		FALSE;
# 	    else
# 		TRUE;
# 	    fi;



    #################################################################################################
    # The following stuff gets built from
    #     build-a: plain-fn
    #     fn-name: foo
    #     fn-type: Int -> Void        # e.g.
    #     libcall: foo(i0)            # e.g.
    # paragraphs in
    #     src/opt/opencv/etc/construction.plan
    # via
    #     build_plain_function
    #  -> build_fun_definition_for_'xxx_client_driver_for_library_in_c_subprocess_pkg'
    # [-> write_do_command ]
    #  -> to_xxx_client_driver_for_library_in_c_subprocess_pkg
    # in
    #     src/lib/make-library-glue/make-library-glue.pkg
    #
    # Do not edit this or following lines --- they are autobuilt.  (patchname="body")
    fun print_hello_world (session)	# Void
        =
        do_void_command (session, "print_hello_world");


    fun negate_int (session, i0)	# Int
        =
        do_int_command (session, "negate_int", "negate_int" + " " + int::to_string i0);


    fun negate_float (session, f0)	# Float
        =
        {   result = do_string_command (session, "negate_float", "negate_float" + " " + eight_byte_float::to_string f0);

            the (eight_byte_float::from_string result);
        };


    fun negate_boolean (session, b0)	# Bool
        =
        {   result = do_string_command (session, "negate_boolean", "negate_boolean" + " " + bool_to_string b0);

            the (int::from_string result) != 0;
        };


    # Do not edit this or preceding lines --- they are autobuilt.
    #################################################################################################
    };
end;





##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################

