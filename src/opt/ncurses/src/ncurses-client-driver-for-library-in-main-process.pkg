# ncurses-client-driver-for-library-in-main-process.pkg
#
# This file handles the Mythryl side
# of the Mythryl <-> C interface
# layer for the Mythryl Ncurses-in-main-process
# Ncurses binding.  The C side is implemented by
#
#     src/opt/ncurses/c/mythryl-ncurses-library-in-main-process.c
#
# Here we implement only low-level pipe-specific functionality.
# In src/opt/ncurses/src/ncurses-client-for-library-in-main-process.pkg we are passed as an argument
# to the generic handling the higher-level stuff:
#
#     ncurses_client_g from   src/opt/ncurses/src/ncurses-client-g.pkg
#
# Our alternative Ncurses-in-subprocess implementation is in
#
#     src/opt/ncurses/src/ncurses-client-driver-for-library-in-c-subprocess.pkg

# Compiled by:
#     src/lib/std/standard.lib


# Immediate TODO list:
#   o Hack ncurses-client-driver-for-library-in-main-process.pkg so all binding fns theoretically work.
#   o Figure out what happens when GTK_ADJUSTMENT() and such throw an error and how to trap and handle it.
#   o Hack make-ncurses-glue to process pending callbacks at end of each binding fn.
#   o Hack both drivers to use decomposed outer loop.
#         http://www.gtk.org/api/2.6/glib/glib-The-Main-Event-Loop.html
#   o Hack ncurses-via-driver-unit-test.pkg to use decomposed loop and actually press its button.

stipulate
    package imp =  int_red_black_map;					# int_red_black_map			is from   src/lib/src/int-red-black-map.pkg
herein

    package ncurses_client_driver_for_library_in_main_process: Ncurses_Client_Driver  {					# Ncurses_Client_Driver				is from   src/opt/ncurses/src/ncurses-client-driver.api
	#
	package ci = unsafe::mythryl_callable_c_library_interface;	# unsafe				is from   src/lib/std/src/unsafe/unsafe.pkg
									# mythryl_callable_c_library_interface	is from   src/lib/std/src/unsafe/mythryl-callable-c-library-interface.pkg


	Session = { callback_map:     { void:              Ref (imp::Map( Void			-> Void )),
					bool:              Ref (imp::Map( Bool			-> Void )),
					float:             Ref (imp::Map( Float			-> Void ))
				      }
				      # callback_map is created by our client  src/opt/ncurses/src/ncurses-client-g.pkg
				      # and passed to us via our make_session call.  We read it but never write it.
		  };



	# Define the different types of
	# callback queue entries supported.
	#
	# WARNING! Must be kept in sync
	# with matching declarations in
	#
	#     src/opt/ncurses/c/mythryl-ncurses-library-in-main-process.c
	#
#	my          queued_void_callback = 1;
#	my          queued_bool_callback = 2;
#	my         queued_float_callback = 3;
#	my  queued_button_press_callback = 4;
#	my     queued_key_press_callback = 5;
#	my queued_motion_notify_callback = 6;
#	my        queued_expose_callback = 7;
#	my     queued_configure_callback = 8;

	my init:   Void -> Void
	    =
	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "init" };

	#################################################################################################
	# These functions are our interface to the
	#     callback_queue[]
	# in
	#     src/opt/ncurses/c/mythryl-ncurses-library-in-main-process.c
	# 
#	my  callback_queue_is_empty:   Void -> Bool
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "callback_queue_is_empty" };
#
	# 
#	my  number_of_queued_callbacks:   Void -> Int
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "number_of_queued_callbacks" };
#
	# 
#	my  type_of_next_queued_callback:   Void -> Int
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "type_of_next_queued_callback" };
#
	# 
#	my  get_queued_void_callback:   Void -> Int
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "get_queued_void_callback" };
#
	# 
#	my  get_queued_bool_callback:   Void -> (Int, Bool)
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "get_queued_bool_callback" };
#
	# 
#	my  get_queued_float_callback:   Void -> (Int, Float)
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "get_queued_float_callback" };
#
	# 
#	my  get_queued_button_press_callback:   Void -> (Int, Int, Int, Float, Float, Int, Int)	# Void -> (callback_number, widget_id, button, x, y, time, modifiers)
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "get_queued_button_press_callback" };
#
	# 
#	my  get_queued_key_press_callback:   Void -> (Int, Int, Int, Int, Int)			# Void -> (callback_number, key, keycode, time, modifiers)
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "get_queued_key_press_callback" };
#
	# 
#	my  get_queued_motion_notify_callback:   Void -> (Int, Int, Int, Float, Float, Int, Bool)	# Void -> (callback_number, widget_id, time, x, y, modifiers, is_hint)
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "get_queued_motion_notify_callback" };
#
	# 
#	my  get_queued_expose_callback:   Void -> (Int, Int, Int, Int, Int, Int, Int)		# Void -> (callback_number, widget, count, area_x, area_y, area_wide, area_high)
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "get_queued_expose_callback" };
#
	# 
#	my  get_queued_configure_callback:   Void -> (Int, Int, Int, Int, Int, Int)			# Void -> (callback_number, widget, x,    y,    wide, high)
#	    =
#	    unsafe::mythryl_callable_c_library_interface::find_c_function { lib_name => "ncurses", fun_name => "get_queued_configure_callback" };
#



	# A line like
	#     "CALLBACK17"
	# means to execute callback 17
	# in our callback_map.
	#
	# A line like
	#     "BOOL_CALLBACK17 TRUE"
	# means to execute callback 17
	# in our bool_callback_map with an argument of TRUE.
	#
	# A line like
	#     "FLOAT_CALLBACK17 2.3"
	# means to execute callback 17
	# in our float_callback_map with an argument of 2.3.
	#
	# A line like
	#     "BUTTON_CALLBACK17 1 23.3 52.9"
	# means to tell callback 17 that mouse button 1 was clicked at x,y of (23.3, 52.9)
	# ...
	# and so forth. :)
	#
#	fun run_pending_callbacks  (session: Session): Void
#	    =
#	    # Check how many callbacks are currently
#	    # in the mythryl-ncurses-library-in-main-process.c callback_queue[]
#	    # and then process that many.
#	    #
#	    # Note that more callbacks may get entered
#	    # into that queue as we do so:  We
#	    # deliberately do not process any such
#	    # added callbacks in order to avoid the
#	    # risk of getting into a loop that might
#	    # cycle-starve other computations:
#	    #
#	    loop (number_of_queued_callbacks ())
#	    where
#		fun loop 0 => ();
#
#		    loop i
#			=>
#			{   run_one_callback();
#			    loop (i - 1);
#			};
#		end
#
#		also
#		fun run_one_callback ()
#		    =
#		    {   callback_type = type_of_next_queued_callback ();
#			#
#			if (callback_type == queued_void_callback)
#			    #
#			    callback_id = get_queued_void_callback ();
#
#			    case (imp::get (*session.void_callback_map, callback_id))
#				#
#				THE callback =>  callback ();
#				NULL         =>  (); 
#			    esac;
#
#			elif (callback_type == queued_bool_callback)
#			    #
#			    (get_queued_bool_callback ())
#				->
#			        (callback_id, bool);
#
#			    case (imp::get (*session.bool_callback_map, callback_id))
#				#
#				THE callback =>  callback bool;
#				NULL         =>  (); 
#			    esac;
#
#			elif (callback_type == queued_float_callback)
#			    #
#			    (get_queued_float_callback ())
#				->
#			        (callback_id, float);
#
#			    case (imp::get (*session.float_callback_map, callback_id))
#				#
#				THE callback =>  callback float;
#				NULL         =>  (); 
#			    esac;
#
#			elif (callback_type == queued_button_press_callback)
#			    #
#			    (get_queued_button_press_callback ())
#				->
#			        (callback_id, window, button, x, y, time, modifiers);
#
#
#			    # Args are:
#			    #     window receiving the event
#			    #     button pressed;
#			    #     pointer x-coord;
#			    #     pointer y-coord;
#			    #     event time in milliseconds; and
#			    #     bitbag of modifier keys.
#
#			    args = { window, button, x, y, time, modifiers =>  int_to_modifier_list modifiers };
#
#			    case (imp::get (*session.button_event_callback_map, callback_id))
#				#
#				THE callback =>  callback args;
#				NULL         =>  (); 
#			    esac;
#
#			elif (callback_type == queued_key_press_callback)
#			    #
#			    (get_queued_key_press_callback ())
#				->
#			        (callback_id, key, keycode, time, modifiers);
#
#
#			    # Args are:
#			    #     key;
#			    #     keycode;
#			    #     millisecond time;
#			    #     modifiers.
#
#			    args = { key, keycode, time, modifiers => int_to_modifier_list modifiers };
#
#			    case (imp::get (*session.key_event_callback_map, callback_id))
#				#
#				THE callback =>  callback args;
#				NULL         =>  (); 
#			    esac;
#
#			elif (callback_type == queued_motion_notify_callback)
#			    #
#			    (get_queued_motion_notify_callback())
#				->
#			        (callback_id, window, time, x, y, modifiers, is_hint);
#
#
#			    # Args are:
#			    #     window which received the event;
#			    #     millisecond-accurate sample time;
#			    #     pointer x-coord; and
#			    #     pointer y-coord.
#
#			    args = { window,
#				     time,
#				     x,
#				     y,
#				     modifiers =>  int_to_modifier_list  modifiers,
#				     is_hint
#				   };
#
#			    case (imp::get (*session.motion_event_callback_map, callback_id))
#				#
#				THE callback =>  callback args;
#				NULL         =>  (); 
#			    esac;
#
#			elif (callback_type == queued_expose_callback)
#			    #
#			    (get_queued_expose_callback ())
#				->
#			        (callback_id, window, count, x, y, wide, high);
#
#
#			    # 'count' is count of following expose events.
#
#			    args = { window, count, x, y, wide, high };
#
#			    case (imp::get (*session.expose_event_callback_map, callback_id))
#				#
#				THE callback =>  callback args;
#				NULL         =>  (); 
#			    esac;
#
#
#			elif (callback_type == queued_configure_callback)
#			    #
#			    (get_queued_configure_callback ())
#				->
#			        (callback_id, window, x, y, wide, high);
#
#			    args = { window, x, y, wide, high };
#
#			    case (imp::get (*session.configure_event_callback_map, callback_id))
#				#
#				THE callback =>  callback args;
#				NULL         =>  (); 
#			    esac;
#
#			else
#			    raise exception DIE (sprintf "run_one_callback: Internal error: unsupported callback_type %d" callback_type);
#			fi;
#		    };			 	# fun run_one_callback
#	    end;					# where
#


    #################################################################################################
    # The following stuff gets built from
    #     build-a: plain-fn
    #     fn-name:
    #     fn-type:
    #     libcall:
    # paragraphs in
    #     src/opt/ncurses/etc/ncurses-construction.plan
    # via logic in
    #     src/lib/make-library-glue/make-library-glue.pkg
    # viz:
    #     build_plain_fn
    #  -> build_fun_definition_for_'xxx_client_driver_for_library_in_main_process_pkg'
    #  -> to_xxx_client_driver_for_library_in_main_process_pkg
    # 
    # Do not edit this or following lines --- they are autobuilt.  (patchname="body")

    #                        Session -> Void                                                  # ncurses-client.api type
    my print_hello_world:   (Session) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "print_hello_world" };


    #                (Session, Int) -> Int                                                    # ncurses-client.api type
    my negate_int:   (Session, Int) -> Int
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "negate_int" };


    #                  (Session, Float) -> Float                                              # ncurses-client.api type
    my negate_float:   (Session, Float) -> Float
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "negate_float" };


    #                    (Session, Bool) -> Bool                                              # ncurses-client.api type
    my negate_boolean:   (Session, Bool) -> Bool
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "negate_boolean" };


    #           (Session, Int) -> Void                                                        # ncurses-client.api type
    my addch:   (Session, Int) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "addch" };


    #             Session -> Void                                                             # ncurses-client.api type
    my cbreak:   (Session) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "cbreak" };


    #             Session -> Void                                                             # ncurses-client.api type
    my endwin:   (Session) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "endwin" };


    #            Session -> Int                                                               # ncurses-client.api type
    my getch:   (Session) -> Int
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "getch" };


    #                 Session -> Bool                                                         # ncurses-client.api type
    my has_colors:   (Session) -> Bool
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "has_colors" };


    #              Session -> Void                                                            # ncurses-client.api type
    my initscr:   (Session) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "initscr" };


    #           { session: Session, x: Int, y: Int } -> Void                                  # ncurses-client.api type
    my move:   (Session, Int, Int) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "move" };


    #         Session -> Void                                                                 # ncurses-client.api type
    my nl:   (Session) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "nl" };


    #             Session -> Void                                                             # ncurses-client.api type
    my noecho:   (Session) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "noecho" };


    #           Session -> Void                                                               # ncurses-client.api type
    my nonl:   (Session) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "nonl" };


    #              Session -> Void                                                            # ncurses-client.api type
    my refresh:   (Session) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "refresh" };


    #                  Session -> Void                                                        # ncurses-client.api type
    my start_color:   (Session) -> Void
        =
        ci::find_c_function { lib_name => "ncurses", fun_name => "start_color" };

    # Do not edit this or preceding lines --- they are autobuilt.
    #################################################################################################

	#
	fun make_session  callback_map
	    =
	    {   session = { callback_map };							# At the moment we actually have no per-session state of our own, just the callback maps from our client.
		#
		init ();

		session;
	    };



    };
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(my \\)"			 		 #
# End:									 #
##########################################################################



## Code by Jeff Prothero: Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
