# ncurses-client-g.pkg
#
# Here we handle the low-level Ncurses-binding functionality
# common to our Ncurses-in-main-process and Ncurses-in-subprocess
# implementations;  the functionality specific to those two
# is handled by ncurses_client_driver_for_library_in_main_process and ncurses_client_driver_for_library_in_c_subprocess.			# ncurses_client_driver_for_library_in_main_process		is from   src/opt/ncurses/src/ncurses-client-driver-for-library-in-main-process.pkg
#																		# ncurses_client_driver_for_library_in_c_subprocess		is from   src/opt/ncurses/src/ncurses-client-driver-for-library-in-c-subprocess.pkg

# Compiled by:
#     src/lib/std/standard.lib

# Autogeneration of parts of this file done by:
#
#     src/opt/ncurses/sh/make-ncurses-glue
# per src/opt/ncurses/etc/ncurses-construction.plan

# Unit tests in:
#     src/opt/ncurses/src/test/ncurses-client-for-library-in-c-subprocess-unit-test.pkg

# The other end of the pipe is implemented in:
#
#     src/opt/ncurses/c/in-sub/mythryl-ncurses-library-in-c-subprocess.c
#
# See the comments in that file for a description
# of the pipe protocol used.



###		"Each design decision constrains all subsequent
###              design decisions, making each successive design
###              problem harder to solve.  Tackle the hardest
###              design problems first, when you have the greatest
###              freedom to maneuver."


# This generic is invoked once each for
# our Ncurses-in-main-processs
# and Ncurses-in-subprocess
# implementations:
#
#     src/opt/ncurses/src/ncurses-client-for-library-in-main-process.pkg
#     src/opt/ncurses/src/ncurses-client-for-library-in-c-subprocess.pkg
#
#
generic package   ncurses_client_g   (
    #             ===== 
    drv: Ncurses_Client_Driver															# Ncurses_Client_Driver						is from   src/opt/ncurses/src/ncurses-client-driver.api
	#
	# When called by ncurses-client-for-library-in-main-process.pkg	drv == ncurses_client_driver_for_library_in_main_process		# ncurses_client_driver_for_library_in_main_process		is from   src/opt/ncurses/src/ncurses-client-driver-for-library-in-main-process.pkg
	# When called by ncurses-client-for-library-in-c-subprocess.pkg	drv == ncurses_client_driver_for_library_in_c_subprocess		# ncurses_client_driver_for_library_in_c_subprocess		is from   src/opt/ncurses/src/ncurses-client-driver-for-library-in-c-subprocess.pkg
)
:
Ncurses_Client																	# Ncurses_Client						is from   src/opt/ncurses/src/ncurses-client.api
{


    #################################################################################################
    # The following stuff gets copied directly from the
    #     build-a: mythryl-type
    # section of
    #     src/opt/ncurses/etc/ncurses-construction.plan
    # via handle_fieldset -> build_mythryl_type -> to_xxx_client_api_types in
    #     src/lib/make-library-glue/make-library-glue.pkg
    # This section is duplicated in
    #     src/opt/ncurses/src/ncurses-client.api
    # Do not edit this or following lines --- they are autobuilt.  (patchname="types")
    # Do not edit this or preceding lines --- they are autobuilt.
    #################################################################################################

    package int_map =  int_red_black_map;

    Session = { subsession:   drv::Session,
		#
		callback_map:   { void:			Ref( int_map::Map( Void			-> Void )),
				  bool:			Ref( int_map::Map( Bool			-> Void )),
				  float:		Ref( int_map::Map( Float		-> Void ))
				}
				#
				# The callback maps let us find the appropriate
				# Mythryl callback function to run when our Ncurses
				# server process says to run callback #127 or such.
				#
				# To keep the typechecker happy we need a separate
				# map for each callback type.
	      };



    stipulate


    herein





	#
        fun make_session []
		=>
		{   callback_map  =   { void		    =>  REF (int_map::empty:   int_map::Map( Void              -> Void )),
					bool		    =>  REF (int_map::empty:   int_map::Map( Bool              -> Void )),
					float		    =>  REF (int_map::empty:   int_map::Map( Float             -> Void ))
				      };

		    subsession =  drv::make_session  callback_map;

		    session = { subsession,
				callback_map
			      };

		    session;
		};

            make_session (arg ! args)
		=>
		raise exception DIE "make_session: args not supported yet.";
	end;



    #################################################################################################
    # The following stuff gets built from paragraphs in
    #     src/opt/ncurses/etc/ncurses-construction.plan
    # via logic in
    #     src/lib/make-library-glue/make-library-glue.pkg
    # viz:
    #     build_plain_fn -> build_plain_fun_for_'xxx_client_g_pkg' -> to_xxx_client_g_pkg_funs
    #         build-a: plain-fn
    #         fn-name:
    #         fn-type:
    #         libcall:
    #     build_callback_fun_for_'xxx_client_g_pkg' -> to_xxx_client_g_pkg_funs
    #        fn_name, callback_type, hand-built code can be supplied via code:
    #     build_mythryl_code -> to_xxx_client_g_pkg_funs
    #        build-a: mythryl-code
    #        code:
    # Do not edit this or following lines --- they are autobuilt.  (patchname="functions")

        #
        fun print_hello_world (session: Session)
            =
            drv::print_hello_world  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun negate_int (session: Session, i0)
            =
            drv::negate_int (session.subsession, i0);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun negate_float (session: Session, f0)
            =
            drv::negate_float (session.subsession, f0);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun negate_boolean (session: Session, b0)
            =
            drv::negate_boolean (session.subsession, b0);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun addch (session: Session, i0)
            =
            drv::addch (session.subsession, i0);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun cbreak (session: Session)
            =
            drv::cbreak  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun endwin (session: Session)
            =
            drv::endwin  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun getch (session: Session)
            =
            drv::getch  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun has_colors (session: Session)
            =
            drv::has_colors  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun initscr (session: Session)
            =
            drv::initscr  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun move { session: Session, y, x }
            =
            drv::move (session.subsession, y, x);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun nl (session: Session)
            =
            drv::nl  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun noecho (session: Session)
            =
            drv::noecho  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun nonl (session: Session)
            =
            drv::nonl  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun refresh (session: Session)
            =
            drv::refresh  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.


        #
        fun start_color (session: Session)
            =
            drv::start_color  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/ncurses/etc/ncurses-construction.plan.

    # Do not edit this or preceding lines --- they are autobuilt.
    #################################################################################################

    end;
};




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Code by Jeff Prothero: Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
