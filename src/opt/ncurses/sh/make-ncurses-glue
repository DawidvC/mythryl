#!/usr/bin/mythryl

# To minimize code redundancy and consequent
# reliability and maintenance headaches in
#
#     src/opt/ncurses/c/in-sub/mythryl-ncurses-library-in-c-subprocess.c
#
# we synthesize simple repetitive functions
# directly from their
#
#     src/opt/ncurses/src/ncurses-client.api
#
# type declarations.
#
# The specifications for these functions and
# related declarations and docs are in
#
#     src/opt/ncurses/etc/ncurses-construction.plan
#
# (See top-of-file comments there.)
#
# We are invoked by doing
# 
#     make ncurses-glue
#
# At the top level.  This is not done as part
# of a normal build;  I run it by hand after
# I've updated (say) ncurses-construction.plan

stipulate
    package fil =  file__premicrothread;							# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
    package lms =  list_mergesort;								# list_mergesort		is from   src/lib/src/list-mergesort.pkg
    package iow =  io_wait_hostthread;								# io_wait_hostthread		is from   src/lib/std/src/hostthread/io-wait-hostthread.pkg
    package mlg =  make_library_glue;								# make_library_glue		is from   src/lib/make-library-glue/make-library-glue.pkg
    #
    package paf =  patchfile;									# patchfile			is from   src/lib/make-library-glue/patchfile.pkg
    package pfj =  planfile_junk;								# planfile_junk			is from   src/lib/make-library-glue/planfile-junk.pkg
    package pfs =  patchfiles;									# patchfiles			is from   src/lib/make-library-glue/patchfile.pkg
    package plf =  planfile;									# planfile			is from   src/lib/make-library-glue/planfile.pkg
    #
    Pfs		=  pfs::Patchfiles;
herein

{    
# iow::test "make-ncurses-glue: testt/AAA";

    mlg::make_library_glue
	{
	  lib_name						=>  "ncurses",									# Must match the   #define CLIB_NAME "ncurses"   line in   src/opt/ncurses/c/in-main/libmythryl-ncurses.c
	  construction_plan					=>  "src/opt/ncurses/etc/ncurses-construction.plan",
	  xxx_client_api					=>  "src/opt/ncurses/src/ncurses-client.api",
	  xxx_client_g_pkg					=>  "src/opt/ncurses/src/ncurses-client-g.pkg",
	  xxx_client_driver_api					=>  "src/opt/ncurses/src/ncurses-client-driver.api",
	  xxx_client_driver_for_library_in_c_subprocess_pkg	=>  "src/opt/ncurses/src/ncurses-client-driver-for-library-in-c-subprocess.pkg",
	  xxx_client_driver_for_library_in_main_process_pkg	=>  "src/opt/ncurses/src/ncurses-client-driver-for-library-in-main-process.pkg",
	  mythryl_xxx_library_in_c_subprocess_c			=>  "src/opt/ncurses/c/in-sub/mythryl-ncurses-library-in-c-subprocess.c",
	  libmythryl_xxx_c					=>  "src/opt/ncurses/c/in-main/libmythryl-ncurses.c",
	  section_libref_xxx_tex				=>  "src/opt/ncurses/doc/tex/section-libref-ncurses.tex"
	}

	[																	# List(Paragraph_Definition(mlg::Builder_Stuff))
	  callback_function__definition
	]

	[																	# Plugins that extend base mlg functionality.
	]
	where

	    fun build_callback_function { patchfiles, paragraph: plf::Paragraph, x }
		=
		# We will be called whenever
		#     handle_fieldset()  
		# in
		#     src/lib/make-library-glue/make-library-glue.pkg
		# encounters a paragraph in
		#     src/opt/ncurses/etc/ncurses-construction.plan
		# containing the line
		#     do: callback_fn
		#
		# The 'callback_fn'  do: type is unsupported by
		# make-library-glue.pkg proper, which only supports
		#
		#     do: plain-fn
		#     do: fn-doc
		#     do: mythryl-type
		#     do: mythryl-code
		#
		# Consequently we bear full responsibility for generating
		# all required code in all required patchpoints in all
		# relevant asourcefiles.  Our 'r' argument gives us all
		# required resources to do so.
		#
		{
		    pfs      =  patchfiles;
		    fields   =  paragraph.fields;

		    fn_name  =  x.get_field (fields, "fn-name");		# "set_foo_callback"
		    fn_type  =  x.get_field (fields, "fn-type");		# "Session -> Foo_Callback -> Void"

		    callback_name = case (regex::find_first_match_to_ith_group 1 ./^set_(.*)_callback$/  fn_name)
					THE x =>    x;
					NULL  =>    die_x(sprintf "%s: callback_fn fn-name '%s' does not have form 'set_foo_callback' for any 'foo'\n"
								 (x.get_field_location (fields, "fn-name"))
								 fn_name
							);
				    esac;

		    callback_type		# E.g., "Void_Callback"
			=
			case (regex::find_first_match_to_ith_group 1 ./^Session\s+->\s+(\S+)\s+->\s+Void$/ fn_type)
			    THE x =>    x;
			    NULL  =>    die_x(sprintf "%s: callback_fn fn-type '%s' does not have form 'Session -> Widget -> Foo_Callback -> Void' for any 'foo'\n"
						     (x.get_field_location (fields, "fn-type"))
						     fn_type
					    );
			esac;

		    callback_name =   regex::replace_all  ./'/  "2"  callback_name;		# Primes don't work in C!

		    c_fn_name =  "set_"  +  callback_name  +  "_callback";

		    pfs = build_set_callback_fn_for_'mythryl_xxx_library_in_c_subprocess_c'  pfs  (x, fields, callback_name          );
		    pfs = build_set_callback_fn_for_'libmythryl_xxx_c'                       pfs  (x, fields, callback_name, fn_type );

		    pfs = x.build_table_entry_for_'libmythryl_xxx_c'                         pfs  (c_fn_name, fn_type);
		    pfs = x.build_trie_entry_for_'mythryl_xxx_library_in_c_subprocess_c'     pfs  (c_fn_name );

		    url =   case (x.maybe_get_field (fields, "url"))
				#
				THE field =>  field;
				NULL      =>  "http://library.gnome.org/devel/gobject/unstable/gobject-Signals.html#g-signal-connect";
			    esac;

		    api_doc =   case (x.maybe_get_field (fields,"api-doc"))  THE field =>  field;  NULL =>  "";   esac;

		    pfs = x.note__section_libref_xxx_tex__entry  pfs  { fields, fn_name, url, fn_type, libcall => "g_signal_connect" };

		    libcall     = "";			# Give arg counts and types to the following two functions.
		    result_type = "Int";		# Give result information   to the following two functions.

		    pfs = x.build_fun_declaration_for_'xxx_client_driver_api'				     pfs  { c_fn_name, libcall, result_type };
		    pfs = x.build_fun_definition_for_'xxx_client_driver_for_library_in_c_subprocess_pkg'     pfs  { c_fn_name, libcall, result_type };

		    pfs = x.build_fun_declaration_for_'xxx_client_api'					     pfs  { fn_name, fn_type, api_doc };
		    pfs = x.build_fun_definition_for_'xxx_client_driver_for_library_in_main_process_pkg'     pfs  { fn_name, c_fn_name, fn_type, libcall, result_type };

		    pfs = build_callback_fun_for_'xxx_client_g_pkg'					     pfs  (x, fields, fn_name, callback_type);

		    pfs;
		}
		where
		    # Synthesize a function for   xxx-client-g.pkg  like
		    # 
		    #	 #
		    #	 fun set_clicked_callback  s c = set_void_callback (s, c, drv::set_clicked_callback s.subsession);	# Handle "clicked" signal.
		    #
		    fun build_callback_fun_for_'xxx_client_g_pkg'
			#
			(pfs: Pfs)
			#
			( r:	    mlg::Builder_Stuff,
			  fields:   mlg::Fields,
			  fn_name,			# E.g. "set_foo_callback"
			  callback_type			# E.g. "Void_Callback"
			)
			=
			case (x.maybe_get_field (fields, "cg-funs"))
			    #
			    THE field
				=>
				{   to  =  x.to_xxx_client_g_pkg_funs;
				    #
				    pfs = to pfs  "        #\n";
				    pfs = to pfs  field;
				    pfs = to pfs  "            \n";
				    pfs = to pfs  "            # Above function handbuilt via src/lib/make-library-glue/make-library-glue.pkg:  build_callback_fun_for_'xxx_client_g_pkg'.\n";
				    pfs = to pfs  "\n";

				    x.callback_fns_handbuilt_for_'xxx_client_g_pkg'
					:=
					*x.callback_fns_handbuilt_for_'xxx_client_g_pkg' + 1;

				    pfs;
				};

			    NULL =>
				{   signal_name =   case (regex::find_first_match_to_ith_group 1 ./^set_(.*)_callback$/  fn_name)
							THE x => x;
							NULL  => die_x(sprintf "build_callback_fun_for_'xxx_client_g_pkg': fn_name '%s' does not have form set_foo_callback for any foo\n" fn_name);
						    esac;

				    note_callback_fn = "note_" + (tolower callback_type);		# "Void_Callback" -> "note_void_callback"

				    pfs =   x.to_xxx_client_g_pkg_funs
						pfs
						(    sprintf "    fun %-36s s c = %-28s (s, c, drv::%-36s s.subsession);\t# Handle '%s' signal\n"
							     fn_name
							     note_callback_fn
							     fn_name
							     signal_name
						);

				    x.callback_fns_handbuilt_for_'xxx_client_g_pkg'
					:=
					*x.callback_fns_handbuilt_for_'xxx_client_g_pkg'
					+ 1;

				    pfs;
				};
			esac;



		    # Synthesize a function for   mythryl-xxx-library-in-c-subprocess.c  like
		    #
		    #    static void
		    #    do__set_foo_callback( int argc, unsigned char** argv )
		    #    {
		    #	check_argc( "do__foo_callback", 1, argc );
		    #
		    #	{   GtkWidget* widget    =  widget_arg( argc, argv, 0 );
		    #
		    #	    int id   =  find_free_callback_id ();
		    #
		    #	    g_signal_connect( G_OBJECT(widget), "foo", G_CALLBACK( run_foo_callback ), (void*)id );
		    #
		    #	    printf(               "set_foo_callback%d\n", id );	fflush( stdout );
		    #	    fprintf(log_fd, "SENT: set_foo_callback%d\n", id );	fflush( log_fd );
		    #	}
		    #    }
		    #
		    fun build_set_callback_fn_for_'mythryl_xxx_library_in_c_subprocess_c'  (pfs: pfs::Patchfiles)  (x: mlg::Builder_Stuff, fields: mlg::Fields, callback_name)
			=
			{   to  =  x.to_mythryl_xxx_library_in_c_subprocess_c_funs;
			    #
			    pfs = to pfs     "\n";
			    pfs = to pfs     "static void\n";
			    pfs = to pfs    ("do__set_" + callback_name + "_callback( int argc, unsigned char** argv )\n");
			    pfs = to pfs     "{\n";
			    pfs = to pfs    ("    check_argc( \"do__set_" + callback_name + "_callback\", 0, argc );\n");
			    pfs = to pfs     "\n";
			    pfs = to pfs     "    int id   =  find_free_callback_id ();\n";
			    pfs = to pfs    ("    " + callback_name + "_callback_number =  id;\n");
			    pfs = to pfs     "\n";
			    pfs = to pfs    ("    glfwSetWindowSizeCallback( run_" + callback_name + "_callback );\n");
			    pfs = to pfs     "\n";
			    pfs = to pfs    ("     printf(              \"set_" + callback_name + "_callback%d\\n\", id );      fflush( stdout );\n");
			    pfs = to pfs    ("    fprintf(log_fd, \"SENT: set_" + callback_name + "_callback%d\\n\", id );      fflush( log_fd );\n");
			    pfs = to pfs     "}\n";
			    pfs = to pfs    ("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  build_set_callback_fn_for_'mythryl_xxx_library_in_c_subprocess_c'  per  " + x.path.construction_plan + ".*/\n");

			    x.custom_fns_codebuilt_for_'mythryl_xxx_library_in_c_subprocess_c'
				:=
				*x.custom_fns_codebuilt_for_'mythryl_xxx_library_in_c_subprocess_c'
				+ 1;

			    pfs;
			};

		    # Synthesize a function for   libmythryl-xxx.c  like
		    #
		    #   /* do__set_foo_callback : Session -> Widget -> Void_Callback -> Void;
		    #    */
		    #   static Val do__set_foo_callback (Task* task, Val arg)
		    #   {
		    #       GtkWidget*        w0 =    (GtkWidget*)      widget[ GET_TUPLE_SLOT_AS_INT( arg, 1) ];	// '1' because 'arg' is a duple (session, widget).
		    #
		    #       int id   =  find_free_callback_id ();
		    #
		    #       g_signal_connect( G_OBJECT(widget), "clicked", G_CALLBACK( run_clicked_callback ), (void*)id );
		    #
		    #       return TAGGED_INT_FROM_C_INT(id);
		    #   }
		    #    
		    fun build_set_callback_fn_for_'libmythryl_xxx_c'
			#
			(pfs: Pfs)
			#
			( r:      mlg::Builder_Stuff,
			  fields: mlg::Fields,
			  callback_name,
			  fn_type			# E.g., "Session -> Window_Size_Callback -> Void".
			)
			=
			{   to  =  x.to_libmythryl_xxx_c_funs;
			    #
			    pfs = to pfs     "\n";
			    pfs = to pfs     "\n";
			    pfs = to pfs    ("/*  do__set_" + callback_name + "_callback : " + fn_type + "\n");
			    pfs = to pfs     " */\n";
			    pfs = to pfs    ("static Val   do__set_" + callback_name + "_callback (Task* task, Val arg)\n");
			    pfs = to pfs     "{\n";
			    pfs = to pfs      "\n";
			    pfs = to pfs     "    int id   =  find_free_callback_id ();\n";
			    pfs = to pfs    ("    " + callback_name + "_callback_number =  id;\n");
			    pfs = to pfs     "\n";
			    pfs = to pfs    ("    glfwSetWindowSizeCallback( run_" + callback_name + "_callback );\n");
			    pfs = to pfs     "\n";
			    pfs = to pfs     "    return TAGGED_INT_FROM_C_INT(id);\n";
			    pfs = to pfs      "}\n";
			    pfs = to pfs    ("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  build_set_callback_fn_for_'libmythryl_xxx_c'  per  " + x.path.construction_plan + ".*/\n");
			    pfs = to pfs      "\n";
			    pfs = to pfs      "\n";

			    x.custom_fns_codebuilt_for_'libmythryl_xxx_c'
				:=
				*x.custom_fns_codebuilt_for_'libmythryl_xxx_c'
				+ 1;

			    pfs;
			};
		end;


	    callback_function__definition
		=
		{ name   => "callback_fn",
		  do     =>  build_callback_function,
		  fields => [ { fieldname => "fn-name",  traits => [] },
			      { fieldname => "fn-type",  traits => [] },
			      { fieldname => "api-doc",  traits => [ plf::OPTIONAL ] },
			      { fieldname => "url",      traits => [ plf::OPTIONAL ] },
			      { fieldname => "cg-funs",  traits => [ plf::OPTIONAL, plf::DO_NOT_TRIM_WHITESPACE, plf::ALLOW_MULTIPLE_LINES ] }
			    ]
		};
	end;


    exit_x(0);
};
end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################



## Code by Jeff Prothero: Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
