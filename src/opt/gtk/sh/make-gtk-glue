#!/usr/bin/mythryl

# To minimize code redundancy and consequent
# reliability and maintenance headaches in
#
#     src/opt/gtk/c/in-sub/mythryl-gtk-library-in-c-subprocess.c
#
# we synthesize simple repetitive functions
# directly from their
#
#     src/opt/gtk/src/gtk-client.api
#
# type declarations.
#
# The specifications for these functions and
# related declarations and docs are in
#
#     src/opt/gtk/etc/gtk-construction.plan
#
# (See top-of-file comments there.)
#
# We are invoked by doing
# 
#     make gtk-glue
#
# At the top level.  This is not done as part
# of a normal build;  I run it by hand after
# I've updated (say) gtk-construction.plan

stipulate
    package fil =  file__premicrothread;												# file__premicrothread		is from   src/lib/std/src/posix/file--premicrothread.pkg
    package lms =  list_mergesort;													# list_mergesort		is from   src/lib/src/list-mergesort.pkg
    package iow =  io_wait_hostthread;													# io_wait_hostthread		is from   src/lib/std/src/hostthread/io-wait-hostthread.pkg
    package mlg =  make_library_glue;													# make_library_glue		is from   src/lib/make-library-glue/make-library-glue.pkg
    #
    package paf =  patchfile;														# patchfile			is from   src/lib/make-library-glue/patchfile.pkg
    package pfj =  planfile_junk;													# planfile_junk			is from   src/lib/make-library-glue/planfile-junk.pkg
    package pfs =  patchfiles;														# patchfiles			is from   src/lib/make-library-glue/patchfile.pkg
    package plf =  planfile;														# planfile			is from   src/lib/make-library-glue/planfile.pkg
    #
    Pfs		=  pfs::Patchfiles;
herein


# iow::test "make-gtk-glue: testt/AAA";

    mlg::make_library_glue
	{
	  lib_name						=>  "gtk",								# Must match the   #define CLIB_NAME "gtk"   line in   src/opt/gtk/c/in-main/libmythryl-gtk.c
	  construction_plan					=>  "src/opt/gtk/etc/gtk-construction.plan",
	  xxx_client_api					=>  "src/opt/gtk/src/gtk-client.api",
	  xxx_client_g_pkg					=>  "src/opt/gtk/src/gtk-client-g.pkg",
	  xxx_client_driver_api					=>  "src/opt/gtk/src/gtk-client-driver.api",
	  xxx_client_driver_for_library_in_c_subprocess_pkg	=>  "src/opt/gtk/src/gtk-client-driver-for-library-in-c-subprocess.pkg",
	  xxx_client_driver_for_library_in_main_process_pkg	=>  "src/opt/gtk/src/gtk-client-driver-for-library-in-main-process.pkg",
	  mythryl_xxx_library_in_c_subprocess_c			=>  "src/opt/gtk/c/in-sub/mythryl-gtk-library-in-c-subprocess.c",
	  libmythryl_xxx_c					=>  "src/opt/gtk/c/in-main/libmythryl-gtk.c",
	  section_libref_xxx_tex				=>  "src/opt/gtk/doc/tex/section-libref-gtk.tex"
	}

	[																# List(Paragraph_Definition(mlg::Builder_Stuff))
	  callback_function__definition
	]

	[																# Plugins that extend base mlg functionality.
	  mlg::LIBCALL_TO_ARGS_FN  libcall_to_args_fn,
	  #
	  mlg::BUILD_ARG_LOAD_FOR_'MYTHRYL_XXX_LIBRARY_IN_C_SUBPROCESS' ("w", build_arg_load_for_'mythryl_xxx_library_in_c_subprocess_c'),
	  mlg::BUILD_ARG_LOAD_FOR_'LIBMYTHRYL_XXX_C'                    ("w", build_arg_load_for_'libmythryl_xxx_c'),
	  #
	  mlg::HANDLE_NONSTANDARD_RESULT_TYPE_FOR__BUILD_PLAIN_FUN_FOR__'MYTHRYL_XXX_LIBRARY_IN_C_SUBPROCESS_C' ("new Widget", handle_'new_widget'_result_type_for__build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'),
	  mlg::HANDLE_NONSTANDARD_RESULT_TYPE_FOR__BUILD_PLAIN_FUN_FOR__'MYTHRYL_XXX_LIBRARY_IN_C_SUBPROCESS_C' (    "Widget",     handle_'widget'_result_type_for__build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'),
	  #
	  mlg::HANDLE_NONSTANDARD_RESULT_TYPE_FOR__BUILD_PLAIN_FUN_FOR__'LIBMYTHRYL_XXX_C'                      ("new Widget", handle_'new_widget'_result_type_for__build_plain_fun_for_'libmythryl_xxx_c'),
	  mlg::HANDLE_NONSTANDARD_RESULT_TYPE_FOR__BUILD_PLAIN_FUN_FOR__'LIBMYTHRYL_XXX_C'                      (    "Widget",     handle_'widget'_result_type_for__build_plain_fun_for_'libmythryl_xxx_c'),
	  #
	  mlg::FIGURE_FUNCTION_RESULT_TYPE						(   "Widget", figure_function_result_type),
	  #
	  mlg::DO_COMMAND_FOR_'XXX_CLIENT_DRIVER_FOR_LIBRARY_IN_C_SUBPROCESS_PKG' ("new Widget", "do_int_command"),			# See   build_fun_definition_for_'xxx_client_driver_for_library_in_c_subprocess_pkg'	in   src/lib/make-library-glue/make-library-glue.pkg
	  mlg::DO_COMMAND_FOR_'XXX_CLIENT_DRIVER_FOR_LIBRARY_IN_C_SUBPROCESS_PKG' (    "Widget", "do_int_command"),			# "                                                                                "
	  #
	  mlg::DO_COMMAND_TO_STRING_FN ("w", "widget_to_string"),									# See   write_do_command								in   src/lib/make-library-glue/make-library-glue.pkg
	  #
	  mlg::CLIENT_DRIVER_ARG_TYPE    ("w",          "Int/*Widget*/"),								# See   xxx_client_driver_api_type							in   src/lib/make-library-glue/make-library-glue.pkg
	  mlg::CLIENT_DRIVER_RESULT_TYPE ("new Widget", "Int /*new Widget*/"),								# See   xxx_client_driver_api_type							in   src/lib/make-library-glue/make-library-glue.pkg
	  mlg::CLIENT_DRIVER_RESULT_TYPE (    "Widget", "Int /*Widget*/")								# See   xxx_client_driver_api_type							in   src/lib/make-library-glue/make-library-glue.pkg
	]
	where
	    # The context here is that
	    #
	    #     build_plain_function
	    # in
	    #     src/lib/make-library-glue/make-library-glue.pkg
	    #
	    # has called   figure_function_result_type
	    #
	    # to compute the result type of the function.
	    # This can be manually specified via a
	    #
	    #     result: Foo
	    #
	    # line in (say)   src/opt/gtk/etc/gtk-construction.plan
	    #
	    # but is usually resolved to one of
	    #
	    #	"Bool"
	    #	"Float"
	    #	"Int"
	    #	"String"
	    #	"Void"
	    #
	    # just by picking off the final " -> Foo" clause in the fieldset's
	    #
	    #     fn-type:  Zot -> Foo
	    #
	    # line.  However when the type is unrecognized it is handed off to us.
	    # In the case of 'widget' we need to generate different code for a
	    # newly constructed widget vs a pre-existing widget -- see below fns
	    #
	    #    handle_'new_widget'_result_type_for__build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'
	    #    handle_'widget'_result_type_for__build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'
	    #    handle_'new_widget'_result_type_for__build_plain_fun_for_'libmythryl_xxx_c'
	    #    handle_'widget'_result_type_for__build_plain_fun_for_'libmythryl_xxx_c'
	    #
	    # Here we make the required new/old widget distinction
	    # by keying on the 'make_' prefix to the fn_name:
	    #
	    fun figure_function_result_type  fn_name
		=
		if (fn_name =~ ./^make_/)   "new Widget";
		else                            "Widget";
		fi;


	    # The context for the next two fns is that
	    #     build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'
	    # in
	    #     src/lib/make-library-glue/make-library-glue.pkg
	    #
	    # is building a
	    #
	    #     src/opt/gtk/c/in-sub/mythryl-gtk-library-in-c-subprocess.c
	    #
	    # function like	
	    #
	    #	static void
	    #	do__make_label( int argc, unsigned char** argv )
	    #	{
	    #	    check_argc( "do__make_label", 1, argc );
	    #	    {
	    #		char*             s0 =                      string_arg( argc, argv, 0 );
	    #
	    #		int slot = find_free_widget_slot ();
	    #
	    #		widget[slot] = gtk_label_new( /*label*/s0 );
	    #
	    #		 printf(             "make_label%d\n", slot);      fflush( stdout );
	    #		fprintf(log_fd, "SENT:make_label%d\n", slot);      fflush( log_fd );
	    #	    }
	    #	}
	    #
	    # or
	    #	static void
	    #	do__get_white_graphics_context( int argc, unsigned char** argv )
	    #	{
	    #	    check_argc( "do__get_white_graphics_context", 1, argc );
	    #
	    #	    {
	    #		GtkWidget*        w0 =    (GtkWidget*)      widget_arg( argc, argv, 0 );
	    #
	    #		GtkWidget* widget = (GtkWidget*) /*widget*/w0->style->white_gc;
	    #
	    #		int slot = get_widget_id( widget );
	    #
	    #		 printf(              "get_white_graphics_context%d\n", slot);      fflush( stdout );
	    #		fprintf(log_fd, "SENT: get_white_graphics_context%d\n", slot);      fflush( log_fd );
	    #	    }
	    #	}
	    #
	    # but has had to punt to us because the function's return type
	    # is something other than the four standard preprogrammed ones:
	    #
	    #     Void
	    #     Bool
	    #     Float
	    #     Int
	    #
	    fun handle_'new_widget'_result_type_for__build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'  (pfs: Pfs)  { fn_name,  libcall,  libcall_more, to_mythryl_xxx_library_in_c_subprocess_c_funs, path: mlg::Paths}
		=
		{   to =  to_mythryl_xxx_library_in_c_subprocess_c_funs;
		     #

		    pfs = to pfs    "\n";
		    pfs = to pfs    "    int slot = find_free_widget_slot ();\n";
		    pfs = to pfs    "\n";
		    pfs = to pfs   ("    widget[slot] = " + libcall + ";\n");		pfs = if (libcall_more != "")  to pfs libcall_more;  else pfs; fi;
		    pfs = to pfs    "\n";
		    pfs = to pfs   ("     printf(             \"" + fn_name + "%d\\n\", slot);      fflush( stdout );\n");
		    pfs = to pfs   ("    fprintf(log_fd, \"SENT:" + fn_name + "%d\\n\", slot);      fflush( log_fd );\n");
		    pfs = to pfs    "}\n";
		    pfs = to pfs   ("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'  per  " + path.construction_plan + ". */\n");

		    pfs;
		};

	    fun handle_'widget'_result_type_for__build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'  (pfs: Pfs)  { fn_name,  libcall,  libcall_more, to_mythryl_xxx_library_in_c_subprocess_c_funs, path: mlg::Paths }
		=
		{   to =  to_mythryl_xxx_library_in_c_subprocess_c_funs;
		    #
		    pfs = to pfs    "\n";
		    pfs = to pfs   ("    GtkWidget* widget = (GtkWidget*) " + libcall + ";\n");
		    pfs = to pfs    "\n";
		    pfs = to pfs    "    int slot = get_widget_id( widget );\n";	pfs = if (libcall_more != "")  to pfs libcall_more;  else pfs; fi;
		    pfs = to pfs    "\n";
		    pfs = to pfs   ("     printf(              \"" + fn_name + "%d\\n\", slot);      fflush( stdout );\n");
		    pfs = to pfs   ("    fprintf(log_fd, \"SENT: " + fn_name + "%d\\n\", slot);      fflush( log_fd );\n");
		    pfs = to pfs    "}\n";
		    pfs = to pfs   ("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'mythryl_xxx_library_in_c_subprocess_c'  per  " + path.construction_plan + ". */\n");

		    pfs;	
		};



	    # The context for the next two fns is that
	    #     build_plain_fun_for_'libmythryl_xxx_c'
	    # in
	    #     src/lib/make-library-glue/make-library-glue.pkg
	    #
	    # is building a
	    #
	    #     src/opt/gtk/c/in-main/libmythryl-gtk.c
	    #
	    # function like	
	    #
	    #	/* do__make_label
	    #	 *
	    #	 * gtk-client.api        type:   (Session, String) -> Widget
	    #	 * gtk-client-driver.api type:   (Session, String) -> Int (*new Widget*)
	    #	 */
	    #	static Val   do__make_label   (Task* task, Val arg)
	    #	{
	    #	    char*             s0 =   HEAP_STRING_AS_C_STRING (GET_TUPLE_SLOT_AS_VAL( arg, 1));
	    #
	    #	    int slot = find_free_widget_slot ();
	    #
	    #	    widget[slot] = gtk_label_new( /*label*/s0 );
	    #
	    #	    return TAGGED_INT_FROM_C_INT(slot);
	    #	}
	    #
	    # or
	    #
	    #	/* do__get_white_graphics_context
	    #	 *
	    #	 * gtk-client.api        type:   (Session, Widget) -> Widget
	    #	 * gtk-client-driver.api type:   (Session, Int(*Widget*)) -> Int (*Widget*)
	    #	 */
	    #	static Val   do__get_white_graphics_context   (Task* task, Val arg)
	    #	{
	    #	    GtkWidget*        w0  =    (GtkWidget*)      widget[ GET_TUPLE_SLOT_AS_INT( arg, 1) ];
	    #
	    #	    GtkWidget* widget = (GtkWidget*) /*widget*/w0->style->white_gc;
	    #
	    #	    int slot = get_widget_id( widget );
	    #
	    #	    return TAGGED_INT_FROM_C_INT(slot);
	    #	}
	    #
	    # but has had to punt to us because the function's return type
	    # is something other than the four standard preprogrammed ones:
	    #
	    #     Void
	    #     Bool
	    #     Float
	    #     Int
	    #
	    fun handle_'new_widget'_result_type_for__build_plain_fun_for_'libmythryl_xxx_c'   (pfs: Pfs)   { fn_name,  libcall,  libcall_more, to_libmythryl_xxx_c_funs, path: mlg::Paths }
		=
		{   to =  to_libmythryl_xxx_c_funs;
		    #
		    pfs = to pfs   "\n";
		    pfs = to pfs   "    int slot = find_free_widget_slot ();\n";
		    pfs = to pfs   "\n";
		    pfs = to pfs  ("    widget[slot] = " + libcall + ";\n");				pfs = if (libcall_more != "")  to pfs libcall_more;  else pfs;  fi;
		    pfs = to pfs   "\n";
		    pfs = to pfs   "    return TAGGED_INT_FROM_C_INT(slot);\n";

		    pfs;
		};

	    fun handle_'widget'_result_type_for__build_plain_fun_for_'libmythryl_xxx_c'    (pfs: Pfs)   { fn_name,  libcall,  libcall_more, to_libmythryl_xxx_c_funs, path: mlg::Paths }
		=
		{   to =  to_libmythryl_xxx_c_funs;
		    #
		    pfs = to pfs   "\n";
		    pfs = to pfs  ("    GtkWidget* widget = (GtkWidget*) " + libcall + ";\n");		pfs = if (libcall_more != "")  to pfs libcall_more;  else pfs;  fi;
		    pfs = to pfs   "\n";
		    pfs = to pfs   "    int slot = get_widget_id( widget );\n";
		    pfs = to pfs   "\n";
		    pfs = to pfs   "    return TAGGED_INT_FROM_C_INT(slot);\n";

		    pfs;
		};



	    fun libcall_to_args_fn  libcall
		=
		# We are called (only) by
		#     count_args
		#     get_nth_arg_type
		#     arg_types_are_all_unique
		# in  
		#     src/lib/make-library-glue/make-library-glue.pkg
		#
		# 'libcall' is from a 'libcall:' line in    src/opt/gtk/etc/gtk-construction.plan
		# looking something like                    libcall: gtk_table_set_row_spacing( GTK_TABLE(/*table*/w0), /*row*/i1, /*spacing*/i2)
		#
		# 'libcall' contains embedded arguments like 'w0', 'i1', 'f2', 'b3', 's4'.
		# They are what we are interested in here;
		# our job is to return a sorted, duplicate-free list of them.
		#
		# The argument letter gives us the argument type:
		#
		#    w == widget
		#    i == int
		#    f == double  (Mythryl "Float")
		#    b == bool
		#    s == string
		#
		# The argument digit gives us the argument order:
		#
		#    0 == first arg
		#    1 == second arg
		#    ...
		#
		# Get list of above args, sorting by
		# trailing digit and dropping duplicates.
		#
		# Our implementation here differs from the
		# default implementation in 
		#
		#     src/lib/make-library-glue/make-library-glue.pkg
		#
		# only by adding support for 'w' ("widget"):
		#
		{    raw_list    =  regex::find_all_matches_to_regex  ./\b[bfisw][0-9]\b/  libcall;
		    #
		    cooked_list =  uniquesort  compare_fn  raw_list;

		    cooked_list;
		}
		where	
		    fun compare_fn (xn, yn)					# Compare "w0" and "b1" as "0" and "1":
			=
			{   xn' = string::extract (xn, 1, NULL);
			    yn' = string::extract (yn, 1, NULL);

			    string::compare (xn', yn');
			};
		end;        


	    fun build_arg_load_for_'mythryl_xxx_library_in_c_subprocess_c'  (arg_type, a, libcall)
		=
		# The general context here is that we are building some
		#     src/opt/gtk/c/in-sub/mythryl-gtk-library-in-c-subprocess.c
		# fn like
		#
		#	static void
		#	do__make_table( int argc, unsigned char** argv )
		#	{
		#	    check_argc( "do__make_table", 3, argc );
		#
		#	    int               i0 =                         int_arg( argc, argv, 0 );
		#	    int               i1 =                         int_arg( argc, argv, 1 );
		#	    int               b2 =                        bool_arg( argc, argv, 2 );
		#
		#	    int slot = find_free_widget_slot ();
		#
		#	    widget[slot] = gtk_table_new ( /*rows*/i0, /*cols*/i1, /*homogeneous*/b2 );
		#
		#	     printf(             "make_table%d\n", slot);      fflush( stdout );
		#	    fprintf(log_fd, "SENT:make_table%d\n", slot);      fflush( log_fd );
		#	}
		#
		# and we've reached the point of wanting to generate
		# one of the central int_arg/bool_arg/... lines.
		#
		# We will be called by
		#
		#     build_fun_arg_loads_for_'mythryl_xxx_library_in_c_subprocess_c'
		# in
		#     src/lib/make-library-glue/make-library-glue.pkg
		#
		# whenever it encounters an arg type other than
		#
		#     i (int),
		#     b (bool)
		#     s (string)
		#     f (double)
		#
		# This allows us to add support for otherwise unsupported
		# arg types, in particular 'w' for Widget.
		{
		    # Usually we fetch a widget as just
		    #
		    #    GtkWidget* widget    =  widget_arg( argc, argv, 0 );
		    #
		    # or such, but in a few cases we must cast to
		    # another type:
		    #  o If we see   GTK_ADJUSTMENT(w0)    we must do   GtkAdjustment*  w0 =  (GtkAdjustment*)   widget_arg( argc, argv, 0 );
		    #  o If we see   GTK_SCALE(w0)         we must do   GtkScale*       w0 =  (GtkScale*)        widget_arg( argc, argv, 0 );
		    #  o If we wee   GTK_RADIO_BUTTON(w0)  we must do   GtkRadioButton* w0 =  (GtkRadioButton*)  widget_arg( argc, argv, 0 );

		    widget_type
			=
			if   (libcall =~ (sprintf   "GTK_ADJUSTMENT\\(\\s*w%d\\s*\\)" a))   "GtkAdjustment";
			elif (libcall =~ (sprintf        "GTK_SCALE\\(\\s*w%d\\s*\\)" a))   "GtkScale";
			elif (libcall =~ (sprintf "GTK_RADIO_BUTTON\\(\\s*w%d\\s*\\)" a))   "GtkRadioButton";
			else								    "GtkWidget";
			fi;

		    sprintf  "        %-14s    w%d =    %-16s  widget_arg( argc, argv, %d );\n" (widget_type + "*") a  ("(" + widget_type + "*)") a;
		};


	    fun build_arg_load_for_'libmythryl_xxx_c'  (arg_type, a, libcall)
		=
		# The general context here is that we are building some
		#     src/opt/gtk/c/in-main/libmythryl-gtk.c
		# fn like
		#
		#	/* do__make_table
		#	 *
		#	 * gtk-client.api        type:    { session: Session,   rows: Int,   cols: Int,   homogeneous: Bool }   ->   Widget
		#	 * gtk-client-driver.api type:   (Session, Int, Int, Bool) -> Int (*new Widget*)
		#	 */
		#	static Val   do__make_table   (Task* task, Val arg)
		#	{
		#
		#	    int               i0 =                            GET_TUPLE_SLOT_AS_INT( arg, 1);
		#	    int               i1 =                            GET_TUPLE_SLOT_AS_INT( arg, 2);
		#	    int               b2 =                            GET_TUPLE_SLOT_AS_VAL( arg, 3) == HEAP_TRUE;
		#
		#	    int slot = find_free_widget_slot ();
		#
		#	    widget[slot] = gtk_table_new ( /*rows*/i0, /*cols*/i1, /*homogeneous*/b2 );
		#
		#	    return TAGGED_INT_FROM_C_INT(slot);
		#	}
		#
		# and we've reached the point of wanting to generate
		# one of the central GET_TUPLE_SLOT* lines.
		#
		# We will be called by
		#
		#     build_fun_arg_loads_for__'libmythryl_xxx_c'
		# in
		#     src/lib/make-library-glue/make-library-glue.pkg
		#
		# whenever it encounters an arg type other than
		#
		#     i (int),
		#     b (bool)
		#     s (string)
		#     f (double)
		#
		# This allows us to add support for otherwise unsupported
		# arg types, in particular 'w' for Widget.
		{
		    # Usually we fetch a widget as just
		    #
		    #    GtkWidget* widget    =  widget_arg( argc, argv, 0 );
		    #
		    # or such, but in a few cases we must cast to
		    # another type:
		    #  o If we see   GTK_ADJUSTMENT(w0)    we must do   GtkAdjustment*  w0 =  (GtkAdjustment*)   widget_arg( argc, argv, 0 );
		    #  o If we see   GTK_SCALE(w0)         we must do   GtkScale*       w0 =  (GtkScale*)        widget_arg( argc, argv, 0 );
		    #  o If we wee   GTK_RADIO_BUTTON(w0)  we must do   GtkRadioButton* w0 =  (GtkRadioButton*)  widget_arg( argc, argv, 0 );

		    widget_type
			=
			if   (libcall =~ (sprintf   "GTK_ADJUSTMENT\\(\\s*w%d\\s*\\)" a))   "GtkAdjustment";
			elif (libcall =~ (sprintf        "GTK_SCALE\\(\\s*w%d\\s*\\)" a))   "GtkScale";
			elif (libcall =~ (sprintf "GTK_RADIO_BUTTON\\(\\s*w%d\\s*\\)" a))   "GtkRadioButton";
			else								    "GtkWidget";
			fi;

		    sprintf  "    %-14s    w%d  =    %-16s  widget[ GET_TUPLE_SLOT_AS_INT( arg, %d) ];\n"
			      (widget_type + "*")
			      a
			      ("(" + widget_type + "*)")
			      (a+1)				# +1 because first arg is always Session.
		    ;
		};


	    fun build_callback_function   { patchfiles, paragraph: plf::Paragraph, x }
		=
		# We will be called whenever
		#     handle_fieldset()  
		# in
		#     src/lib/make-library-glue/make-library-glue.pkg
		# encounters a paragraph in
		#     src/opt/gtk/etc/gtk-construction.plan
		# containing the line
		#     do: callback_fn
		#
		# The 'callback_fn'  do: type is unsupported by
		# make-library-glue.pkg proper, which only supports
		#
		#     do: plain_fn
		#     do: fn_doc
		#     do: mythryl_type
		#     do: mythryl_code
		#
		# Consequently we bear full responsibility for generating
		# all required code in all required patchpoints in all
		# relevant asourcefiles.  Our 'r' argument gives us all
		# required resources to do so.
		#
		{
		    pfs      =  patchfiles;
		    fields   =  paragraph.fields;

		    fn_name  =  x.get_field(fields, "fn-name");		# "set_foo_callback"
		    fn_type  =  x.get_field(fields, "fn-type");		# "Session -> Widget -> Foo_Callback -> Void"
		    lowtype  =  x.get_field(fields, "lowtype");		# "G_OBJECT"

		    callback_name =     case (regex::find_first_match_to_ith_group 1 ./^set_(.*)_callback$/  fn_name)
					    THE x =>    x;
					    NULL  =>    die_x(sprintf "%s: callback_fn fn-name '%s' does not have form 'set_foo_callback' for any 'foo'\n"
								     (x.get_field_location (fields, "fn-name"))
								     fn_name
							     );
					esac;

		    callback_type		# E.g., "Void_Callback"
			=
			case (regex::find_first_match_to_ith_group 1 ./^Session\s+->\s+Widget\s+->\s+(\S+)\s+->\s+Void$/ fn_type)
			    THE x =>    x;
			    NULL  =>	die_x(sprintf "%s: callback_fn fn-type '%s' does not have form 'Session -> Widget -> Foo_Callback -> Void' for any 'foo'\n"
						     (x.get_field_location (fields, "fn-type"))
						     fn_type
					    );
			esac;

		    callback_name =   regex::replace_all  ./'/  "2"  callback_name;		# Primes don't work in C!

		    c_fn_name =  "set_"  +  callback_name  +  "_callback";

		    pfs = build_set_callback_fn_for_'mythryl_xxx_library_in_c_subprocess_c'  pfs  (x, fields, callback_name,          lowtype);
		    pfs = build_set_callback_fn_for_'libmythryl_xxx_c'                       pfs  (x, fields, callback_name, fn_type, lowtype);

		    pfs = x.build_table_entry_for_'libmythryl_xxx_c'                         pfs  (c_fn_name, fn_type);
		    pfs = x.build_trie_entry_for_'mythryl_xxx_library_in_c_subprocess_c'     pfs  (c_fn_name );

		    url =   case (x.maybe_get_field (fields, "url"))
				#
				THE field =>  field;
				NULL      =>  "http://library.gnome.org/devel/gobject/unstable/gobject-Signals.html#g-signal-connect";
			    esac;

		    api_doc =   case (x.maybe_get_field (fields,"api-doc"))  THE field =>  field;  NULL =>  "";   esac;

		    pfs = x.note__section_libref_xxx_tex__entry   pfs   { fields, fn_name, url, fn_type, libcall => "g_signal_connect" };

		    libcall     = "w0";			# Give arg counts and types to the following two functions.
		    result_type = "Int";		# Give result information   to the following two functions.

		    pfs = x.build_fun_declaration_for_'xxx_client_driver_api'				    pfs    { c_fn_name, libcall, result_type };
		    pfs = x.build_fun_definition_for_'xxx_client_driver_for_library_in_c_subprocess_pkg'    pfs    { c_fn_name, libcall, result_type };

		    pfs = x.build_fun_declaration_for_'xxx_client_api'				       	    pfs    { fn_name, fn_type, api_doc };
		    pfs = x.build_fun_definition_for_'xxx_client_driver_for_library_in_main_process_pkg'    pfs    { fn_name, c_fn_name, fn_type, libcall, result_type };

		    pfs = build_callback_fun_for_'xxx_client_g_pkg'					    pfs    (x, fields, fn_name, callback_type);

		    pfs;
		}
		where
		    # Synthesize a function for   xxx-client-g.pkg  like
		    # 
		    #	 #
		    #	 fun set_clicked_callback  s w c = set_void_callback (s, c, drv::set_clicked_callback (s.subsession, w));	# Handle "clicked" signal.
		    #
		    fun build_callback_fun_for_'xxx_client_g_pkg'
			#
			(pfs: Pfs)
			#
			( x:		mlg::Builder_Stuff,
			  fields:	mlg::Fields,
			  fn_name,			# E.g. "set_foo_callback"
			  callback_type		# E.g. "Void_Callback"
			)
			=
			case (x.maybe_get_field (fields, "cg-funs"))
			    #
			    THE field
				=>
				{   to =  x.to_xxx_client_g_pkg_funs;
				    #
				    pfs = to pfs   "        #\n";
				    pfs = to pfs   field;
				    pfs = to pfs   "            \n";
				    pfs = to pfs   "            # Above function handbuilt via src/lib/make-library-glue/make-library-glue.pkg:  build_callback_fun_for_'xxx_client_g_pkg'.\n";
				    pfs = to pfs   "\n";

				    x.callback_fns_handbuilt_for_'xxx_client_g_pkg'
					:=
					*x.callback_fns_handbuilt_for_'xxx_client_g_pkg' + 1;

				    pfs;
				};

			    NULL =>
				{
				    signal_name =   case (regex::find_first_match_to_ith_group 1 ./^set_(.*)_callback$/  fn_name)
							THE x => x;
							NULL  => die_x(sprintf "build_callback_fun_for_'xxx_client_g_pkg': fn_name '%s' does not have form set_foo_callback for any foo\n" fn_name);
						    esac;

				    note_callback_fn = "note_" + (tolower callback_type);		# "Void_Callback" -> "note_void_callback"

				    pfs =   x.to_xxx_client_g_pkg_funs
						pfs
						(    sprintf "    fun %-36s s w c = %-28s (s, c, drv::%-36s (s.subsession, w));\t# Handle '%s' signal\n"
							     fn_name
							     note_callback_fn
							     fn_name
							     signal_name
						);

				    x.callback_fns_handbuilt_for_'xxx_client_g_pkg'
					:=
					*x.callback_fns_handbuilt_for_'xxx_client_g_pkg'
					+ 1;

				    pfs;
				};
			esac;



		    # Synthesize a function for   mythryl-xxx-library-in-c-subprocess.c  like
		    #
		    #    static void
		    #    do__set_foo_callback( int argc, unsigned char** argv )
		    #    {
		    #	check_argc( "do__foo_callback", 1, argc );
		    #
		    #	{   GtkWidget* widget    =  widget_arg( argc, argv, 0 );
		    #
		    #	    int id   =  find_free_callback_id ();
		    #
		    #	    g_signal_connect( G_OBJECT(widget), "foo", G_CALLBACK( run_foo_callback ), (void*)id );
		    #
		    #	    printf(               "set_foo_callback%d\n", id );	fflush( stdout );
		    #	    fprintf(log_fd, "SENT: set_foo_callback%d\n", id );	fflush( log_fd );
		    #	}
		    #    }
		    #
		    fun build_set_callback_fn_for_'mythryl_xxx_library_in_c_subprocess_c'   (pfs: Pfs)   (r: mlg::Builder_Stuff, fields: mlg::Fields, callback_name, lowtype)
			=
			{   to =  x.to_mythryl_xxx_library_in_c_subprocess_c_funs;
			    #
			    pfs = to pfs    "\n";
			    pfs = to pfs    "static void\n";
			    pfs = to pfs   ("do__set_" + callback_name + "_callback( int argc, unsigned char** argv )\n");
			    pfs = to pfs    "{\n";
			    pfs = to pfs   ("    check_argc( \"do__set_" + callback_name + "_callback\", 1, argc );\n");
			    pfs = to pfs    "\n";
			    pfs = to pfs    "    GtkWidget* widget    =  widget_arg( argc, argv, 0 );\n";
			    pfs = to pfs    "\n";
			    pfs = to pfs    "    int id   =  find_free_callback_id ();\n";
			    pfs = to pfs    "\n";
			    pfs = to pfs   ("    g_signal_connect( " + lowtype + "(widget), \"" + callback_name + "\", G_CALLBACK( run_" + callback_name + "_callback ), (void*)id );\n");
			    pfs = to pfs    "\n";
			    pfs = to pfs   ("     printf(              \"set_" + callback_name + "_callback%d\\n\", id );      fflush( stdout );\n");
			    pfs = to pfs   ("    fprintf(log_fd, \"SENT: set_" + callback_name + "_callback%d\\n\", id );      fflush( log_fd );\n");
			    pfs = to pfs    "}\n";
			    pfs = to pfs   ("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  build_set_callback_fn_for_'mythryl_xxx_library_in_c_subprocess_c'  per  " + x.path.construction_plan + ".*/\n");

			    x.custom_fns_codebuilt_for_'mythryl_xxx_library_in_c_subprocess_c'
				:=
				*x.custom_fns_codebuilt_for_'mythryl_xxx_library_in_c_subprocess_c'
				+ 1;

			    pfs;
			};

		    # Synthesize a function for   libmythryl-xxx.c  like
		    #
		    #   /* do__set_foo_callback : Session -> Widget -> Void_Callback -> Void;
		    #    */
		    #   static Val do__set_foo_callback (Task* task, Val arg)
		    #   {
		    #       GtkWidget*        w0 =    (GtkWidget*)      widget[ GET_TUPLE_SLOT_AS_INT( arg, 1) ];	// '1' because 'arg' is a duple (session, widget).
		    #
		    #       int id   =  find_free_callback_id ();
		    #
		    #       g_signal_connect( G_OBJECT(widget), "clicked", G_CALLBACK( run_clicked_callback ), (void*)id );
		    #
		    #       return TAGGED_INT_FROM_C_INT(id);
		    #   }
		    #    
		    fun build_set_callback_fn_for_'libmythryl_xxx_c'
			(pfs: Pfs)
			( x:       mlg::Builder_Stuff,
			  fields:  mlg::Fields,
			  callback_name,
			  fn_type,			# E.g., "Session -> Widget -> Void_Callback -> Void".
			  lowtype
			)
			=
			{   to =  x.to_libmythryl_xxx_c_funs;
			    #
			    pfs = to pfs    "\n";
			    pfs = to pfs    "\n";
			    pfs = to pfs   ("/*  do__set_" + callback_name + "_callback : " + fn_type + "\n");
			    pfs = to pfs    " */\n";
			    pfs = to pfs   ("static Val   do__set_" + callback_name + "_callback (Task* task, Val arg)\n");
			    pfs = to pfs    "{\n";
			    pfs = to pfs     "\n";
			    pfs = to pfs     "    GtkWidget*        w0 __attribute__((unused)) =    (GtkWidget*)      widget[ GET_TUPLE_SLOT_AS_INT( arg, 1) ];        // '1' because 'arg' is a duple (session, widget).\n";
			    pfs = to pfs     "\n";		# The '__attribute__((unused))' is just to suppress some   unused variable 'w0'   compiler warnings.
			    pfs = to pfs    "    int id   =  find_free_callback_id ();\n";
			    pfs = to pfs    "\n";
			    pfs = to pfs   ("    g_signal_connect( " + lowtype + "(w0), \"" + callback_name + "\", G_CALLBACK( run_" + callback_name + "_callback ), (void*)id );\n");
			    pfs = to pfs    "\n";
			    pfs = to pfs    "    return TAGGED_INT_FROM_C_INT(id);\n";
			    pfs = to pfs     "}\n";
			    pfs = to pfs   ("/* Above fn built by src/lib/make-library-glue/make-library-glue.pkg:  build_set_callback_fn_for_'libmythryl_xxx_c'  per  " + x.path.construction_plan + ".*/\n");
			    pfs = to pfs     "\n";
			    pfs = to pfs     "\n";

			    x.custom_fns_codebuilt_for_'libmythryl_xxx_c'
				:=
				*x.custom_fns_codebuilt_for_'libmythryl_xxx_c'
				+ 1;

			    pfs;
			};
		end;



	    callback_function__definition
		=
		{ name   => "callback_fn",
		  do     =>  build_callback_function,
		  fields => [ { fieldname => "fn-name",  traits => [] },
			      { fieldname => "fn-type",  traits => [] },
			      { fieldname => "lowtype",  traits => [] },
			      { fieldname => "api-doc",  traits => [ plf::OPTIONAL ] },
			      { fieldname => "url",      traits => [ plf::OPTIONAL ] },
			      { fieldname => "cg-funs",  traits => [ plf::OPTIONAL, plf::DO_NOT_TRIM_WHITESPACE, plf::ALLOW_MULTIPLE_LINES ] }
			    ]
		};
	end;

    exit_x(0);

end;


##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################



## Code by Jeff Prothero: Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
