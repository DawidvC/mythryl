# opengl-client-g.pkg
#
# Here we handle the low-level Opengl-binding functionality
# common to our Opengl-in-main-process and Opengl-in-subprocess
# implementations;  the functionality specific to those two
# is handled by opengl_client_driver_for_library_in_main_process and opengl_client_driver_for_library_in_c_subprocess.			# opengl_client_driver_for_library_in_main_process		is from   src/opt/opengl/src/opengl-client-driver-for-library-in-main-process.pkg
#																	# opengl_client_driver_for_library_in_c_subprocess		is from   src/opt/opengl/src/opengl-client-driver-for-library-in-c-subprocess.pkg

# Compiled by:
#     src/lib/std/standard.lib

# Autogeneration of parts of this file done by:
#
#     src/opt/opengl/sh/make-opengl-glue
# per src/opt/opengl/etc/opengl-construction.plan

# Unit tests in:
#     src/opt/opengl/src/test/opengl-client-for-library-in-c-subprocess-unit-test.pkg

# Compare with:
#     src/opt/opengl/src/easy-opengl.pkg

# The other end of the pipe is implemented in:
#
#     src/opt/opengl/c/in-sub/mythryl-opengl-library-in-c-subprocess.c
#
# See the comments in that file for a description
# of the pipe protocol used.



###		"Each design decision constrains all subsequent
###              design decisions, making each successive design
###              problem harder to solve.  Tackle the hardest
###              design problems first, when you have the greatest
###              freedom to maneuver."


# This generic is invoked once each for
# our Opengl-in-main-processs
# and Opengl-in-subprocess
# implementations:
#
#     src/opt/opengl/src/opengl-client-for-library-in-main-process.pkg
#     src/opt/opengl/src/opengl-client-for-library-in-c-subprocess.pkg
#
#
generic package   opengl_client_g   (
    #             ===== 
    drv: Opengl_Client_Driver								# Opengl_Client_Driver		is from   src/opt/opengl/src/opengl-client-driver.api
	#
	# When called by opengl-client-for-library-in-main-process.pkg	drv == opengl_client_driver_for_library_in_main_process		# opengl_client_driver_for_library_in_main_process		is from   src/opt/opengl/src/opengl-client-driver-for-library-in-main-process.pkg
	# When called by opengl-client-for-library-in-c-subprocess.pkg	drv == opengl_client_driver_for_library_in_c_subprocess		# opengl_client_driver_for_library_in_c_subprocess		is from   src/opt/opengl/src/opengl-client-driver-for-library-in-c-subprocess.pkg
)
:
Opengl_Client										# Opengl_Client			is from   src/opt/opengl/src/opengl-client.api
{
    include package   opengl_event;							# opengl_event			is from   src/opt/opengl/src/opengl-event.pkg



    #################################################################################################
    # The following stuff gets copied directly from the
    #     build-a: mythryl-type
    # section of
    #     src/opt/opengl/etc/opengl-construction.plan
    # via handle_fieldset -> build_mythryl_type -> to_xxx_client_api_types in
    #     src/lib/make-library-glue/make-library-glue.pkg
    # This section is duplicated in
    #     src/opt/opengl/src/opengl-client.api
    # Do not edit this or following lines --- they are autobuilt.  (patchname="types")

   #  
   Void_Callback              =  Void                            ->  Void;
   Bool_Callback              =  Bool                            ->  Void;
   Float_Callback             =  Float                           ->  Void;
   Window_Size_Event_Callback =  opengl_event::Window_Size_Event ->  Void;                                             #                                                               # http://library.gnome.org/devel/gdk/stable/gdk-Event-Structures.html#GdkEventButton
    # Do not edit this or preceding lines --- they are autobuilt.
    #################################################################################################

    package int_map =  int_red_black_map;

    Session = { subsession:   drv::Session,
		#
		callback_map:   { void:			Ref( int_map::Map( Void			-> Void )),
				  bool:			Ref( int_map::Map( Bool			-> Void )),
				  float:		Ref( int_map::Map( Float		-> Void )),
				  window_size_event:    Ref( int_map::Map( Window_Size_Event	-> Void ))
				}
				#
				# The callback maps let us find the appropriate
				# Mythryl callback function to run when our Opengl
				# server process says to run callback #127 or such.
				#
				# To keep the typechecker happy we need a separate
				# map for each callback type.
	      };

    #
#    fun set_easy_id (session: Session, id, widget)
#        =
#        session.widgets_by_easy_id
#            :=
#            string_map::set( *session.widgets_by_easy_id, id, widget );

    #
#    fun drop_easy_id (session: Session, id)
#        =
#        session.widgets_by_easy_id
#            :=
#            #1 (string_map::drop (*session.widgets_by_easy_id, id ) );

    #
#    fun get_by_easy_id (session: Session, id)
#        =
#        the (string_map::get( *session.widgets_by_easy_id, id ) );
#


    stipulate


    herein




	#
#	fun run_eventloop_indefinitely (session: Session)
#            =
#            drv::run_eventloop_indefinitely session.subsession;
#
	#
#	fun run_eventloop_once { session: Session, block_until_event: Bool }
#            =
#            drv::run_eventloop_once (session.subsession, block_until_event);
#

	#
        fun make_session []
		=>
		{   callback_map  =   { void		    =>  REF (int_map::empty:   int_map::Map( Void              -> Void )),
					bool		    =>  REF (int_map::empty:   int_map::Map( Bool              -> Void )),
					float		    =>  REF (int_map::empty:   int_map::Map( Float             -> Void )),
					window_size_event   =>  REF (int_map::empty:   int_map::Map( Window_Size_Event -> Void ))
				      };

		    subsession =  drv::make_session  callback_map;

		    session = { subsession,
				callback_map
#				widget_tree	    =>  REF 0,
#				widgets_by_easy_id  =>  REF string_map::empty
			      };

		    session;
		};

            make_session (arg ! args)
		=>
		raise exception DIE "make_session: args not supported yet.";
	end;



    #################################################################################################
    # The following stuff gets built from paragraphs in
    #     src/opt/opengl/etc/opengl-construction.plan
    # via logic in
    #     src/lib/make-library-glue/make-library-glue.pkg
    # viz:
    #     build_plain_fn -> build_plain_fun_for_'xxx_client_g_pkg' -> to_xxx_client_g_pkg_funs
    #         build-a: plain-fn
    #         fn-name:
    #         fn-type:
    #         libcall:
    #     build_callback_fun_for_'xxx_client_g_pkg' -> to_xxx_client_g_pkg_funs
    #        fn_name, callback_type, hand-built code can be supplied via code:
    #     build_mythryl_code -> to_xxx_client_g_pkg_funs
    #        build-a: mythryl-code
    #        code:
    # Do not edit this or following lines --- they are autobuilt.  (patchname="functions")

       #
       fun note_void_callback (session: Session, callback, callback_id)
           =
           session.callback_map.void
               :=
               int_map::set (*session.callback_map.void, callback_id, callback);


       #
       fun note_bool_callback (session: Session, bool_callback, callback_id)
           =
           session.callback_map.bool
               :=
               int_map::set (*session.callback_map.bool, callback_id, bool_callback);


       #
       fun note_float_callback (session: Session, float_callback, callback_id)
           =
           session.callback_map.float
               :=
               int_map::set (*session.callback_map.float, callback_id, float_callback);


       #
       fun note_window_size_event_callback (session: Session, window_size_callback, callback_id)
           =
           session.callback_map.window_size_event
               :=
               int_map::set (*session.callback_map.window_size_event, callback_id, window_size_callback);
    fun set_window_size_event_callback       s c = note_window_size_event_callback (s, c, drv::set_window_size_event_callback       s.subsession);	# Handle 'window_size_event' signal

        #
        fun glew_init (session: Session)
            =
            drv::glew_init  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun open_window' { session: Session, wide, high, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, fullscreen }
            =
            drv::open_window2 (session.subsession, wide, high, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, fullscreen);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun open_window { session: Session, wide, high }
            =
            drv::open_window (session.subsession, wide, high);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun terminate (session: Session)
            =
            drv::terminate  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun swap_buffers (session: Session)
            =
            drv::swap_buffers  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun get_window_param (session: Session)
            =
            drv::get_window_param  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun set_window_title (session: Session, s0)
            =
            drv::set_window_title (session.subsession, s0);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun set_window_size { session: Session, wide, high }
            =
            drv::set_window_size (session.subsession, wide, high);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun set_window_position { session: Session, x, y }
            =
            drv::set_window_position (session.subsession, x, y);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun clear { session: Session, color_buffer, depth_buffer }
            =
            drv::clear (session.subsession, color_buffer, depth_buffer);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun print_hello_world (session: Session)
            =
            drv::print_hello_world  session.subsession;
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun negate_int (session: Session, i0)
            =
            drv::negate_int (session.subsession, i0);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun negate_float (session: Session, f0)
            =
            drv::negate_float (session.subsession, f0);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.


        #
        fun negate_boolean (session: Session, b0)
            =
            drv::negate_boolean (session.subsession, b0);
            
            # Above function autobuilt by src/lib/make-library-glue/make-library-glue.pkg:  build_plain_fun_for_'xxx_client_g_pkg'  per  src/opt/opengl/etc/opengl-construction.plan.

    # Do not edit this or preceding lines --- they are autobuilt.
    #################################################################################################

	#
#	fun get_widget_allocation (session: Session, widget)
#	    =
#	    {   my (x, y, wide, high)
#		    =
#		    drv::get_widget_allocation (session.subsession, widget);
#
#		{ x, y, wide, high };
#	    };

	#
#        fun make_dialog (session: Session)
#            =
#	    {   my (dialog, vbox, action_area)
#		    = 
#                    drv::make_dialog  session.subsession;
#
#		{ dialog, vbox, action_area };
#            };

	#
#        fun set_widget_tree  (session: Session,  widget)
#            =
#            session.widget_tree := widget;

	#
#        fun quit_eventloop  (session: Session)
#            =
#            drv::quit_eventloop  session.subsession;
#
#	fun unref_object (session: Session, widget)
#            =
#            drv::unref_object (session.subsession, widget);
#
    end;

#    stipulate
#	include package   eight_byte_float;
#    herein
#	fun clamp { min, max, value }
#	    =
#	    if   (value < min)   min;
#	    elif (value > max)   max;
#	    else                 value;
#    	    fi;
#    end;
};




##########################################################################
#   The following is support for outline-minor-mode in emacs.		 #
#  ^C @ ^T hides all Text. (Leaves all headings.)			 #
#  ^C @ ^A shows All of file.						 #
#  ^C @ ^Q Quickfolds entire file. (Leaves only top-level headings.)	 #
#  ^C @ ^I shows Immediate children of node.				 #
#  ^C @ ^S Shows all of a node.						 #
#  ^C @ ^D hiDes all of a node.						 #
#  ^HFoutline-mode gives more details.					 #
#  (Or do ^HI and read emacs:outline mode.)				 #
#									 #
# Local variables:							 #
# mode: outline-minor							 #
# outline-regexp: "[{ \t]*\\(fun \\)"			 		 #
# End:									 #
##########################################################################


## Code by Jeff Prothero: Copyright (c) 2010-2015,
## released per terms of SMLNJ-COPYRIGHT.
