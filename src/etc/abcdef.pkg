package x {

    exception FOO

    fun foo n:  Int
	=
	{   fun a (x, 0) = d x
	      | a (x, n) = b (x, n - 1)
	   also b (x, n) = c (x, n)
	   also c (x, n) = a (x, n)
	   also d x = e (x, 3)

#		      except e => (print "exn\n"; raise exception e)

	   also e (x, 0) = f x
	      | e (x, n) = e (x, n - 1)
	   also f 0 =  raise exception DIE "triggered"   #  BackTrace::trigger () 
	      | f n = n * g (n - 1)
	   also g n = a (n, 3);

	    f n;
	    winix__premicrothread::process::success;
	}

    fun main _ =
	BackTrace::monitor (\\ () => foo 3)
}
